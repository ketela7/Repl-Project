{"version":3,"sources":["/home/runner/workspace/__tests__/api/comprehensive-api-test.ts"],"sourcesContent":["/**\n * Comprehensive API Testing Suite\n * Tests all Google Drive API endpoints with real session cookies\n */\n\nimport APITester, { TestConfig } from './test-setup'\n\n// Test configuration\nconst testConfig: TestConfig = {\n  baseUrl: 'http://localhost:5000',\n  sessionCookie: '', // Will be extracted from browser\n  testTimeout: 30000,\n  retryAttempts: 3,\n}\n\n/**\n * Extended API Tester with comprehensive endpoint coverage\n */\nclass ComprehensiveAPITester extends APITester {\n  /**\n   * Test all authentication endpoints\n   */\n  async testAuthEndpoints(): Promise<any[]> {\n    console.log('\\nüîê Testing Authentication Endpoints...')\n    const authTests = []\n\n    authTests.push(await this.apiRequest('/api/auth/session', 'GET'))\n    authTests.push(await this.apiRequest('/api/auth/providers', 'GET'))\n\n    return authTests\n  }\n\n  /**\n   * Test complete Files API with all parameters\n   */\n  async testCompleteFilesAPI(): Promise<any[]> {\n    console.log('\\nüìÅ Testing Complete Files API...')\n    const filesTests = []\n\n    // Basic file listing with various parameters\n    filesTests.push(await this.apiRequest('/api/drive/files', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?pageSize=10', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?pageSize=50', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?pageSize=100', 'GET'))\n\n    // Sorting variations\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=name&sortOrder=asc', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=name&sortOrder=desc', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=modified&sortOrder=asc', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=modified&sortOrder=desc', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=created&sortOrder=asc', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=size&sortOrder=desc', 'GET'))\n\n    // View status filters\n    filesTests.push(await this.apiRequest('/api/drive/files?viewStatus=all', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?viewStatus=my-drive', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?viewStatus=shared', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?viewStatus=starred', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?viewStatus=trash', 'GET'))\n\n    // File type filters\n    filesTests.push(await this.apiRequest('/api/drive/files?fileType=folder', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?fileType=document', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?fileType=image', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?fileType=video', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?fileType=audio', 'GET'))\n\n    // Search queries\n    filesTests.push(await this.apiRequest('/api/drive/files?q=type:video', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?q=type:folder', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?search=mp4', 'GET'))\n\n    // Folder navigation (using real folder IDs from Drive)\n    filesTests.push(await this.apiRequest('/api/drive/files?folderId=149athC5H8cmh0QJq6xHu-cbFyS9J6fk-', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?folderId=1r-sGh52GdpwLYGvay85I999Wekr5XqVh', 'GET'))\n\n    return filesTests\n  }\n\n  /**\n   * Test individual file detail endpoints\n   */\n  async testFileDetailEndpoints(): Promise<any[]> {\n    console.log('\\nüìÑ Testing File Detail Endpoints...')\n    const detailTests = []\n\n    // Using real file IDs from your Drive\n    const testFiles = [\n      '1q5xt1XgsroFmbYL1HWO1q3DzVvynDU0B', // Video file\n      '149athC5H8cmh0QJq6xHu-cbFyS9J6fk-', // Folder \"00\"\n      '1r-sGh52GdpwLYGvay85I999Wekr5XqVh', // Another folder\n    ]\n\n    for (const fileId of testFiles) {\n      // Full file details\n      detailTests.push(await this.apiRequest(`/api/drive/files/${fileId}`, 'GET'))\n\n      // Progressive loading endpoints\n      detailTests.push(await this.apiRequest(`/api/drive/files/${fileId}/essential`, 'GET'))\n      detailTests.push(await this.apiRequest(`/api/drive/files/${fileId}/extended`, 'GET'))\n    }\n\n    return detailTests\n  }\n\n  /**\n   * Test all bulk operation endpoints (safe operations only)\n   */\n  async testBulkOperationEndpoints(): Promise<any[]> {\n    console.log('\\nüîÑ Testing Bulk Operation Endpoints...')\n    const bulkTests = []\n\n    const testItems = [\n      { id: '1q5xt1XgsroFmbYL1HWO1q3DzVvynDU0B', name: 'test-video.mp4', isFolder: false },\n      { id: '149athC5H8cmh0QJq6xHu-cbFyS9J6fk-', name: 'test-folder', isFolder: true },\n    ]\n\n    // Download operations (safe, read-only)\n    bulkTests.push(\n      await this.apiRequest('/api/drive/files/bulk/download', 'POST', {\n        items: testItems,\n        mode: 'export-links',\n      })\n    )\n\n    // Test individual operation endpoints (without actually performing destructive operations)\n    const fileId = testItems[0].id\n\n    // These endpoints should be tested with GET requests to check availability\n    bulkTests.push(await this.apiRequest(`/api/drive/files/${fileId}/move`, 'GET'))\n    bulkTests.push(await this.apiRequest(`/api/drive/files/${fileId}/copy`, 'GET'))\n    bulkTests.push(await this.apiRequest(`/api/drive/files/${fileId}/trash`, 'GET'))\n    bulkTests.push(await this.apiRequest(`/api/drive/files/${fileId}/share`, 'GET'))\n    bulkTests.push(await this.apiRequest(`/api/drive/files/${fileId}/rename`, 'GET'))\n    bulkTests.push(await this.apiRequest(`/api/drive/files/${fileId}/download`, 'GET'))\n\n    return bulkTests\n  }\n\n  /**\n   * Test performance and monitoring endpoints\n   */\n  async testPerformanceEndpoints(): Promise<any[]> {\n    console.log('\\n‚ö° Testing Performance Endpoints...')\n    const perfTests = []\n\n    perfTests.push(await this.apiRequest('/api/health', 'GET'))\n    perfTests.push(await this.apiRequest('/api/drive/performance', 'GET'))\n\n    // Cache management endpoints\n    perfTests.push(await this.apiRequest('/api/cache/clear', 'POST'))\n\n    return perfTests\n  }\n\n  /**\n   * Test error handling and edge cases\n   */\n  async testErrorHandling(): Promise<any[]> {\n    console.log('\\n‚ùå Testing Error Handling...')\n    const errorTests = []\n\n    // Test with invalid file IDs\n    errorTests.push(await this.apiRequest('/api/drive/files/invalid-file-id', 'GET'))\n    errorTests.push(await this.apiRequest('/api/drive/files/invalid-file-id/essential', 'GET'))\n\n    // Test with invalid parameters\n    errorTests.push(await this.apiRequest('/api/drive/files?pageSize=invalid', 'GET'))\n    errorTests.push(await this.apiRequest('/api/drive/files?sortBy=invalid', 'GET'))\n    errorTests.push(await this.apiRequest('/api/drive/files?viewStatus=invalid', 'GET'))\n\n    // Test with invalid folder IDs\n    errorTests.push(await this.apiRequest('/api/drive/files?folderId=invalid-folder', 'GET'))\n\n    return errorTests\n  }\n\n  /**\n   * Test rate limiting and concurrent requests\n   */\n  async testConcurrentRequests(): Promise<any[]> {\n    console.log('\\nüöÄ Testing Concurrent Requests...')\n    const concurrentTests = []\n\n    // Create multiple concurrent requests\n    const concurrentPromises = []\n    for (let i = 0; i < 5; i++) {\n      concurrentPromises.push(this.apiRequest('/api/drive/files?pageSize=10', 'GET'))\n    }\n\n    const results = await Promise.all(concurrentPromises)\n    concurrentTests.push(...results)\n\n    return concurrentTests\n  }\n\n  /**\n   * Run complete comprehensive test suite\n   */\n  async runComprehensiveTests(): Promise<any> {\n    console.log('üß™ Starting Comprehensive API Testing Suite...')\n    console.log('üéØ Target: All Google Drive Pro API endpoints')\n    console.log('üìß Using real session with Drive access')\n\n    const startTime = Date.now()\n\n    try {\n      // Validate session first\n      const session = await this.validateSession()\n      if (!session) {\n        throw new Error('Session validation failed - cannot proceed with testing')\n      }\n\n      console.log(`‚úÖ Session validated for: ${session.email}`)\n\n      // Run all test suites\n      const allTests = [\n        ...(await this.testAuthEndpoints()),\n        ...(await this.testCompleteFilesAPI()),\n        ...(await this.testFileDetailEndpoints()),\n        ...(await this.testBulkOperationEndpoints()),\n        ...(await this.testPerformanceEndpoints()),\n        ...(await this.testErrorHandling()),\n        ...(await this.testConcurrentRequests()),\n      ]\n\n      const totalTime = Date.now() - startTime\n\n      // Calculate comprehensive statistics\n      const passed = allTests.filter((t) => t.success).length\n      const failed = allTests.length - passed\n      const responseTimes = allTests.map((t) => t.responseTime)\n      const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length\n\n      // Group results by endpoint category\n      const categoryStats = this.categorizeResults(allTests)\n\n      // Performance analysis\n      const slowest = allTests.reduce((prev, curr) => (prev.responseTime > curr.responseTime ? prev : curr))\n      const fastest = allTests.reduce((prev, curr) => (prev.responseTime < curr.responseTime ? prev : curr))\n\n      const summary = {\n        totalTests: allTests.length,\n        passed,\n        failed,\n        successRate: Math.round((passed / allTests.length) * 100),\n        totalTime: Math.round(totalTime / 1000),\n        performance: {\n          averageResponseTime: Math.round(averageResponseTime),\n          slowestEndpoint: `${slowest.endpoint} (${slowest.responseTime}ms)`,\n          fastestEndpoint: `${fastest.endpoint} (${fastest.responseTime}ms)`,\n        },\n        categoryStats,\n        results: allTests,\n      }\n\n      this.printComprehensiveSummary(summary)\n      return summary\n    } catch (error) {\n      console.error('‚ùå Comprehensive testing failed:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Categorize test results by endpoint type\n   */\n  private categorizeResults(results: any[]): Record<string, any> {\n    const categories = {\n      auth: { total: 0, passed: 0, avgTime: 0 },\n      files: { total: 0, passed: 0, avgTime: 0 },\n      details: { total: 0, passed: 0, avgTime: 0 },\n      bulk: { total: 0, passed: 0, avgTime: 0 },\n      performance: { total: 0, passed: 0, avgTime: 0 },\n      errors: { total: 0, passed: 0, avgTime: 0 },\n    }\n\n    results.forEach((result) => {\n      let category = 'files' // default\n\n      if (result.endpoint.includes('/auth/')) category = 'auth'\n      else if (\n        result.endpoint.includes('/bulk/') ||\n        result.endpoint.includes('/move') ||\n        result.endpoint.includes('/copy') ||\n        result.endpoint.includes('/trash')\n      )\n        category = 'bulk'\n      else if (result.endpoint.includes('/essential') || result.endpoint.includes('/extended')) category = 'details'\n      else if (result.endpoint.includes('/health') || result.endpoint.includes('/performance') || result.endpoint.includes('/cache'))\n        category = 'performance'\n      else if (result.endpoint.includes('invalid')) category = 'errors'\n\n      categories[category].total++\n      if (result.success) categories[category].passed++\n      categories[category].avgTime += result.responseTime\n    })\n\n    // Calculate averages\n    Object.keys(categories).forEach((cat) => {\n      const category = categories[cat]\n      if (category.total > 0) {\n        category.avgTime = Math.round(category.avgTime / category.total)\n        category.successRate = Math.round((category.passed / category.total) * 100)\n      }\n    })\n\n    return categories\n  }\n\n  /**\n   * Print comprehensive test summary\n   */\n  private printComprehensiveSummary(summary: any): void {\n    console.log('\\n' + '='.repeat(60))\n    console.log('üìä COMPREHENSIVE API TEST SUMMARY')\n    console.log('='.repeat(60))\n\n    console.log(`üß™ Total Tests: ${summary.totalTests}`)\n    console.log(`‚úÖ Passed: ${summary.passed}`)\n    console.log(`‚ùå Failed: ${summary.failed}`)\n    console.log(`üìà Success Rate: ${summary.successRate}%`)\n    console.log(`‚è±Ô∏è  Total Time: ${summary.totalTime}s`)\n\n    console.log('\\nüìà Performance Metrics:')\n    console.log(`   Average Response Time: ${summary.performance.averageResponseTime}ms`)\n    console.log(`   Slowest: ${summary.performance.slowestEndpoint}`)\n    console.log(`   Fastest: ${summary.performance.fastestEndpoint}`)\n\n    console.log('\\nüìÇ Category Breakdown:')\n    Object.entries(summary.categoryStats).forEach(([category, stats]: [string, any]) => {\n      if (stats.total > 0) {\n        console.log(`   ${category.toUpperCase()}: ${stats.passed}/${stats.total} (${stats.successRate}%) - Avg: ${stats.avgTime}ms`)\n      }\n    })\n\n    console.log('\\n' + '='.repeat(60))\n  }\n}\n\n// Add dummy test to prevent \"no tests\" error\ndescribe('Comprehensive API Test', () => {\n  it('exports ComprehensiveAPITester class', () => {\n    expect(ComprehensiveAPITester).toBeDefined()\n  })\n})\n\nexport default ComprehensiveAPITester\n"],"names":["testConfig","baseUrl","sessionCookie","testTimeout","retryAttempts","ComprehensiveAPITester","APITester","testAuthEndpoints","console","log","authTests","push","apiRequest","testCompleteFilesAPI","filesTests","testFileDetailEndpoints","detailTests","testFiles","fileId","testBulkOperationEndpoints","bulkTests","testItems","id","name","isFolder","items","mode","testPerformanceEndpoints","perfTests","testErrorHandling","errorTests","testConcurrentRequests","concurrentTests","concurrentPromises","i","results","Promise","all","runComprehensiveTests","startTime","Date","now","session","validateSession","Error","email","allTests","totalTime","passed","filter","t","success","length","failed","responseTimes","map","responseTime","averageResponseTime","reduce","a","b","categoryStats","categorizeResults","slowest","prev","curr","fastest","summary","totalTests","successRate","Math","round","performance","slowestEndpoint","endpoint","fastestEndpoint","printComprehensiveSummary","error","categories","auth","total","avgTime","files","details","bulk","errors","forEach","result","category","includes","Object","keys","cat","repeat","entries","stats","toUpperCase","describe","it","expect","toBeDefined"],"mappings":"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"}