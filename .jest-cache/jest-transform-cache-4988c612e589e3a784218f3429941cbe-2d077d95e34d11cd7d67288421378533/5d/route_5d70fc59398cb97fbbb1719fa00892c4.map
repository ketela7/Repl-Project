{"version":3,"names":["cov_uqvpre5un","actualCoverage","s","GET","request","f","searchParams","URL","url","fileId","get","b","_server","NextResponse","json","error","status","authResult","_apiutils","initDriveService","success","response","driveService","metadata","_apithrottle","throttledDriveRequest","_apiretry","retryDriveApiCall","drive","files","fields","name","fileName","mimeType","size","data","isGoogleWorkspaceFile","exportFormat","getExportFormat","export","responseType","exportFileName","replace","getFileExtension","stream","ReadableStream","start","controller","closed","on","chunk","enqueue","Uint8Array","close","err","Response","headers","alt","handleApiError","startsWith","exportMap","extensionMap"],"sources":["/home/runner/workspace/src/app/api/drive/files/download/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\nimport { retryDriveApiCall } from '@/lib/api-retry'\nimport { throttledDriveRequest } from '@/lib/api-throttle'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const fileId = searchParams.get('fileId')\n\n    if (!fileId) {\n      return NextResponse.json({ error: 'File ID is required' }, { status: 400 })\n    }\n\n    // Initialize Drive service with authentication\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const driveService = authResult.driveService!\n\n    // Get file metadata first\n    const metadata = await throttledDriveRequest(async () => {\n      return await retryDriveApiCall(async () => {\n        return await driveService.drive.files.get({\n          fileId,\n          fields: 'name,mimeType,size',\n        })\n      })\n    })\n\n    const { name: fileName, mimeType, size } = metadata.data\n\n    if (!fileName || !mimeType) {\n      return NextResponse.json({ error: 'File metadata incomplete' }, { status: 500 })\n    }\n\n    // Handle Google Workspace files (export)\n    if (isGoogleWorkspaceFile(mimeType)) {\n      const exportFormat = getExportFormat(mimeType)\n      const response = await throttledDriveRequest(async () => {\n        return await retryDriveApiCall(async () => {\n          return await driveService.drive.files.export(\n            {\n              fileId,\n              mimeType: exportFormat,\n            },\n            {\n              responseType: 'stream',\n            },\n          )\n        })\n      })\n\n      const exportFileName = `${fileName.replace(/\\.[^/.]+$/, '')}.${getFileExtension(exportFormat)}`\n\n      // Convert Node.js stream to Web Stream\n      const stream = new ReadableStream({\n        start(controller) {\n          let closed = false\n\n          response.data.on('data', (chunk: Buffer) => {\n            if (!closed) {\n              controller.enqueue(new Uint8Array(chunk))\n            }\n          })\n\n          response.data.on('end', () => {\n            if (!closed) {\n              closed = true\n              controller.close()\n            }\n          })\n\n          response.data.on('error', (err: Error) => {\n            if (!closed) {\n              closed = true\n              controller.error(err)\n            }\n          })\n        },\n      })\n\n      return new Response(stream, {\n        headers: {\n          'Content-Type': exportFormat,\n          'Content-Disposition': `attachment; filename=\"${exportFileName}\"`,\n          'Cache-Control': 'no-cache',\n        },\n      })\n    }\n\n    // Regular file download - stream response\n    const response = await throttledDriveRequest(async () => {\n      return await retryDriveApiCall(async () => {\n        return await driveService.drive.files.get(\n          {\n            fileId,\n            alt: 'media',\n          },\n          {\n            responseType: 'stream',\n          },\n        )\n      })\n    })\n\n    // Convert Node.js stream to Web Stream\n    const stream = new ReadableStream({\n      start(controller) {\n        let closed = false\n\n        response.data.on('data', (chunk: Buffer) => {\n          if (!closed) {\n            controller.enqueue(new Uint8Array(chunk))\n          }\n        })\n\n        response.data.on('end', () => {\n          if (!closed) {\n            closed = true\n            controller.close()\n          }\n        })\n\n        response.data.on('error', (err: Error) => {\n          if (!closed) {\n            closed = true\n            controller.error(err)\n          }\n        })\n      },\n    })\n\n    return new Response(stream, {\n      headers: {\n        'Content-Type': mimeType || 'application/octet-stream',\n        'Content-Disposition': `attachment; filename=\"${fileName}\"`,\n        ...(size && { 'Content-Length': size }),\n        'Cache-Control': 'no-cache',\n      },\n    })\n  } catch (error) {\n    return handleApiError(error)\n  }\n}\n\n/**\n * Check if file is Google Workspace file that needs export\n */\nfunction isGoogleWorkspaceFile(mimeType: string): boolean {\n  return mimeType?.startsWith('application/vnd.google-apps.') || false\n}\n\n/**\n * Get appropriate export format for Google Workspace files\n */\nfunction getExportFormat(mimeType: string): string {\n  const exportMap: { [key: string]: string } = {\n    'application/vnd.google-apps.document': 'application/pdf',\n    'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.google-apps.presentation':\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'application/vnd.google-apps.drawing': 'image/png',\n  }\n\n  return exportMap[mimeType] || 'application/pdf'\n}\n\n/**\n * Get file extension from mime type\n */\nfunction getFileExtension(mimeType: string): string {\n  const extensionMap: { [key: string]: string } = {\n    'application/pdf': 'pdf',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'pptx',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',\n    'image/png': 'png',\n    'image/jpeg': 'jpg',\n    'text/plain': 'txt',\n    'text/csv': 'csv',\n  }\n\n  return extensionMap[mimeType] || 'pdf'\n}\n"],"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","ignoreList":[]}