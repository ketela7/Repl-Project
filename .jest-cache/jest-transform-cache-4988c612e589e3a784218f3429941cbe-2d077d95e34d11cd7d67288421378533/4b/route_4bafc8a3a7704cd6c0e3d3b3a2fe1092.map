{"version":3,"sources":["/home/runner/workspace/src/app/api/drive/files/copy/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, targetFolderId, namePrefix, items } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        let copyName = undefined\n\n        // For bulk operations with name prefix\n        if (isBulkOperation && namePrefix) {\n          const originalItem = items.find((item: any) => item.id === id)\n          copyName = `${namePrefix} ${originalItem?.name || 'Copy'}`\n        }\n\n        const result = await driveService.copyFile(id, targetFolderId)\n        results.push({ fileId: id, success: true, result })\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Copy failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'copy',\n      targetFolderId,\n      namePrefix,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],"names":["POST","request","authResult","initDriveService","success","response","driveService","body","json","fileId","targetFolderId","namePrefix","items","fileIds","length","map","item","id","isBulkOperation","NextResponse","error","status","results","errors","copyName","undefined","originalItem","find","name","result","copyFile","push","message","processed","failed","type","operation","handleApiError"],"mappings":";;;;+BAIsBA;;;eAAAA;;;wBAJoB;0BAEO;AAE1C,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,0BAAgB;QACzC,IAAI,CAACD,WAAWE,OAAO,EAAE;YACvB,OAAOF,WAAWG,QAAQ;QAC5B;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAGJ;QACzB,MAAMK,OAAO,MAAMN,QAAQO,IAAI;QAE/B,yCAAyC;QACzC,MAAM,EAAEC,MAAM,EAAEC,cAAc,EAAEC,UAAU,EAAEC,KAAK,EAAE,GAAGL;QAEtD,iEAAiE;QACjE,MAAMM,UAAUD,SAASA,MAAME,MAAM,GAAG,IAAIF,MAAMG,GAAG,CAAC,CAACC,OAAcA,KAAKC,EAAE,IAAI;YAACR;SAAO;QACxF,MAAMS,kBAAkBN,SAASA,MAAME,MAAM,GAAG;QAEhD,IAAI,CAACD,WAAWA,QAAQC,MAAM,KAAK,GAAG;YACpC,OAAOK,oBAAY,CAACX,IAAI,CAAC;gBAAEY,OAAO;YAAwB,GAAG;gBAAEC,QAAQ;YAAI;QAC7E;QAEA,MAAMC,UAAU,EAAE;QAClB,MAAMC,SAAS,EAAE;QAEjB,KAAK,MAAMN,MAAMJ,QAAS;YACxB,IAAI;gBACF,IAAIW,WAAWC;gBAEf,uCAAuC;gBACvC,IAAIP,mBAAmBP,YAAY;oBACjC,MAAMe,eAAed,MAAMe,IAAI,CAAC,CAACX,OAAcA,KAAKC,EAAE,KAAKA;oBAC3DO,WAAW,GAAGb,WAAW,CAAC,EAAEe,cAAcE,QAAQ,QAAQ;gBAC5D;gBAEA,MAAMC,SAAS,MAAMvB,aAAawB,QAAQ,CAACb,IAAIP;gBAC/CY,QAAQS,IAAI,CAAC;oBAAEtB,QAAQQ;oBAAIb,SAAS;oBAAMyB;gBAAO;YACnD,EAAE,OAAOT,OAAY;gBACnBG,OAAOQ,IAAI,CAAC;oBACVtB,QAAQQ;oBACRb,SAAS;oBACTgB,OAAOA,MAAMY,OAAO,IAAI;gBAC1B;YACF;QACF;QAEA,MAAM3B,WAAW;YACfD,SAASmB,OAAOT,MAAM,KAAK;YAC3BmB,WAAWX,QAAQR,MAAM;YACzBoB,QAAQX,OAAOT,MAAM;YACrBqB,MAAMjB,kBAAkB,SAAS;YACjCkB,WAAW;YACX1B;YACAC;YACAW;YACAC,QAAQA,OAAOT,MAAM,GAAG,IAAIS,SAASE;QACvC;QAEA,OAAON,oBAAY,CAACX,IAAI,CAACH,UAAU;YACjCgB,QAAQE,OAAOT,MAAM,KAAK,IAAI,MAAM;QACtC;IACF,EAAE,OAAOM,OAAY;QACnB,OAAOiB,IAAAA,wBAAc,EAACjB;IACxB;AACF"}