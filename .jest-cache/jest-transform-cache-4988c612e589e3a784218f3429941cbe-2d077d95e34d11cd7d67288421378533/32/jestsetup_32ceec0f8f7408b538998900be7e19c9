8b10a5ca698dd612b8ec0c3ae3534eee
"use strict";
// Mock Next.js router
jest.mock('next/navigation', ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            };
        },
        useSearchParams () {
            return new URLSearchParams();
        },
        usePathname () {
            return '';
        }
    }));
// Mock NextAuth
jest.mock('next-auth/react', ()=>({
        useSession: jest.fn(()=>({
                data: null,
                status: 'loading'
            })),
        signIn: jest.fn(),
        signOut: jest.fn(),
        SessionProvider: ({ children })=>children
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
const _util = require("util");
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;
// Mock Request and Response globals for API testing
global.Request = global.Request || class MockRequest {
    constructor(url, options = {}){
        Object.defineProperty(this, 'url', {
            value: url,
            writable: false
        });
        this.method = options.method || 'GET';
        this.headers = new Map(Object.entries(options.headers || {}));
        this.body = options.body || null;
    }
    async json() {
        return JSON.parse(this.body || '{}');
    }
};
global.Response = global.Response || class MockResponse {
    constructor(body, options = {}){
        this.body = body;
        this.status = options.status || 200;
        this.headers = new Map(Object.entries(options.headers || {}));
    }
    async json() {
        return JSON.parse(this.body || '{}');
    }
};
// Mock environment variables
process.env = {
    ...process.env,
    NEXTAUTH_URL: 'http://localhost:3000',
    NEXTAUTH_SECRET: 'test-secret',
    GOOGLE_CLIENT_ID: 'test-client-id',
    GOOGLE_CLIENT_SECRET: 'test-client-secret'
};
// Mock window.matchMedia
const mockMatchMedia = jest.fn().mockImplementation((query)=>({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn()
    }));
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: mockMatchMedia
});
// Mock localStorage for themes
const localStorageMock = {
    getItem: jest.fn(()=>null),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock,
    writable: true
});
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Note: Using @testing-library/jest-dom matchers instead of custom ones
// Suppress console errors during tests
const originalError = console.error;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
});

//# sourceMappingURL=data:application/json;base64,