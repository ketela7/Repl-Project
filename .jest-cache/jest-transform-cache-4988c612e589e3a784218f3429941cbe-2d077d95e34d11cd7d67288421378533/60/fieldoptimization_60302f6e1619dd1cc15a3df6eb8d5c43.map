{"version":3,"names":["FIELD_SETS","cov_2opze6uzjl","f","s","VIEW_MODE_FIELDS","fieldOptimizationMonitor","getDynamicFields","getOptimizedFields","validateRequiredFields","BASE_FIELDS","LIST_BASIC","LIST_STANDARD","LIST_DETAILED","FILE_DETAILS","DETAILS_COMPLETE","DOWNLOAD","SHARE","MOVE_COPY","SEARCH","FOLDER_STRUCTURE","DRIVE_INFO","operation","baseOperation","context","b","fields","split","showThumbnails","includes","push","showOwners","showPermissions","showDetails","includeCapabilities","join","GRID","LIST","COMPACT","DETAILED","FieldOptimizationMonitor","trackRequest","responseTime","fieldsUsed","existing","metrics","get","requestCount","averageResponseTime","dataSaved","fieldsSaved","newCount","newAvgTime","estimatedFullFields","Math","max","set","getMetrics","Object","fromEntries","getTotalSavings","Array","from","values","reduce","acc","metric","requestsOptimized","estimatedDataSaved","Map","response","requiredFields","every","field","fieldPath","current","path"],"sources":["/home/runner/workspace/src/lib/google-drive/field-optimization.ts"],"sourcesContent":["/**\n * Google Drive API Field Optimization\n * Optimizes API requests by requesting only necessary fields for each operation\n * This significantly improves request performance and reduces bandwidth usage\n */\n\n// Base fields always needed for file identification and basic operations\nconst BASE_FIELDS = 'id,name,mimeType'\n\n// Optimized field sets for different use cases\nexport const FIELD_SETS = {\n  // Minimal fields for basic listing (fastest)\n  LIST_BASIC: `${BASE_FIELDS},parents,trashed`,\n\n  // Essential fields for file management operations - now includes owners, createdTime, and thumbnailLink for preview functionality\n  LIST_STANDARD: `${BASE_FIELDS},size,createdTime,modifiedTime,parents,owners(displayName,emailAddress),trashed,shared,thumbnailLink,capabilities(canEdit,canShare,canDelete,canDownload,canCopy,canTrash,canUntrash,canRename,canMoveItemWithinDrive)`,\n\n  // Extended fields for detailed views\n  LIST_DETAILED: `${BASE_FIELDS},size,createdTime,modifiedTime,webViewLink,thumbnailLink,parents,owners(displayName,emailAddress,photoLink),shared,trashed,starred,capabilities(canEdit,canShare,canDelete,canDownload,canCopy,canTrash,canUntrash,canRename,canMoveItemWithinDrive)`,\n\n  // Complete fields for file details page - comprehensive technical details\n  FILE_DETAILS: `${BASE_FIELDS},size,quotaBytesUsed,createdTime,modifiedTime,viewedByMeTime,sharedWithMeTime,webViewLink,webContentLink,thumbnailLink,iconLink,parents,owners,lastModifyingUser,sharingUser,shared,trashed,starred,viewed,ownedByMe,viewedByMe,description,properties,appProperties,capabilities,permissions,copyRequiresWriterPermission,writersCanShare,folderColorRgb,originalFilename,fullFileExtension,fileExtension,md5Checksum,sha1Checksum,sha256Checksum,headRevisionId,isAppAuthorized,hasAugmentedPermissions,spaces,version,teamDriveId,driveId,hasVisitedTeamDrive,exportLinks,shortcutDetails,contentRestrictions,resourceKey,linkShareMetadata,labelInfo,imageMediaMetadata,videoMediaMetadata`,\n\n  // Ultra-comprehensive for Details Operations - ALL possible fields\n  DETAILS_COMPLETE: '*', // Request all available fields for comprehensive details\n\n  // Fields for download operations\n  DOWNLOAD: `${BASE_FIELDS},webContentLink,size,mimeType`,\n\n  // Fields for sharing operations\n  SHARE: `${BASE_FIELDS},shared,permissions,capabilities`,\n\n  // Fields for move/copy operations\n  MOVE_COPY: `${BASE_FIELDS},parents,capabilities`,\n\n  // Fields for search operations\n  SEARCH: `${BASE_FIELDS},size,modifiedTime,parents,trashed,thumbnailLink`,\n\n  // Fields for folder structure\n  FOLDER_STRUCTURE: `${BASE_FIELDS},parents,trashed`,\n\n  // Fields for drive info\n  DRIVE_INFO: 'storageQuota,user',\n} as const\n\n/**\n * Get optimized fields for specific operations\n */\nexport function getOptimizedFields(operation: keyof typeof FIELD_SETS): string {\n  return FIELD_SETS[operation]\n}\n\n/**\n * Dynamic field optimization based on UI context\n */\nexport interface FieldContext {\n  showThumbnails?: boolean\n  showOwners?: boolean\n  showPermissions?: boolean\n  showDetails?: boolean\n  includeCapabilities?: boolean\n}\n\nexport function getDynamicFields(baseOperation: keyof typeof FIELD_SETS, context: FieldContext = {}): string {\n  const fields = FIELD_SETS[baseOperation].split(',')\n\n  // Add optional fields based on context\n  if (context.showThumbnails && !fields.includes('thumbnailLink')) {\n    fields.push('thumbnailLink')\n  }\n\n  if (context.showOwners && !fields.includes('owners')) {\n    fields.push('owners')\n  }\n\n  if (context.showPermissions && !fields.includes('permissions')) {\n    fields.push('permissions')\n  }\n\n  if (context.showDetails) {\n    if (!fields.includes('description')) fields.push('description')\n    if (!fields.includes('properties')) fields.push('properties')\n  }\n\n  if (context.includeCapabilities && !fields.includes('capabilities')) {\n    fields.push('capabilities')\n  }\n\n  return fields.join(',')\n}\n\n/**\n * Field optimization for different view modes\n */\nexport const VIEW_MODE_FIELDS = {\n  // Grid view with thumbnails\n  GRID: getDynamicFields('LIST_STANDARD', { showThumbnails: true }),\n\n  // List view without thumbnails\n  LIST: FIELD_SETS.LIST_STANDARD,\n\n  // Compact view - minimal data\n  COMPACT: FIELD_SETS.LIST_BASIC,\n\n  // Detailed view - comprehensive data\n  DETAILED: FIELD_SETS.LIST_DETAILED,\n} as const\n\n/**\n * Monitoring for field optimization performance\n */\ninterface FieldOptimizationMetrics {\n  requestCount: number\n  averageResponseTime: number\n  dataSaved: number\n  fieldsSaved: number\n}\n\nclass FieldOptimizationMonitor {\n  private metrics: Map<string, FieldOptimizationMetrics> = new Map()\n\n  trackRequest(operation: string, responseTime: number, fieldsUsed: number) {\n    const existing = this.metrics.get(operation) || {\n      requestCount: 0,\n      averageResponseTime: 0,\n      dataSaved: 0,\n      fieldsSaved: 0,\n    }\n\n    const newCount = existing.requestCount + 1\n    const newAvgTime = (existing.averageResponseTime * existing.requestCount + responseTime) / newCount\n\n    // Estimate fields saved (assuming full field set would be ~30 fields)\n    const estimatedFullFields = 30\n    const fieldsSaved = Math.max(0, estimatedFullFields - fieldsUsed)\n\n    this.metrics.set(operation, {\n      requestCount: newCount,\n      averageResponseTime: newAvgTime,\n      dataSaved: existing.dataSaved + fieldsSaved * 100, // Rough bytes estimate\n      fieldsSaved: existing.fieldsSaved + fieldsSaved,\n    })\n  }\n\n  getMetrics(): Record<string, FieldOptimizationMetrics> {\n    return Object.fromEntries(this.metrics)\n  }\n\n  getTotalSavings(): {\n    requestsOptimized: number\n    estimatedDataSaved: number\n    fieldsSaved: number\n  } {\n    return Array.from(this.metrics.values()).reduce(\n      (acc, metric) => ({\n        requestsOptimized: acc.requestsOptimized + metric.requestCount,\n        estimatedDataSaved: acc.estimatedDataSaved + metric.dataSaved,\n        fieldsSaved: acc.fieldsSaved + metric.fieldsSaved,\n      }),\n      { requestsOptimized: 0, estimatedDataSaved: 0, fieldsSaved: 0 },\n    )\n  }\n}\n\nexport const fieldOptimizationMonitor = new FieldOptimizationMonitor()\n\n/**\n * Utility to validate if required fields are present in response\n */\nexport function validateRequiredFields(response: any, requiredFields: string[]): boolean {\n  return requiredFields.every(field => {\n    const fieldPath = field.split('.')\n    let current = response\n\n    for (const path of fieldPath) {\n      if (current == null || !(path in current)) {\n        return false\n      }\n      current = current[path]\n    }\n\n    return true\n  })\n}\n"],"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","ignoreList":[]}