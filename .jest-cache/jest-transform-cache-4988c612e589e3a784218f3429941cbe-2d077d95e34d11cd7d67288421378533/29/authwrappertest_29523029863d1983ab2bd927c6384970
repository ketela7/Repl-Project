dd18e2cfaff8d7cd98829b15cd70adc0
"use strict";
jest.mock('next-auth/react');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _react1 = require("next-auth/react");
const _authwrapper = require("../auth-wrapper");
const mockUseSession = _react1.useSession;
describe('AuthWrapper', ()=>{
    const TestComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "Protected Content"
        });
    const FallbackComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "Please sign in"
        });
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('shows loading state when session is loading', ()=>{
        mockUseSession.mockReturnValue({
            data: null,
            status: 'loading',
            update: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_authwrapper.AuthWrapper, {
            fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(FallbackComponent, {}),
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        expect(_react.screen.getByText('Authenticating')).toBeInTheDocument();
        expect(_react.screen.getByText('Verifying your Google Drive access...')).toBeInTheDocument();
        expect(_react.screen.queryByText('Protected Content')).not.toBeInTheDocument();
        expect(_react.screen.queryByText('Please sign in')).not.toBeInTheDocument();
    });
    it('shows fallback when user is not authenticated', ()=>{
        mockUseSession.mockReturnValue({
            data: null,
            status: 'unauthenticated',
            update: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_authwrapper.AuthWrapper, {
            fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(FallbackComponent, {}),
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        expect(_react.screen.getByText('Please sign in')).toBeInTheDocument();
        expect(_react.screen.queryByText('Protected Content')).not.toBeInTheDocument();
        expect(_react.screen.queryByText('Loading...')).not.toBeInTheDocument();
    });
    it('shows children when user is authenticated', ()=>{
        mockUseSession.mockReturnValue({
            data: {
                user: {
                    id: 'test-id',
                    name: 'Test User',
                    email: 'test@example.com'
                },
                expires: '2025-12-31'
            },
            status: 'authenticated',
            update: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_authwrapper.AuthWrapper, {
            fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(FallbackComponent, {}),
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        expect(_react.screen.getByText('Protected Content')).toBeInTheDocument();
        expect(_react.screen.queryByText('Please sign in')).not.toBeInTheDocument();
        expect(_react.screen.queryByText('Loading...')).not.toBeInTheDocument();
    });
    it('shows default fallback when no custom fallback provided', ()=>{
        mockUseSession.mockReturnValue({
            data: null,
            status: 'unauthenticated',
            update: jest.fn()
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_authwrapper.AuthWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        expect(_react.screen.getByText('Access denied. Please sign in.')).toBeInTheDocument();
        expect(_react.screen.queryByText('Protected Content')).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2NvbXBvbmVudHMvYXV0aC9fX3Rlc3RzX18vYXV0aC13cmFwcGVyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyB1c2VTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoL3JlYWN0J1xuXG5pbXBvcnQgeyBBdXRoV3JhcHBlciB9IGZyb20gJy4uL2F1dGgtd3JhcHBlcidcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5cbmplc3QubW9jaygnbmV4dC1hdXRoL3JlYWN0JylcbmNvbnN0IG1vY2tVc2VTZXNzaW9uID0gdXNlU2Vzc2lvbiBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiB1c2VTZXNzaW9uPlxuXG5kZXNjcmliZSgnQXV0aFdyYXBwZXInLCAoKSA9PiB7XG4gIGNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiA8ZGl2PlByb3RlY3RlZCBDb250ZW50PC9kaXY+XG4gIGNvbnN0IEZhbGxiYWNrQ29tcG9uZW50ID0gKCkgPT4gPGRpdj5QbGVhc2Ugc2lnbiBpbjwvZGl2PlxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXG4gIH0pXG5cbiAgaXQoJ3Nob3dzIGxvYWRpbmcgc3RhdGUgd2hlbiBzZXNzaW9uIGlzIGxvYWRpbmcnLCAoKSA9PiB7XG4gICAgbW9ja1VzZVNlc3Npb24ubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBzdGF0dXM6ICdsb2FkaW5nJyxcbiAgICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgIH0pXG5cbiAgICByZW5kZXIoXG4gICAgICA8QXV0aFdyYXBwZXIgZmFsbGJhY2s9ezxGYWxsYmFja0NvbXBvbmVudCAvPn0+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L0F1dGhXcmFwcGVyPlxuICAgIClcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdBdXRoZW50aWNhdGluZycpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1ZlcmlmeWluZyB5b3VyIEdvb2dsZSBEcml2ZSBhY2Nlc3MuLi4nKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ1Byb3RlY3RlZCBDb250ZW50JykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnUGxlYXNlIHNpZ24gaW4nKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcblxuICBpdCgnc2hvd3MgZmFsbGJhY2sgd2hlbiB1c2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkJywgKCkgPT4ge1xuICAgIG1vY2tVc2VTZXNzaW9uLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgc3RhdHVzOiAndW5hdXRoZW50aWNhdGVkJyxcbiAgICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgIH0pXG5cbiAgICByZW5kZXIoXG4gICAgICA8QXV0aFdyYXBwZXIgZmFsbGJhY2s9ezxGYWxsYmFja0NvbXBvbmVudCAvPn0+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L0F1dGhXcmFwcGVyPlxuICAgIClcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdQbGVhc2Ugc2lnbiBpbicpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnUHJvdGVjdGVkIENvbnRlbnQnKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdMb2FkaW5nLi4uJykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgaXQoJ3Nob3dzIGNoaWxkcmVuIHdoZW4gdXNlciBpcyBhdXRoZW50aWNhdGVkJywgKCkgPT4ge1xuICAgIG1vY2tVc2VTZXNzaW9uLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzZXI6IHsgaWQ6ICd0ZXN0LWlkJywgbmFtZTogJ1Rlc3QgVXNlcicsIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScgfSxcbiAgICAgICAgZXhwaXJlczogJzIwMjUtMTItMzEnLFxuICAgICAgfSxcbiAgICAgIHN0YXR1czogJ2F1dGhlbnRpY2F0ZWQnLFxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgfSlcblxuICAgIHJlbmRlcihcbiAgICAgIDxBdXRoV3JhcHBlciBmYWxsYmFjaz17PEZhbGxiYWNrQ29tcG9uZW50IC8+fT5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvQXV0aFdyYXBwZXI+XG4gICAgKVxuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1Byb3RlY3RlZCBDb250ZW50JykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdQbGVhc2Ugc2lnbiBpbicpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ0xvYWRpbmcuLi4nKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcblxuICBpdCgnc2hvd3MgZGVmYXVsdCBmYWxsYmFjayB3aGVuIG5vIGN1c3RvbSBmYWxsYmFjayBwcm92aWRlZCcsICgpID0+IHtcbiAgICBtb2NrVXNlU2Vzc2lvbi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIHN0YXR1czogJ3VuYXV0aGVudGljYXRlZCcsXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICB9KVxuXG4gICAgcmVuZGVyKFxuICAgICAgPEF1dGhXcmFwcGVyPlxuICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgPC9BdXRoV3JhcHBlcj5cbiAgICApXG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQWNjZXNzIGRlbmllZC4gUGxlYXNlIHNpZ24gaW4uJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdQcm90ZWN0ZWQgQ29udGVudCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIm1vY2tVc2VTZXNzaW9uIiwidXNlU2Vzc2lvbiIsImRlc2NyaWJlIiwiVGVzdENvbXBvbmVudCIsImRpdiIsIkZhbGxiYWNrQ29tcG9uZW50IiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIm1vY2tSZXR1cm5WYWx1ZSIsImRhdGEiLCJzdGF0dXMiLCJ1cGRhdGUiLCJmbiIsInJlbmRlciIsIkF1dGhXcmFwcGVyIiwiZmFsbGJhY2siLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInF1ZXJ5QnlUZXh0Iiwibm90IiwidXNlciIsImlkIiwibmFtZSIsImVtYWlsIiwiZXhwaXJlcyJdLCJtYXBwaW5ncyI6IjtBQU1BQSxLQUFLQyxJQUFJLENBQUM7Ozs7O3VCQU5hO3dCQUNJOzZCQUVDO0FBSTVCLE1BQU1DLGlCQUFpQkMsa0JBQVU7QUFFakNDLFNBQVMsZUFBZTtJQUN0QixNQUFNQyxnQkFBZ0Isa0JBQU0scUJBQUNDO3NCQUFJOztJQUNqQyxNQUFNQyxvQkFBb0Isa0JBQU0scUJBQUNEO3NCQUFJOztJQUVyQ0UsV0FBVztRQUNUUixLQUFLUyxhQUFhO0lBQ3BCO0lBRUFDLEdBQUcsK0NBQStDO1FBQ2hEUixlQUFlUyxlQUFlLENBQUM7WUFDN0JDLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxRQUFRZCxLQUFLZSxFQUFFO1FBQ2pCO1FBRUFDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLHdCQUFXO1lBQUNDLHdCQUFVLHFCQUFDWDtzQkFDdEIsY0FBQSxxQkFBQ0Y7O1FBSUxjLE9BQU9DLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLG1CQUFtQkMsaUJBQWlCO1FBQzVESCxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQywwQ0FBMENDLGlCQUFpQjtRQUNuRkgsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsc0JBQXNCQyxHQUFHLENBQUNGLGlCQUFpQjtRQUNyRUgsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsbUJBQW1CQyxHQUFHLENBQUNGLGlCQUFpQjtJQUNwRTtJQUVBWixHQUFHLGlEQUFpRDtRQUNsRFIsZUFBZVMsZUFBZSxDQUFDO1lBQzdCQyxNQUFNO1lBQ05DLFFBQVE7WUFDUkMsUUFBUWQsS0FBS2UsRUFBRTtRQUNqQjtRQUVBQyxJQUFBQSxhQUFNLGdCQUNKLHFCQUFDQyx3QkFBVztZQUFDQyx3QkFBVSxxQkFBQ1g7c0JBQ3RCLGNBQUEscUJBQUNGOztRQUlMYyxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxtQkFBbUJDLGlCQUFpQjtRQUM1REgsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsc0JBQXNCQyxHQUFHLENBQUNGLGlCQUFpQjtRQUNyRUgsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsZUFBZUMsR0FBRyxDQUFDRixpQkFBaUI7SUFDaEU7SUFFQVosR0FBRyw2Q0FBNkM7UUFDOUNSLGVBQWVTLGVBQWUsQ0FBQztZQUM3QkMsTUFBTTtnQkFDSmEsTUFBTTtvQkFBRUMsSUFBSTtvQkFBV0MsTUFBTTtvQkFBYUMsT0FBTztnQkFBbUI7Z0JBQ3BFQyxTQUFTO1lBQ1g7WUFDQWhCLFFBQVE7WUFDUkMsUUFBUWQsS0FBS2UsRUFBRTtRQUNqQjtRQUVBQyxJQUFBQSxhQUFNLGdCQUNKLHFCQUFDQyx3QkFBVztZQUFDQyx3QkFBVSxxQkFBQ1g7c0JBQ3RCLGNBQUEscUJBQUNGOztRQUlMYyxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxzQkFBc0JDLGlCQUFpQjtRQUMvREgsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsbUJBQW1CQyxHQUFHLENBQUNGLGlCQUFpQjtRQUNsRUgsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsZUFBZUMsR0FBRyxDQUFDRixpQkFBaUI7SUFDaEU7SUFFQVosR0FBRywyREFBMkQ7UUFDNURSLGVBQWVTLGVBQWUsQ0FBQztZQUM3QkMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLFFBQVFkLEtBQUtlLEVBQUU7UUFDakI7UUFFQUMsSUFBQUEsYUFBTSxnQkFDSixxQkFBQ0Msd0JBQVc7c0JBQ1YsY0FBQSxxQkFBQ1o7O1FBSUxjLE9BQU9DLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLG1DQUFtQ0MsaUJBQWlCO1FBQzVFSCxPQUFPQyxhQUFNLENBQUNHLFdBQVcsQ0FBQyxzQkFBc0JDLEdBQUcsQ0FBQ0YsaUJBQWlCO0lBQ3ZFO0FBQ0YifQ==