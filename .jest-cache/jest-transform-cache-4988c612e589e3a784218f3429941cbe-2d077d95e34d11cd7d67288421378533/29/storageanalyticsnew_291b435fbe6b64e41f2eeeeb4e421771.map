{"version":3,"names":["EnhancedStorageAnalytics","formatBytes","bytes","cov_1rsml8nd8d","f","s","b","k","sizes","i","Math","floor","log","round","pow","formatDuration","ms","toFixed","getFileTypeIcon","mimeType","_lucidereact","FileText","FileSpreadsheet","Presentation","startsWith","Image","Video","FileIcon","QuotaOverview","quota","_jsxruntime","jsxs","_card","Card","CardHeader","className","jsx","CardTitle","HardDrive","CardContent","hasUnlimitedStorage","used","limit","usagePercentage","_progress","Progress","value","_separator","Separator","usedInDrive","usedInDriveTrash","available","ProcessingStats","processing","meta","Gauge","accuracy","filesProcessed","toLocaleString","_badge","Badge","variant","strategy","performanceMs","apiCallsUsed","Date","timestamp","toLocaleTimeString","StorageByTypeChart","fileStats","sizeTypes","name","size","fileSizesByType","images","icon","color","videos","pdfs","other","totalSize","totalSizeBytes","BarChart3","map","type","percentage","Icon","LargestFilesList","largestFiles","TrendingUp","_scrollarea","ScrollArea","file","index","title","split","id","data","setData","_react","useState","setMeta","loading","setLoading","error","setError","setStrategy","fetchStorageData","selectedStrategy","response","fetch","result","json","success","err","message","useEffect","handleStrategyChange","newStrategy","RefreshCw","AlertTriangle","_button","Button","onClick","Zap","disabled","Clock","Database","_tabs","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","Object","entries","filesByType","count","systemCapabilities","maxUploadSize","user","displayName","emailAddress"],"sources":["/home/runner/workspace/src/app/(main)/dashboard/analytics/_components/storage-analytics-new.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Separator } from '@/components/ui/separator'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  AlertTriangle,\n  BarChart3,\n  Clock,\n  Database,\n  FileIcon,\n  FileSpreadsheet,\n  FileText,\n  Gauge,\n  HardDrive,\n  Image,\n  Presentation,\n  RefreshCw,\n  TrendingUp,\n  Video,\n  Zap,\n} from 'lucide-react'\n\ninterface StorageData {\n  quota: {\n    limit: number | null\n    used: number\n    usedInDrive: number\n    usedInDriveTrash: number\n    available: number | null\n    usagePercentage: number | null\n    hasUnlimitedStorage: boolean\n  }\n  fileStats: {\n    totalFiles: number\n    totalSizeBytes: number\n    filesByType: Record<string, number>\n    fileSizesByType: Record<string, number>\n    sharedFiles: number\n    starredFiles: number\n    trashedFiles: number\n  }\n  largestFiles: Array<{\n    name: string\n    size: number\n    mimeType: string\n    id: string\n    webViewLink?: string\n  }>\n  systemCapabilities: {\n    maxUploadSize: number | null\n    canCreateDrives: boolean\n    maxImportSizes: Record<string, number>\n    importFormats: Record<string, string[]>\n    exportFormats: Record<string, string[]>\n    folderColorPalette: string[]\n    driveThemes: any[]\n    appInstalled: boolean\n  }\n  user: {\n    displayName?: string\n    emailAddress?: string\n    photoLink?: string\n    permissionId?: string\n  }\n  processing: {\n    totalApiCalls: number\n    processingTimeMs: number\n    filesProcessed: number\n    estimatedAccuracy: number\n    totalProcessingTimeMs?: number\n  }\n}\n\ninterface AnalyticsMeta {\n  strategy: 'fast' | 'complete' | 'progressive'\n  performanceMs: number\n  accuracy: number\n  apiCallsUsed: number\n  timestamp: string\n}\n\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B'\n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return `${Math.round((bytes / Math.pow(k, i)) * 100) / 100} ${sizes[i]}`\n}\n\nfunction formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms}ms`\n  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`\n  return `${(ms / 60000).toFixed(1)}m`\n}\n\nfunction getFileTypeIcon(mimeType: string) {\n  if (mimeType === 'application/vnd.google-apps.document') return FileText\n  if (mimeType === 'application/vnd.google-apps.spreadsheet') return FileSpreadsheet\n  if (mimeType === 'application/vnd.google-apps.presentation') return Presentation\n  if (mimeType.startsWith('image/')) return Image\n  if (mimeType.startsWith('video/')) return Video\n  if (mimeType === 'application/pdf') return FileText\n  return FileIcon\n}\n\nfunction QuotaOverview({ quota }: { quota: StorageData['quota'] }) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Storage Quota</CardTitle>\n        <HardDrive className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {quota.hasUnlimitedStorage ? (\n            <div>\n              <div className=\"text-2xl font-bold\">Unlimited</div>\n              <p className=\"text-muted-foreground text-xs\">No storage limits</p>\n            </div>\n          ) : (\n            <div>\n              <div className=\"text-2xl font-bold\">{formatBytes(quota.used)}</div>\n              <p className=\"text-muted-foreground text-xs\">\n                of {quota.limit ? formatBytes(quota.limit) : 'Unknown'} used\n              </p>\n              {quota.usagePercentage && <Progress value={quota.usagePercentage} className=\"mt-2\" />}\n            </div>\n          )}\n\n          <Separator />\n\n          <div className=\"space-y-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Drive Storage:</span>\n              <span className=\"font-medium\">{formatBytes(quota.usedInDrive)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Trash:</span>\n              <span className=\"font-medium\">{formatBytes(quota.usedInDriveTrash)}</span>\n            </div>\n            {quota.available && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Available:</span>\n                <span className=\"font-medium text-green-600\">{formatBytes(quota.available)}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction ProcessingStats({\n  processing,\n  meta,\n}: {\n  processing: ComprehensiveStorageData['processing']\n  meta: AnalyticsMeta\n}) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Analysis Performance</CardTitle>\n        <Gauge className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <div className=\"text-lg font-bold\">{meta.accuracy}%</div>\n              <p className=\"text-muted-foreground text-xs\">Accuracy</p>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold\">{processing.filesProcessed.toLocaleString()}</div>\n              <p className=\"text-muted-foreground text-xs\">Files Analyzed</p>\n            </div>\n          </div>\n\n          <Separator />\n\n          <div className=\"space-y-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Strategy:</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {meta.strategy}\n              </Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Processing Time:</span>\n              <span className=\"font-medium\">{formatDuration(meta.performanceMs)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">API Calls:</span>\n              <span className=\"font-medium\">{meta.apiCallsUsed}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Updated:</span>\n              <span className=\"font-medium\">{new Date(meta.timestamp).toLocaleTimeString()}</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction StorageByTypeChart({ fileStats }: { fileStats: ComprehensiveStorageData['fileStats'] }) {\n  const sizeTypes = [\n    {\n      name: 'Images',\n      size: fileStats.fileSizesByType.images,\n      icon: Image,\n      color: 'text-purple-600',\n    },\n    { name: 'Videos', size: fileStats.fileSizesByType.videos, icon: Video, color: 'text-red-600' },\n    { name: 'PDFs', size: fileStats.fileSizesByType.pdfs, icon: FileText, color: 'text-gray-600' },\n    {\n      name: 'Other',\n      size: fileStats.fileSizesByType.other,\n      icon: FileIcon,\n      color: 'text-gray-500',\n    },\n  ]\n\n  const totalSize = fileStats.totalSizeBytes\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Storage by File Type</CardTitle>\n        <BarChart3 className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"text-2xl font-bold\">{formatBytes(totalSize)}</div>\n          <p className=\"text-muted-foreground text-xs\">Total Storage Used</p>\n\n          <Separator />\n\n          <div className=\"space-y-3\">\n            {sizeTypes.map(type => {\n              const percentage = totalSize > 0 ? Math.round((type.size / totalSize) * 100) : 0\n              const Icon = type.icon\n\n              if (type.size === 0) return null\n\n              return (\n                <div key={type.name} className=\"space-y-1\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className={`h-4 w-4 ${type.color}`} />\n                      <span className=\"font-medium\">{type.name}</span>\n                    </div>\n                    <span className=\"text-muted-foreground\">{percentage}%</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Progress value={percentage} className=\"mr-2 flex-1\" />\n                    <span className=\"min-w-[60px] text-right text-xs font-medium\">{formatBytes(type.size)}</span>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction LargestFilesList({ largestFiles }: { largestFiles: ComprehensiveStorageData['largestFiles'] }) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Largest Files</CardTitle>\n        <TrendingUp className=\"text-muted-foreground h-4 w-4\" />\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <ScrollArea className=\"h-[400px] px-6\">\n          <div className=\"space-y-2 py-4\">\n            {largestFiles.map((file, index) => {\n              const Icon = getFileTypeIcon(file.mimeType)\n\n              return (\n                <div key={file.id} className=\"flex items-center justify-between rounded-lg border p-3\">\n                  <div className=\"flex min-w-0 flex-1 items-center gap-3\">\n                    <Icon className=\"text-muted-foreground h-4 w-4 flex-shrink-0\" />\n                    <div className=\"min-w-0 flex-1\">\n                      <p className=\"truncate text-sm font-medium\" title={file.name}>\n                        {file.name}\n                      </p>\n                      <p className=\"text-muted-foreground text-xs\">{file.mimeType.split('/')[1]}</p>\n                    </div>\n                  </div>\n                  <div className=\"ml-2 flex-shrink-0 text-right\">\n                    <p className=\"text-sm font-medium\">{formatBytes(file.size)}</p>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      #{index + 1}\n                    </Badge>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function EnhancedStorageAnalytics() {\n  const [data, setData] = useState<ComprehensiveStorageData | null>(null)\n  const [meta, setMeta] = useState<AnalyticsMeta | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [strategy, setStrategy] = useState<'fast' | 'complete' | 'progressive'>('progressive')\n\n  const fetchStorageData = async (selectedStrategy: 'fast' | 'complete' | 'progressive' = strategy) => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await fetch(`/api/drive/storage/comprehensive?strategy=${selectedStrategy}`)\n      const result = await response.json()\n\n      if (result.success) {\n        setData(result.data)\n        setMeta(result.meta)\n      } else {\n        setError(result.error || 'Failed to fetch storage data')\n      }\n    } catch (err: any) {\n      setError(err.message || 'Network error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchStorageData()\n  }, [])\n\n  const handleStrategyChange = (newStrategy: 'fast' | 'complete' | 'progressive') => {\n    setStrategy(newStrategy)\n    fetchStorageData(newStrategy)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-[400px] items-center justify-center\">\n        <div className=\"space-y-4 text-center\">\n          <RefreshCw className=\"text-muted-foreground mx-auto h-8 w-8 animate-spin\" />\n          <div>\n            <p className=\"font-medium\">Analyzing your Drive storage...</p>\n            <p className=\"text-muted-foreground text-sm\">\n              {strategy === 'complete' ? 'This may take a while for large drives' : 'Processing files...'}\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"flex min-h-[400px] items-center justify-center\">\n          <div className=\"space-y-4 text-center\">\n            <AlertTriangle className=\"text-destructive mx-auto h-12 w-12\" />\n            <div>\n              <h3 className=\"mb-2 text-lg font-semibold\">Analysis Failed</h3>\n              <p className=\"text-muted-foreground mb-4\">{error}</p>\n              <Button onClick={() => fetchStorageData()}>\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Try Again\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!data || !meta) {\n    return (\n      <Card>\n        <CardContent className=\"flex min-h-[400px] items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground\">No storage data available</p>\n            <Button onClick={() => fetchStorageData()} className=\"mt-4\">\n              Analyze Storage\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Strategy Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Zap className=\"h-5 w-5\" />\n            Analysis Strategy\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <Button\n              variant={strategy === 'fast' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleStrategyChange('fast')}\n              disabled={loading}\n            >\n              <Clock className=\"mr-2 h-4 w-4\" />\n              Fast (~2k files)\n            </Button>\n            <Button\n              variant={strategy === 'progressive' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleStrategyChange('progressive')}\n              disabled={loading}\n            >\n              <Gauge className=\"mr-2 h-4 w-4\" />\n              Progressive (Smart)\n            </Button>\n            <Button\n              variant={strategy === 'complete' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleStrategyChange('complete')}\n              disabled={loading}\n            >\n              <Database className=\"mr-2 h-4 w-4\" />\n              Complete (All files)\n            </Button>\n          </div>\n          <p className=\"text-muted-foreground mt-2 text-xs\">\n            Current: {meta.accuracy}% accuracy • {data.processing.filesProcessed.toLocaleString()} files analyzed •{' '}\n            {formatDuration(meta.performanceMs)}\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Overview Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <QuotaOverview quota={data.quota} />\n        <ProcessingStats processing={data.processing} meta={meta} />\n        <StorageByTypeChart fileStats={data.fileStats} />\n      </div>\n\n      {/* Detailed Analysis */}\n      <Tabs defaultValue=\"largest-files\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"largest-files\">Largest Files</TabsTrigger>\n          <TabsTrigger value=\"file-types\">File Types</TabsTrigger>\n          <TabsTrigger value=\"system-info\">System Info</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"largest-files\">\n          <LargestFilesList largestFiles={data.largestFiles} />\n        </TabsContent>\n\n        <TabsContent value=\"file-types\">\n          <Card>\n            <CardHeader>\n              <CardTitle>File Type Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 md:grid-cols-4\">\n                {Object.entries(data.fileStats.filesByType).map(([type, count]) => (\n                  <div key={type} className=\"rounded-lg border p-4 text-center\">\n                    <div className=\"text-2xl font-bold\">{count.toLocaleString()}</div>\n                    <div className=\"text-muted-foreground text-sm capitalize\">{type}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"system-info\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Capabilities</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                  <div>\n                    <h4 className=\"mb-2 font-medium\">Upload Limits</h4>\n                    <p className=\"text-sm\">\n                      Max Upload:{' '}\n                      {data.systemCapabilities.maxUploadSize\n                        ? formatBytes(data.systemCapabilities.maxUploadSize)\n                        : 'No limit'}\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"mb-2 font-medium\">Account Info</h4>\n                    <p className=\"text-sm\">\n                      {data.user.displayName} ({data.user.emailAddress})\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n"],"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","ignoreList":[]}