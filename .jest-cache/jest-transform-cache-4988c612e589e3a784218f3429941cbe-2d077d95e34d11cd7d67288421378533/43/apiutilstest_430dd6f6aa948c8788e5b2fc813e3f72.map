{"version":3,"sources":["/home/runner/workspace/src/lib/__tests__/api-utils.test.ts"],"sourcesContent":["\nimport { \n  createApiResponse, \n  handleApiError, \n  validateRequest \n} from '../api-utils'\n\ndescribe('API Utils', () => {\n  describe('createApiResponse', () => {\n    it('should create success response', () => {\n      const data = { message: 'success' }\n      const response = createApiResponse(data)\n      \n      expect(response).toEqual({\n        success: true,\n        data,\n        error: null\n      })\n    })\n\n    it('should create error response', () => {\n      const error = 'Something went wrong'\n      const response = createApiResponse(null, error)\n      \n      expect(response).toEqual({\n        success: false,\n        data: null,\n        error\n      })\n    })\n  })\n\n  describe('handleApiError', () => {\n    it('should handle standard Error objects', () => {\n      const error = new Error('Test error')\n      const result = handleApiError(error)\n      \n      expect(result).toEqual({\n        success: false,\n        data: null,\n        error: 'Test error'\n      })\n    })\n\n    it('should handle string errors', () => {\n      const error = 'String error'\n      const result = handleApiError(error)\n      \n      expect(result).toEqual({\n        success: false,\n        data: null,\n        error: 'String error'\n      })\n    })\n\n    it('should handle unknown errors', () => {\n      const error = { unknown: 'object' }\n      const result = handleApiError(error)\n      \n      expect(result).toEqual({\n        success: false,\n        data: null,\n        error: 'An unknown error occurred'\n      })\n    })\n  })\n\n  describe('validateRequest', () => {\n    it('should validate POST requests', () => {\n      const mockRequest = {\n        method: 'POST',\n        headers: {\n          get: jest.fn().mockReturnValue('application/json')\n        }\n      } as any\n\n      const result = validateRequest(mockRequest, ['POST'])\n      expect(result.isValid).toBe(true)\n    })\n\n    it('should reject invalid methods', () => {\n      const mockRequest = {\n        method: 'DELETE',\n        headers: {\n          get: jest.fn().mockReturnValue('application/json')\n        }\n      } as any\n\n      const result = validateRequest(mockRequest, ['POST', 'GET'])\n      expect(result.isValid).toBe(false)\n      expect(result.error).toContain('Method not allowed')\n    })\n  })\n})\n"],"names":["describe","it","data","message","response","createApiResponse","expect","toEqual","success","error","Error","result","handleApiError","unknown","mockRequest","method","headers","get","jest","fn","mockReturnValue","validateRequest","isValid","toBe","toContain"],"mappings":";;;;0BAKO;AAEPA,SAAS,aAAa;IACpBA,SAAS,qBAAqB;QAC5BC,GAAG,kCAAkC;YACnC,MAAMC,OAAO;gBAAEC,SAAS;YAAU;YAClC,MAAMC,WAAWC,IAAAA,2BAAiB,EAACH;YAEnCI,OAAOF,UAAUG,OAAO,CAAC;gBACvBC,SAAS;gBACTN;gBACAO,OAAO;YACT;QACF;QAEAR,GAAG,gCAAgC;YACjC,MAAMQ,QAAQ;YACd,MAAML,WAAWC,IAAAA,2BAAiB,EAAC,MAAMI;YAEzCH,OAAOF,UAAUG,OAAO,CAAC;gBACvBC,SAAS;gBACTN,MAAM;gBACNO;YACF;QACF;IACF;IAEAT,SAAS,kBAAkB;QACzBC,GAAG,wCAAwC;YACzC,MAAMQ,QAAQ,IAAIC,MAAM;YACxB,MAAMC,SAASC,IAAAA,wBAAc,EAACH;YAE9BH,OAAOK,QAAQJ,OAAO,CAAC;gBACrBC,SAAS;gBACTN,MAAM;gBACNO,OAAO;YACT;QACF;QAEAR,GAAG,+BAA+B;YAChC,MAAMQ,QAAQ;YACd,MAAME,SAASC,IAAAA,wBAAc,EAACH;YAE9BH,OAAOK,QAAQJ,OAAO,CAAC;gBACrBC,SAAS;gBACTN,MAAM;gBACNO,OAAO;YACT;QACF;QAEAR,GAAG,gCAAgC;YACjC,MAAMQ,QAAQ;gBAAEI,SAAS;YAAS;YAClC,MAAMF,SAASC,IAAAA,wBAAc,EAACH;YAE9BH,OAAOK,QAAQJ,OAAO,CAAC;gBACrBC,SAAS;gBACTN,MAAM;gBACNO,OAAO;YACT;QACF;IACF;IAEAT,SAAS,mBAAmB;QAC1BC,GAAG,iCAAiC;YAClC,MAAMa,cAAc;gBAClBC,QAAQ;gBACRC,SAAS;oBACPC,KAAKC,KAAKC,EAAE,GAAGC,eAAe,CAAC;gBACjC;YACF;YAEA,MAAMT,SAASU,IAAAA,yBAAe,EAACP,aAAa;gBAAC;aAAO;YACpDR,OAAOK,OAAOW,OAAO,EAAEC,IAAI,CAAC;QAC9B;QAEAtB,GAAG,iCAAiC;YAClC,MAAMa,cAAc;gBAClBC,QAAQ;gBACRC,SAAS;oBACPC,KAAKC,KAAKC,EAAE,GAAGC,eAAe,CAAC;gBACjC;YACF;YAEA,MAAMT,SAASU,IAAAA,yBAAe,EAACP,aAAa;gBAAC;gBAAQ;aAAM;YAC3DR,OAAOK,OAAOW,OAAO,EAAEC,IAAI,CAAC;YAC5BjB,OAAOK,OAAOF,KAAK,EAAEe,SAAS,CAAC;QACjC;IACF;AACF"}