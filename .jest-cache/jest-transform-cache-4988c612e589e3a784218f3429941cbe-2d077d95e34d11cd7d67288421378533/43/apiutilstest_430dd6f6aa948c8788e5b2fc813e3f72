feef0e84acaf4a5a50b2e6d19a4489d3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _apiutils = require("../api-utils");
describe('API Utils', ()=>{
    describe('createApiResponse', ()=>{
        it('should create success response', ()=>{
            const data = {
                message: 'success'
            };
            const response = (0, _apiutils.createApiResponse)(data);
            expect(response).toEqual({
                success: true,
                data,
                error: null
            });
        });
        it('should create error response', ()=>{
            const error = 'Something went wrong';
            const response = (0, _apiutils.createApiResponse)(null, error);
            expect(response).toEqual({
                success: false,
                data: null,
                error
            });
        });
    });
    describe('handleApiError', ()=>{
        it('should handle standard Error objects', ()=>{
            const error = new Error('Test error');
            const result = (0, _apiutils.handleApiError)(error);
            expect(result).toEqual({
                success: false,
                data: null,
                error: 'Test error'
            });
        });
        it('should handle string errors', ()=>{
            const error = 'String error';
            const result = (0, _apiutils.handleApiError)(error);
            expect(result).toEqual({
                success: false,
                data: null,
                error: 'String error'
            });
        });
        it('should handle unknown errors', ()=>{
            const error = {
                unknown: 'object'
            };
            const result = (0, _apiutils.handleApiError)(error);
            expect(result).toEqual({
                success: false,
                data: null,
                error: 'An unknown error occurred'
            });
        });
    });
    describe('validateRequest', ()=>{
        it('should validate POST requests', ()=>{
            const mockRequest = {
                method: 'POST',
                headers: {
                    get: jest.fn().mockReturnValue('application/json')
                }
            };
            const result = (0, _apiutils.validateRequest)(mockRequest, [
                'POST'
            ]);
            expect(result.isValid).toBe(true);
        });
        it('should reject invalid methods', ()=>{
            const mockRequest = {
                method: 'DELETE',
                headers: {
                    get: jest.fn().mockReturnValue('application/json')
                }
            };
            const result = (0, _apiutils.validateRequest)(mockRequest, [
                'POST',
                'GET'
            ]);
            expect(result.isValid).toBe(false);
            expect(result.error).toContain('Method not allowed');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2xpYi9fX3Rlc3RzX18vYXBpLXV0aWxzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBcbiAgY3JlYXRlQXBpUmVzcG9uc2UsIFxuICBoYW5kbGVBcGlFcnJvciwgXG4gIHZhbGlkYXRlUmVxdWVzdCBcbn0gZnJvbSAnLi4vYXBpLXV0aWxzJ1xuXG5kZXNjcmliZSgnQVBJIFV0aWxzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnY3JlYXRlQXBpUmVzcG9uc2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgc3VjY2VzcyByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IG1lc3NhZ2U6ICdzdWNjZXNzJyB9XG4gICAgICBjb25zdCByZXNwb25zZSA9IGNyZWF0ZUFwaVJlc3BvbnNlKGRhdGEpXG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGVycm9yOiBudWxsXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBlcnJvciByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gJ1NvbWV0aGluZyB3ZW50IHdyb25nJ1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBjcmVhdGVBcGlSZXNwb25zZShudWxsLCBlcnJvcilcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2hhbmRsZUFwaUVycm9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0YW5kYXJkIEVycm9yIG9iamVjdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignVGVzdCBlcnJvcicpXG4gICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVBcGlFcnJvcihlcnJvcilcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBlcnJvcjogJ1Rlc3QgZXJyb3InXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzdHJpbmcgZXJyb3JzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSAnU3RyaW5nIGVycm9yJ1xuICAgICAgY29uc3QgcmVzdWx0ID0gaGFuZGxlQXBpRXJyb3IoZXJyb3IpXG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6ICdTdHJpbmcgZXJyb3InXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB1bmtub3duIGVycm9ycycsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0geyB1bmtub3duOiAnb2JqZWN0JyB9XG4gICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVBcGlFcnJvcihlcnJvcilcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBlcnJvcjogJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQnXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlUmVxdWVzdCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIFBPU1QgcmVxdWVzdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBnZXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICB9XG4gICAgICB9IGFzIGFueVxuXG4gICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZVJlcXVlc3QobW9ja1JlcXVlc3QsIFsnUE9TVCddKVxuICAgICAgZXhwZWN0KHJlc3VsdC5pc1ZhbGlkKS50b0JlKHRydWUpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgbWV0aG9kcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0ge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgZ2V0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgfVxuICAgICAgfSBhcyBhbnlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVSZXF1ZXN0KG1vY2tSZXF1ZXN0LCBbJ1BPU1QnLCAnR0VUJ10pXG4gICAgICBleHBlY3QocmVzdWx0LmlzVmFsaWQpLnRvQmUoZmFsc2UpXG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ01ldGhvZCBub3QgYWxsb3dlZCcpXG4gICAgfSlcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImRhdGEiLCJtZXNzYWdlIiwicmVzcG9uc2UiLCJjcmVhdGVBcGlSZXNwb25zZSIsImV4cGVjdCIsInRvRXF1YWwiLCJzdWNjZXNzIiwiZXJyb3IiLCJFcnJvciIsInJlc3VsdCIsImhhbmRsZUFwaUVycm9yIiwidW5rbm93biIsIm1vY2tSZXF1ZXN0IiwibWV0aG9kIiwiaGVhZGVycyIsImdldCIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsInZhbGlkYXRlUmVxdWVzdCIsImlzVmFsaWQiLCJ0b0JlIiwidG9Db250YWluIl0sIm1hcHBpbmdzIjoiOzs7OzBCQUtPO0FBRVBBLFNBQVMsYUFBYTtJQUNwQkEsU0FBUyxxQkFBcUI7UUFDNUJDLEdBQUcsa0NBQWtDO1lBQ25DLE1BQU1DLE9BQU87Z0JBQUVDLFNBQVM7WUFBVTtZQUNsQyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBaUIsRUFBQ0g7WUFFbkNJLE9BQU9GLFVBQVVHLE9BQU8sQ0FBQztnQkFDdkJDLFNBQVM7Z0JBQ1ROO2dCQUNBTyxPQUFPO1lBQ1Q7UUFDRjtRQUVBUixHQUFHLGdDQUFnQztZQUNqQyxNQUFNUSxRQUFRO1lBQ2QsTUFBTUwsV0FBV0MsSUFBQUEsMkJBQWlCLEVBQUMsTUFBTUk7WUFFekNILE9BQU9GLFVBQVVHLE9BQU8sQ0FBQztnQkFDdkJDLFNBQVM7Z0JBQ1ROLE1BQU07Z0JBQ05PO1lBQ0Y7UUFDRjtJQUNGO0lBRUFULFNBQVMsa0JBQWtCO1FBQ3pCQyxHQUFHLHdDQUF3QztZQUN6QyxNQUFNUSxRQUFRLElBQUlDLE1BQU07WUFDeEIsTUFBTUMsU0FBU0MsSUFBQUEsd0JBQWMsRUFBQ0g7WUFFOUJILE9BQU9LLFFBQVFKLE9BQU8sQ0FBQztnQkFDckJDLFNBQVM7Z0JBQ1ROLE1BQU07Z0JBQ05PLE9BQU87WUFDVDtRQUNGO1FBRUFSLEdBQUcsK0JBQStCO1lBQ2hDLE1BQU1RLFFBQVE7WUFDZCxNQUFNRSxTQUFTQyxJQUFBQSx3QkFBYyxFQUFDSDtZQUU5QkgsT0FBT0ssUUFBUUosT0FBTyxDQUFDO2dCQUNyQkMsU0FBUztnQkFDVE4sTUFBTTtnQkFDTk8sT0FBTztZQUNUO1FBQ0Y7UUFFQVIsR0FBRyxnQ0FBZ0M7WUFDakMsTUFBTVEsUUFBUTtnQkFBRUksU0FBUztZQUFTO1lBQ2xDLE1BQU1GLFNBQVNDLElBQUFBLHdCQUFjLEVBQUNIO1lBRTlCSCxPQUFPSyxRQUFRSixPQUFPLENBQUM7Z0JBQ3JCQyxTQUFTO2dCQUNUTixNQUFNO2dCQUNOTyxPQUFPO1lBQ1Q7UUFDRjtJQUNGO0lBRUFULFNBQVMsbUJBQW1CO1FBQzFCQyxHQUFHLGlDQUFpQztZQUNsQyxNQUFNYSxjQUFjO2dCQUNsQkMsUUFBUTtnQkFDUkMsU0FBUztvQkFDUEMsS0FBS0MsS0FBS0MsRUFBRSxHQUFHQyxlQUFlLENBQUM7Z0JBQ2pDO1lBQ0Y7WUFFQSxNQUFNVCxTQUFTVSxJQUFBQSx5QkFBZSxFQUFDUCxhQUFhO2dCQUFDO2FBQU87WUFDcERSLE9BQU9LLE9BQU9XLE9BQU8sRUFBRUMsSUFBSSxDQUFDO1FBQzlCO1FBRUF0QixHQUFHLGlDQUFpQztZQUNsQyxNQUFNYSxjQUFjO2dCQUNsQkMsUUFBUTtnQkFDUkMsU0FBUztvQkFDUEMsS0FBS0MsS0FBS0MsRUFBRSxHQUFHQyxlQUFlLENBQUM7Z0JBQ2pDO1lBQ0Y7WUFFQSxNQUFNVCxTQUFTVSxJQUFBQSx5QkFBZSxFQUFDUCxhQUFhO2dCQUFDO2dCQUFRO2FBQU07WUFDM0RSLE9BQU9LLE9BQU9XLE9BQU8sRUFBRUMsSUFBSSxDQUFDO1lBQzVCakIsT0FBT0ssT0FBT0YsS0FBSyxFQUFFZSxTQUFTLENBQUM7UUFDakM7SUFDRjtBQUNGIn0=