e0abed882494e0d046f12bc5c0dfc566
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _utils = require("../utils");
describe('Utils', ()=>{
    describe('cn (className utility)', ()=>{
        it('should merge class names correctly', ()=>{
            const result = (0, _utils.cn)('base-class', 'additional-class');
            expect(result).toContain('base-class');
            expect(result).toContain('additional-class');
        });
        it('should handle conditional classes', ()=>{
            const result = (0, _utils.cn)('base-class', false && 'hidden-class', 'visible-class');
            expect(result).toContain('base-class');
            expect(result).toContain('visible-class');
            expect(result).not.toContain('hidden-class');
        });
        it('should handle undefined and null values', ()=>{
            const result = (0, _utils.cn)('base-class', undefined, null, 'final-class');
            expect(result).toContain('base-class');
            expect(result).toContain('final-class');
        });
        it('should handle empty strings', ()=>{
            const result = (0, _utils.cn)('base-class', '', 'final-class');
            expect(result).toContain('base-class');
            expect(result).toContain('final-class');
        });
        it('should handle arrays of classes', ()=>{
            const result = (0, _utils.cn)([
                'class1',
                'class2'
            ], 'class3');
            expect(result).toContain('class1');
            expect(result).toContain('class2');
            expect(result).toContain('class3');
        });
        it('should handle objects with conditional classes', ()=>{
            const result = (0, _utils.cn)({
                'active': true,
                'disabled': false,
                'visible': true
            });
            expect(result).toContain('active');
            expect(result).toContain('visible');
            expect(result).not.toContain('disabled');
        });
        it('should merge Tailwind classes correctly', ()=>{
            const result = (0, _utils.cn)('p-4 text-red-500', 'p-2 text-blue-500');
            // Should prioritize the last class when conflicts occur
            expect(result).toContain('p-2');
            expect(result).toContain('text-blue-500');
        });
        it('should handle complex mixed inputs', ()=>{
            const result = (0, _utils.cn)('base', [
                'array1',
                'array2'
            ], {
                'conditional': true,
                'false-conditional': false
            }, undefined, null, 'final');
            expect(result).toContain('base');
            expect(result).toContain('array1');
            expect(result).toContain('array2');
            expect(result).toContain('conditional');
            expect(result).toContain('final');
            expect(result).not.toContain('false-conditional');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2xpYi9fX3Rlc3RzX18vdXRpbHMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IGNuIH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgeyB0eXBlIENsYXNzVmFsdWUgfSBmcm9tICdjbHN4J1xuXG5kZXNjcmliZSgnVXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjbiAoY2xhc3NOYW1lIHV0aWxpdHkpJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbWVyZ2UgY2xhc3MgbmFtZXMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY24oJ2Jhc2UtY2xhc3MnLCAnYWRkaXRpb25hbC1jbGFzcycpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2Jhc2UtY2xhc3MnKVxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdhZGRpdGlvbmFsLWNsYXNzJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29uZGl0aW9uYWwgY2xhc3NlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNuKCdiYXNlLWNsYXNzJywgZmFsc2UgJiYgJ2hpZGRlbi1jbGFzcycsICd2aXNpYmxlLWNsYXNzJylcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignYmFzZS1jbGFzcycpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3Zpc2libGUtY2xhc3MnKVxuICAgICAgZXhwZWN0KHJlc3VsdCkubm90LnRvQ29udGFpbignaGlkZGVuLWNsYXNzJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdW5kZWZpbmVkIGFuZCBudWxsIHZhbHVlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNuKCdiYXNlLWNsYXNzJywgdW5kZWZpbmVkLCBudWxsLCAnZmluYWwtY2xhc3MnKVxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdiYXNlLWNsYXNzJylcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignZmluYWwtY2xhc3MnKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY24oJ2Jhc2UtY2xhc3MnLCAnJywgJ2ZpbmFsLWNsYXNzJylcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignYmFzZS1jbGFzcycpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2ZpbmFsLWNsYXNzJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXJyYXlzIG9mIGNsYXNzZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjbihbJ2NsYXNzMScsICdjbGFzczInXSwgJ2NsYXNzMycpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2NsYXNzMScpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2NsYXNzMicpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2NsYXNzMycpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG9iamVjdHMgd2l0aCBjb25kaXRpb25hbCBjbGFzc2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY24oe1xuICAgICAgICAnYWN0aXZlJzogdHJ1ZSxcbiAgICAgICAgJ2Rpc2FibGVkJzogZmFsc2UsXG4gICAgICAgICd2aXNpYmxlJzogdHJ1ZVxuICAgICAgfSlcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignYWN0aXZlJylcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigndmlzaWJsZScpXG4gICAgICBleHBlY3QocmVzdWx0KS5ub3QudG9Db250YWluKCdkaXNhYmxlZCcpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgbWVyZ2UgVGFpbHdpbmQgY2xhc3NlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjbigncC00IHRleHQtcmVkLTUwMCcsICdwLTIgdGV4dC1ibHVlLTUwMCcpXG4gICAgICAvLyBTaG91bGQgcHJpb3JpdGl6ZSB0aGUgbGFzdCBjbGFzcyB3aGVuIGNvbmZsaWN0cyBvY2N1clxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdwLTInKVxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCd0ZXh0LWJsdWUtNTAwJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29tcGxleCBtaXhlZCBpbnB1dHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjbihcbiAgICAgICAgJ2Jhc2UnLFxuICAgICAgICBbJ2FycmF5MScsICdhcnJheTInXSxcbiAgICAgICAgeyAnY29uZGl0aW9uYWwnOiB0cnVlLCAnZmFsc2UtY29uZGl0aW9uYWwnOiBmYWxzZSB9LFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIG51bGwsXG4gICAgICAgICdmaW5hbCdcbiAgICAgIClcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignYmFzZScpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2FycmF5MScpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2FycmF5MicpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2NvbmRpdGlvbmFsJylcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignZmluYWwnKVxuICAgICAgZXhwZWN0KHJlc3VsdCkubm90LnRvQ29udGFpbignZmFsc2UtY29uZGl0aW9uYWwnKVxuICAgIH0pXG4gIH0pXG59KVxuIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJyZXN1bHQiLCJjbiIsImV4cGVjdCIsInRvQ29udGFpbiIsIm5vdCIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozt1QkFDbUI7QUFHbkJBLFNBQVMsU0FBUztJQUNoQkEsU0FBUywwQkFBMEI7UUFDakNDLEdBQUcsc0NBQXNDO1lBQ3ZDLE1BQU1DLFNBQVNDLElBQUFBLFNBQUUsRUFBQyxjQUFjO1lBQ2hDQyxPQUFPRixRQUFRRyxTQUFTLENBQUM7WUFDekJELE9BQU9GLFFBQVFHLFNBQVMsQ0FBQztRQUMzQjtRQUVBSixHQUFHLHFDQUFxQztZQUN0QyxNQUFNQyxTQUFTQyxJQUFBQSxTQUFFLEVBQUMsY0FBYyxTQUFTLGdCQUFnQjtZQUN6REMsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1lBQ3pCRCxPQUFPRixRQUFRRyxTQUFTLENBQUM7WUFDekJELE9BQU9GLFFBQVFJLEdBQUcsQ0FBQ0QsU0FBUyxDQUFDO1FBQy9CO1FBRUFKLEdBQUcsMkNBQTJDO1lBQzVDLE1BQU1DLFNBQVNDLElBQUFBLFNBQUUsRUFBQyxjQUFjSSxXQUFXLE1BQU07WUFDakRILE9BQU9GLFFBQVFHLFNBQVMsQ0FBQztZQUN6QkQsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1FBQzNCO1FBRUFKLEdBQUcsK0JBQStCO1lBQ2hDLE1BQU1DLFNBQVNDLElBQUFBLFNBQUUsRUFBQyxjQUFjLElBQUk7WUFDcENDLE9BQU9GLFFBQVFHLFNBQVMsQ0FBQztZQUN6QkQsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1FBQzNCO1FBRUFKLEdBQUcsbUNBQW1DO1lBQ3BDLE1BQU1DLFNBQVNDLElBQUFBLFNBQUUsRUFBQztnQkFBQztnQkFBVTthQUFTLEVBQUU7WUFDeENDLE9BQU9GLFFBQVFHLFNBQVMsQ0FBQztZQUN6QkQsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1lBQ3pCRCxPQUFPRixRQUFRRyxTQUFTLENBQUM7UUFDM0I7UUFFQUosR0FBRyxrREFBa0Q7WUFDbkQsTUFBTUMsU0FBU0MsSUFBQUEsU0FBRSxFQUFDO2dCQUNoQixVQUFVO2dCQUNWLFlBQVk7Z0JBQ1osV0FBVztZQUNiO1lBQ0FDLE9BQU9GLFFBQVFHLFNBQVMsQ0FBQztZQUN6QkQsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1lBQ3pCRCxPQUFPRixRQUFRSSxHQUFHLENBQUNELFNBQVMsQ0FBQztRQUMvQjtRQUVBSixHQUFHLDJDQUEyQztZQUM1QyxNQUFNQyxTQUFTQyxJQUFBQSxTQUFFLEVBQUMsb0JBQW9CO1lBQ3RDLHdEQUF3RDtZQUN4REMsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1lBQ3pCRCxPQUFPRixRQUFRRyxTQUFTLENBQUM7UUFDM0I7UUFFQUosR0FBRyxzQ0FBc0M7WUFDdkMsTUFBTUMsU0FBU0MsSUFBQUEsU0FBRSxFQUNmLFFBQ0E7Z0JBQUM7Z0JBQVU7YUFBUyxFQUNwQjtnQkFBRSxlQUFlO2dCQUFNLHFCQUFxQjtZQUFNLEdBQ2xESSxXQUNBLE1BQ0E7WUFFRkgsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1lBQ3pCRCxPQUFPRixRQUFRRyxTQUFTLENBQUM7WUFDekJELE9BQU9GLFFBQVFHLFNBQVMsQ0FBQztZQUN6QkQsT0FBT0YsUUFBUUcsU0FBUyxDQUFDO1lBQ3pCRCxPQUFPRixRQUFRRyxTQUFTLENBQUM7WUFDekJELE9BQU9GLFFBQVFJLEdBQUcsQ0FBQ0QsU0FBUyxDQUFDO1FBQy9CO0lBQ0Y7QUFDRiJ9