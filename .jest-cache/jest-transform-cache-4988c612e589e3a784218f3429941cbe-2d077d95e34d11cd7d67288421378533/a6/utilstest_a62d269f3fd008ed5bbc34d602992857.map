{"version":3,"sources":["/home/runner/workspace/src/lib/__tests__/utils.test.ts"],"sourcesContent":["\nimport { cn } from '../utils'\nimport { type ClassValue } from 'clsx'\n\ndescribe('Utils', () => {\n  describe('cn (className utility)', () => {\n    it('should merge class names correctly', () => {\n      const result = cn('base-class', 'additional-class')\n      expect(result).toContain('base-class')\n      expect(result).toContain('additional-class')\n    })\n\n    it('should handle conditional classes', () => {\n      const result = cn('base-class', false && 'hidden-class', 'visible-class')\n      expect(result).toContain('base-class')\n      expect(result).toContain('visible-class')\n      expect(result).not.toContain('hidden-class')\n    })\n\n    it('should handle undefined and null values', () => {\n      const result = cn('base-class', undefined, null, 'final-class')\n      expect(result).toContain('base-class')\n      expect(result).toContain('final-class')\n    })\n\n    it('should handle empty strings', () => {\n      const result = cn('base-class', '', 'final-class')\n      expect(result).toContain('base-class')\n      expect(result).toContain('final-class')\n    })\n\n    it('should handle arrays of classes', () => {\n      const result = cn(['class1', 'class2'], 'class3')\n      expect(result).toContain('class1')\n      expect(result).toContain('class2')\n      expect(result).toContain('class3')\n    })\n\n    it('should handle objects with conditional classes', () => {\n      const result = cn({\n        'active': true,\n        'disabled': false,\n        'visible': true\n      })\n      expect(result).toContain('active')\n      expect(result).toContain('visible')\n      expect(result).not.toContain('disabled')\n    })\n\n    it('should merge Tailwind classes correctly', () => {\n      const result = cn('p-4 text-red-500', 'p-2 text-blue-500')\n      // Should prioritize the last class when conflicts occur\n      expect(result).toContain('p-2')\n      expect(result).toContain('text-blue-500')\n    })\n\n    it('should handle complex mixed inputs', () => {\n      const result = cn(\n        'base',\n        ['array1', 'array2'],\n        { 'conditional': true, 'false-conditional': false },\n        undefined,\n        null,\n        'final'\n      )\n      expect(result).toContain('base')\n      expect(result).toContain('array1')\n      expect(result).toContain('array2')\n      expect(result).toContain('conditional')\n      expect(result).toContain('final')\n      expect(result).not.toContain('false-conditional')\n    })\n  })\n})\n"],"names":["describe","it","result","cn","expect","toContain","not","undefined"],"mappings":";;;;uBACmB;AAGnBA,SAAS,SAAS;IAChBA,SAAS,0BAA0B;QACjCC,GAAG,sCAAsC;YACvC,MAAMC,SAASC,IAAAA,SAAE,EAAC,cAAc;YAChCC,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,GAAG,qCAAqC;YACtC,MAAMC,SAASC,IAAAA,SAAE,EAAC,cAAc,SAAS,gBAAgB;YACzDC,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQI,GAAG,CAACD,SAAS,CAAC;QAC/B;QAEAJ,GAAG,2CAA2C;YAC5C,MAAMC,SAASC,IAAAA,SAAE,EAAC,cAAcI,WAAW,MAAM;YACjDH,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,GAAG,+BAA+B;YAChC,MAAMC,SAASC,IAAAA,SAAE,EAAC,cAAc,IAAI;YACpCC,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,GAAG,mCAAmC;YACpC,MAAMC,SAASC,IAAAA,SAAE,EAAC;gBAAC;gBAAU;aAAS,EAAE;YACxCC,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,GAAG,kDAAkD;YACnD,MAAMC,SAASC,IAAAA,SAAE,EAAC;gBAChB,UAAU;gBACV,YAAY;gBACZ,WAAW;YACb;YACAC,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQI,GAAG,CAACD,SAAS,CAAC;QAC/B;QAEAJ,GAAG,2CAA2C;YAC5C,MAAMC,SAASC,IAAAA,SAAE,EAAC,oBAAoB;YACtC,wDAAwD;YACxDC,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,GAAG,sCAAsC;YACvC,MAAMC,SAASC,IAAAA,SAAE,EACf,QACA;gBAAC;gBAAU;aAAS,EACpB;gBAAE,eAAe;gBAAM,qBAAqB;YAAM,GAClDI,WACA,MACA;YAEFH,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQI,GAAG,CAACD,SAAS,CAAC;QAC/B;IACF;AACF"}