07c8ed564308d471d6c29e91ae01071b
"use strict";

/* istanbul ignore next */
function cov_1zhre0yzpm() {
  var path = "/home/runner/workspace/src/app/api/drive/files/share/route.ts";
  var hash = "b95d1e4ff0ecf0f70ba85ab06ee857be826bdbad";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/files/share/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 66
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "9": {
        start: {
          line: 19,
          column: 33
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "10": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "11": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "12": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "13": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 106
        }
      },
      "14": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "15": {
        start: {
          line: 32,
          column: 70
        },
        end: {
          line: 32,
          column: 77
        }
      },
      "16": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 57
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "18": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "19": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "20": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "21": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "22": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "23": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "24": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 60,
          column: 26
        }
      },
      "25": {
        start: {
          line: 61,
          column: 23
        },
        end: {
          line: 61,
          column: 25
        }
      },
      "26": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "27": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "28": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "29": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 72,
          column: 23
        }
      },
      "30": {
        start: {
          line: 75,
          column: 36
        },
        end: {
          line: 78,
          column: 18
        }
      },
      "31": {
        start: {
          line: 79,
          column: 34
        },
        end: {
          line: 79,
          column: 111
        }
      },
      "32": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 86,
          column: 19
        }
      },
      "33": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "34": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "35": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "36": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 32,
            column: 62
          },
          end: {
            line: 32,
            column: 63
          }
        },
        loc: {
          start: {
            line: 32,
            column: 70
          },
          end: {
            line: 32,
            column: 77
          }
        },
        line: 32
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 69
          },
          end: {
            line: 30,
            column: 88
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 30,
            column: 83
          },
          end: {
            line: 30,
            column: 88
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 52
          },
          end: {
            line: 32,
            column: 78
          }
        }, {
          start: {
            line: 32,
            column: 81
          },
          end: {
            line: 34,
            column: 9
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 29
          }
        }, {
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 32,
            column: 49
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 32
          },
          end: {
            line: 35,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 32
          },
          end: {
            line: 35,
            column: 37
          }
        }, {
          start: {
            line: 35,
            column: 41
          },
          end: {
            line: 35,
            column: 57
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 20
          }
        }, {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 36,
            column: 44
          }
        }],
        line: 36
      },
      "8": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "9": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 29
          }
        }, {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 45,
            column: 44
          }
        }, {
          start: {
            line: 45,
            column: 48
          },
          end: {
            line: 45,
            column: 58
          }
        }],
        line: 45
      },
      "10": {
        loc: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 53
          },
          end: {
            line: 48,
            column: 61
          }
        }, {
          start: {
            line: 48,
            column: 64
          },
          end: {
            line: 48,
            column: 116
          }
        }],
        line: 48
      },
      "11": {
        loc: {
          start: {
            line: 48,
            column: 64
          },
          end: {
            line: 48,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 94
          },
          end: {
            line: 48,
            column: 105
          }
        }, {
          start: {
            line: 48,
            column: 108
          },
          end: {
            line: 48,
            column: 116
          }
        }],
        line: 48
      },
      "12": {
        loc: {
          start: {
            line: 49,
            column: 26
          },
          end: {
            line: 49,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 52
          },
          end: {
            line: 49,
            column: 60
          }
        }, {
          start: {
            line: 49,
            column: 63
          },
          end: {
            line: 49,
            column: 108
          }
        }],
        line: 49
      },
      "13": {
        loc: {
          start: {
            line: 49,
            column: 63
          },
          end: {
            line: 49,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 89
          },
          end: {
            line: 49,
            column: 97
          }
        }, {
          start: {
            line: 49,
            column: 100
          },
          end: {
            line: 49,
            column: 108
          }
        }],
        line: 49
      },
      "14": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "15": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 29
          }
        }, {
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 53,
            column: 62
          }
        }],
        line: 53
      },
      "16": {
        loc: {
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 79,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 79,
            column: 63
          }
        }, {
          start: {
            line: 79,
            column: 67
          },
          end: {
            line: 79,
            column: 111
          }
        }],
        line: 79
      },
      "17": {
        loc: {
          start: {
            line: 91,
            column: 27
          },
          end: {
            line: 91,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 27
          },
          end: {
            line: 91,
            column: 40
          }
        }, {
          start: {
            line: 91,
            column: 44
          },
          end: {
            line: 91,
            column: 68
          }
        }],
        line: 91
      },
      "18": {
        loc: {
          start: {
            line: 100,
            column: 18
          },
          end: {
            line: 100,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 100,
            column: 42
          }
        }, {
          start: {
            line: 100,
            column: 45
          },
          end: {
            line: 100,
            column: 53
          }
        }],
        line: 100
      },
      "19": {
        loc: {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 102,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 44
          },
          end: {
            line: 102,
            column: 65
          }
        }, {
          start: {
            line: 102,
            column: 68
          },
          end: {
            line: 102,
            column: 77
          }
        }],
        line: 102
      },
      "20": {
        loc: {
          start: {
            line: 104,
            column: 20
          },
          end: {
            line: 104,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 40
          },
          end: {
            line: 104,
            column: 46
          }
        }, {
          start: {
            line: 104,
            column: 49
          },
          end: {
            line: 104,
            column: 58
          }
        }],
        line: 104
      },
      "21": {
        loc: {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 107,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 42
          },
          end: {
            line: 107,
            column: 45
          }
        }, {
          start: {
            line: 107,
            column: 48
          },
          end: {
            line: 107,
            column: 51
          }
        }],
        line: 107
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/files/share/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError, validateShareRequest } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    // Validate share request\n    if (!validateShareRequest(body)) {\n      return NextResponse.json({ error: 'Invalid share request body' }, { status: 400 })\n    }\n\n    // Handle both single and bulk operations\n    const { fileId, items, permissions, accessLevel, linkAccess, notifyUsers = false, message } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    // Build permissions from accessLevel and linkAccess if not provided directly\n    let sharePermissions = permissions\n    if (!sharePermissions && accessLevel && linkAccess) {\n      sharePermissions = [\n        {\n          role: accessLevel === 'writer' ? 'writer' : accessLevel === 'commenter' ? 'commenter' : 'reader',\n          type: linkAccess === 'anyone' ? 'anyone' : linkAccess === 'domain' ? 'domain' : 'anyone',\n        },\n      ]\n    }\n\n    if (!sharePermissions || sharePermissions.length === 0) {\n      return NextResponse.json({ error: 'Share permissions are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        // Apply each permission to the file\n        for (const permission of sharePermissions) {\n          await driveService!.shareFile(id, {\n            role: permission.role,\n            type: permission.type,\n            emailAddress: permission.emailAddress,\n            domain: permission.domain,\n            sendNotificationEmail: notifyUsers,\n          })\n        }\n\n        // Get the file details to generate share link\n        const fileDetails = await driveService!.drive.files.get({\n          fileId: id,\n          fields: 'id,name,mimeType,webViewLink',\n        })\n\n        const shareLink = fileDetails.data?.webViewLink || `https://drive.google.com/file/d/${id}/view`\n\n        results.push({\n          fileId: id,\n          success: true,\n          shareLink,\n          notifyUsers,\n          message,\n        })\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Share operation failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      total: fileIds.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'share',\n      shareLink: results.length > 0 ? results[0]?.shareLink : undefined,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],
      names: ["POST", "request", "authResult", "initDriveService", "success", "response", "driveService", "body", "json", "validateShareRequest", "NextResponse", "error", "status", "fileId", "items", "permissions", "accessLevel", "linkAccess", "notifyUsers", "message", "fileIds", "length", "map", "item", "id", "isBulkOperation", "sharePermissions", "role", "type", "results", "errors", "permission", "shareFile", "emailAddress", "domain", "sendNotificationEmail", "fileDetails", "drive", "files", "get", "fields", "shareLink", "data", "webViewLink", "push", "processed", "failed", "total", "operation", "undefined", "handleApiError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b95d1e4ff0ecf0f70ba85ab06ee857be826bdbad"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zhre0yzpm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zhre0yzpm();
cov_1zhre0yzpm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zhre0yzpm().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1zhre0yzpm().f[0]++;
    cov_1zhre0yzpm().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1zhre0yzpm().s[3]++, require("next/server"));
const _apiutils =
/* istanbul ignore next */
(cov_1zhre0yzpm().s[4]++, require("../../../../../lib/api-utils"));
async function POST(request) {
  /* istanbul ignore next */
  cov_1zhre0yzpm().f[1]++;
  cov_1zhre0yzpm().s[5]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[6]++, await (0, _apiutils.initDriveService)());
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[7]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1zhre0yzpm().b[0][0]++;
      cov_1zhre0yzpm().s[8]++;
      return authResult.response;
    } else
    /* istanbul ignore next */
    {
      cov_1zhre0yzpm().b[0][1]++;
    }
    const {
      driveService
    } =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[9]++, authResult);
    const body =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[10]++, await request.json());
    // Validate share request
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[11]++;
    if (!(0, _apiutils.validateShareRequest)(body)) {
      /* istanbul ignore next */
      cov_1zhre0yzpm().b[1][0]++;
      cov_1zhre0yzpm().s[12]++;
      return _server.NextResponse.json({
        error: 'Invalid share request body'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zhre0yzpm().b[1][1]++;
    }
    // Handle both single and bulk operations
    const {
      fileId,
      items,
      permissions,
      accessLevel,
      linkAccess,
      notifyUsers =
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[2][0]++, false),
      message
    } =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[13]++, body);
    // Determine operation type based on items array or single fileId
    const fileIds =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[14]++,
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[4][0]++, items) &&
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[4][1]++, items.length > 0) ?
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[3][0]++, items.map(item => {
      /* istanbul ignore next */
      cov_1zhre0yzpm().f[2]++;
      cov_1zhre0yzpm().s[15]++;
      return item.id;
    })) :
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[3][1]++, [fileId]));
    const isBulkOperation =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[16]++,
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[5][0]++, items) &&
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[5][1]++, items.length > 1));
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[7][0]++, !fileIds) ||
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[7][1]++, fileIds.length === 0)) {
      /* istanbul ignore next */
      cov_1zhre0yzpm().b[6][0]++;
      cov_1zhre0yzpm().s[18]++;
      return _server.NextResponse.json({
        error: 'File IDs are required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zhre0yzpm().b[6][1]++;
    }
    // Build permissions from accessLevel and linkAccess if not provided directly
    let sharePermissions =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[19]++, permissions);
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[9][0]++, !sharePermissions) &&
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[9][1]++, accessLevel) &&
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[9][2]++, linkAccess)) {
      /* istanbul ignore next */
      cov_1zhre0yzpm().b[8][0]++;
      cov_1zhre0yzpm().s[21]++;
      sharePermissions = [{
        role: accessLevel === 'writer' ?
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[10][0]++, 'writer') :
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[10][1]++, accessLevel === 'commenter' ?
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[11][0]++, 'commenter') :
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[11][1]++, 'reader')),
        type: linkAccess === 'anyone' ?
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[12][0]++, 'anyone') :
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[12][1]++, linkAccess === 'domain' ?
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[13][0]++, 'domain') :
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[13][1]++, 'anyone'))
      }];
    } else
    /* istanbul ignore next */
    {
      cov_1zhre0yzpm().b[8][1]++;
    }
    cov_1zhre0yzpm().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[15][0]++, !sharePermissions) ||
    /* istanbul ignore next */
    (cov_1zhre0yzpm().b[15][1]++, sharePermissions.length === 0)) {
      /* istanbul ignore next */
      cov_1zhre0yzpm().b[14][0]++;
      cov_1zhre0yzpm().s[23]++;
      return _server.NextResponse.json({
        error: 'Share permissions are required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zhre0yzpm().b[14][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[24]++, []);
    const errors =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[25]++, []);
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[26]++;
    for (const id of fileIds) {
      /* istanbul ignore next */
      cov_1zhre0yzpm().s[27]++;
      try {
        /* istanbul ignore next */
        cov_1zhre0yzpm().s[28]++;
        // Apply each permission to the file
        for (const permission of sharePermissions) {
          /* istanbul ignore next */
          cov_1zhre0yzpm().s[29]++;
          await driveService.shareFile(id, {
            role: permission.role,
            type: permission.type,
            emailAddress: permission.emailAddress,
            domain: permission.domain,
            sendNotificationEmail: notifyUsers
          });
        }
        // Get the file details to generate share link
        const fileDetails =
        /* istanbul ignore next */
        (cov_1zhre0yzpm().s[30]++, await driveService.drive.files.get({
          fileId: id,
          fields: 'id,name,mimeType,webViewLink'
        }));
        const shareLink =
        /* istanbul ignore next */
        (cov_1zhre0yzpm().s[31]++,
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[16][0]++, fileDetails.data?.webViewLink) ||
        /* istanbul ignore next */
        (cov_1zhre0yzpm().b[16][1]++, `https://drive.google.com/file/d/${id}/view`));
        /* istanbul ignore next */
        cov_1zhre0yzpm().s[32]++;
        results.push({
          fileId: id,
          success: true,
          shareLink,
          notifyUsers,
          message
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1zhre0yzpm().s[33]++;
        errors.push({
          fileId: id,
          success: false,
          error:
          /* istanbul ignore next */
          (cov_1zhre0yzpm().b[17][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1zhre0yzpm().b[17][1]++, 'Share operation failed')
        });
      }
    }
    const response =
    /* istanbul ignore next */
    (cov_1zhre0yzpm().s[34]++, {
      success: errors.length === 0,
      processed: results.length,
      failed: errors.length,
      total: fileIds.length,
      type: isBulkOperation ?
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[18][0]++, 'bulk') :
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[18][1]++, 'single'),
      operation: 'share',
      shareLink: results.length > 0 ?
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[19][0]++, results[0]?.shareLink) :
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[19][1]++, undefined),
      results,
      errors: errors.length > 0 ?
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[20][0]++, errors) :
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[20][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[35]++;
    return _server.NextResponse.json(response, {
      status: errors.length === 0 ?
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[21][0]++, 200) :
      /* istanbul ignore next */
      (cov_1zhre0yzpm().b[21][1]++, 207)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1zhre0yzpm().s[36]++;
    return (0, _apiutils.handleApiError)(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,