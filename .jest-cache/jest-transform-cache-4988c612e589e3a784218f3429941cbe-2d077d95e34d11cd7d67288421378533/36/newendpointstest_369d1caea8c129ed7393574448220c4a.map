{"version":3,"sources":["/home/runner/workspace/__tests__/api/new-endpoints.test.ts"],"sourcesContent":["/**\n * Jest Tests for New Static API Endpoints\n * Testing all refactored API endpoints from /api/drive/files/[fileId]/* to /api/drive/files/*\n */\n\nimport { NextRequest } from 'next/server'\nimport { POST } from '@/app/api/drive/files/details/route'\nimport { POST as DownloadPOST } from '@/app/api/drive/files/download/route'\nimport { POST as MovePOST } from '@/app/api/drive/files/move/route'\nimport { POST as CopyPOST } from '@/app/api/drive/files/copy/route'\nimport { POST as RenamePOST } from '@/app/api/drive/files/rename/route'\nimport { POST as TrashPOST } from '@/app/api/drive/files/trash/route'\nimport { POST as UntrashPOST } from '@/app/api/drive/files/untrash/route'\nimport { POST as DeletePOST } from '@/app/api/drive/files/delete/route'\nimport { POST as SharePOST } from '@/app/api/drive/files/share/route'\nimport { POST as ExportPOST } from '@/app/api/drive/files/export/route'\nimport { POST as EssentialPOST } from '@/app/api/drive/files/essential/route'\nimport { POST as ExtendedPOST } from '@/app/api/drive/files/extended/route'\n\n// Mock NextAuth\njest.mock('next-auth', () => ({\n  default: jest.fn(() => ({\n    handlers: { GET: jest.fn(), POST: jest.fn() },\n    auth: jest.fn(),\n    signIn: jest.fn(),\n    signOut: jest.fn(),\n  })),\n}))\n\n// Mock auth function specifically\njest.mock('@/auth', () => ({\n  auth: jest.fn().mockResolvedValue({\n    user: { id: 'test-user', email: 'test@example.com' },\n    accessToken: 'test-access-token',\n  }),\n}))\n\n// Mock API utils\njest.mock('@/lib/api-utils', () => ({\n  initDriveService: jest.fn().mockResolvedValue({\n    success: true,\n    driveService: {\n      getFileDetails: jest.fn().mockResolvedValue({\n        id: 'test-file-id',\n        name: 'test-file.txt',\n        mimeType: 'text/plain',\n        size: '1024',\n      }),\n      moveFile: jest.fn().mockResolvedValue({ success: true }),\n      copyFile: jest.fn().mockResolvedValue({ success: true }),\n      renameFile: jest.fn().mockResolvedValue({ success: true }),\n      moveToTrash: jest.fn().mockResolvedValue({ success: true }),\n      restoreFromTrash: jest.fn().mockResolvedValue({ success: true }),\n      deleteFilePermanently: jest.fn().mockResolvedValue({ success: true }),\n      shareFile: jest.fn().mockResolvedValue({ success: true }),\n      exportFile: jest.fn().mockResolvedValue({ success: true }),\n      downloadFile: jest.fn().mockResolvedValue(new ReadableStream()),\n    },\n  }),\n  handleApiError: jest.fn().mockReturnValue(\n    new Response(JSON.stringify({ error: 'Mocked error' }), { status: 500 })\n  ),\n}))\n\n// Mock Google Drive Service\njest.mock('@/lib/google-drive/service', () => ({\n  GoogleDriveService: jest.fn().mockImplementation(() => ({\n    getFileDetails: jest.fn().mockResolvedValue({\n      id: 'test-file-id',\n      name: 'test-file.txt',\n      mimeType: 'text/plain',\n      size: '1024',\n      createdTime: '2025-01-01T00:00:00Z',\n      modifiedTime: '2025-01-01T00:00:00Z',\n    }),\n    getFileMetadata: jest.fn().mockResolvedValue({\n      id: 'test-file-id',\n      name: 'test-file.txt',\n      mimeType: 'text/plain',\n      size: '1024',\n    }),\n    moveFile: jest.fn().mockResolvedValue({ success: true }),\n    copyFile: jest.fn().mockResolvedValue({ success: true }),\n    renameFile: jest.fn().mockResolvedValue({ success: true }),\n    moveToTrash: jest.fn().mockResolvedValue({ success: true }),\n    untrashFile: jest.fn().mockResolvedValue({ success: true }),\n    deleteFile: jest.fn().mockResolvedValue({ success: true }),\n    shareFile: jest.fn().mockResolvedValue({ success: true }),\n    exportFile: jest.fn().mockResolvedValue(new ArrayBuffer(8)),\n    downloadFile: jest.fn().mockResolvedValue('file-content'),\n  })),\n}))\n\n// Mock API Utils\njest.mock('@/lib/api-utils', () => ({\n  initDriveService: jest.fn().mockResolvedValue({\n    success: true,\n    driveService: {\n      getFileDetails: jest.fn().mockResolvedValue({\n        id: 'test-file-id',\n        name: 'test-file.txt',\n      }),\n      getFileMetadata: jest.fn().mockResolvedValue({\n        id: 'test-file-id',\n        name: 'test-file.txt',\n      }),\n      moveFile: jest.fn().mockResolvedValue({ success: true }),\n      copyFile: jest.fn().mockResolvedValue({ success: true }),\n      renameFile: jest.fn().mockResolvedValue({ success: true }),\n      moveToTrash: jest.fn().mockResolvedValue({ success: true }),\n      untrashFile: jest.fn().mockResolvedValue({ success: true }),\n      deleteFile: jest.fn().mockResolvedValue({ success: true }),\n      shareFile: jest.fn().mockResolvedValue({ success: true }),\n      exportFile: jest.fn().mockResolvedValue(new ArrayBuffer(8)),\n      downloadFile: jest.fn().mockResolvedValue('file-content'),\n    },\n  }),\n  handleApiError: jest.fn().mockReturnValue(new Response('Error', { status: 500 })),\n  validateShareRequest: jest.fn().mockReturnValue(true),\n  validateOperationsRequest: jest.fn().mockReturnValue(true),\n}))\n\n// Mock throttle and retry\njest.mock('@/lib/api-throttle', () => ({\n  throttledDriveRequest: jest.fn().mockImplementation((fn) => fn()),\n}))\n\njest.mock('@/lib/api-retry', () => ({\n  retryDriveApiCall: jest.fn().mockImplementation((fn) => fn()),\n}))\n\ndescribe('API Endpoints - New Static Routing', () => {\n  let mockRequest: NextRequest\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  const createMockRequest = (body: any) => {\n    return new NextRequest('http://localhost:3000/test', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n    })\n  }\n\n  describe('/api/drive/files/details', () => {\n    it('should handle single file details request', async () => {\n      mockRequest = createMockRequest({ fileId: 'test-file-id' })\n\n      const response = await POST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('details')\n      expect(data.fileDetails).toBeDefined()\n    })\n\n    it('should return 400 for missing fileId', async () => {\n      mockRequest = createMockRequest({})\n\n      const response = await POST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toBe('File ID is required')\n    })\n  })\n\n  describe('/api/drive/files/essential', () => {\n    it('should return essential metadata', async () => {\n      mockRequest = createMockRequest({ fileId: 'test-file-id' })\n\n      const response = await EssentialPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('essential')\n      expect(data.fileMetadata).toBeDefined()\n    })\n  })\n\n  describe('/api/drive/files/extended', () => {\n    it('should return extended metadata', async () => {\n      mockRequest = createMockRequest({ fileId: 'test-file-id' })\n\n      const response = await ExtendedPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('extended')\n      expect(data.fileMetadata).toBeDefined()\n    })\n  })\n\n  describe('/api/drive/files/move', () => {\n    it('should handle single file move', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n        targetFolderId: 'target-folder-id',\n      })\n\n      const response = await MovePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('move')\n      expect(data.type).toBe('single')\n    })\n\n    it('should handle bulk file move', async () => {\n      mockRequest = createMockRequest({\n        items: [\n          { id: 'file1', name: 'file1.txt', isFolder: false },\n          { id: 'file2', name: 'file2.txt', isFolder: false },\n        ],\n        targetFolderId: 'target-folder-id',\n      })\n\n      const response = await MovePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('move')\n      expect(data.type).toBe('bulk')\n      expect(data.processed).toBe(2)\n    })\n\n    it('should return 400 for missing targetFolderId', async () => {\n      mockRequest = createMockRequest({ fileId: 'test-file-id' })\n\n      const response = await MovePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toBe('Target folder ID is required')\n    })\n  })\n\n  describe('/api/drive/files/copy', () => {\n    it('should handle file copy operation', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n        targetFolderId: 'target-folder-id',\n      })\n\n      const response = await CopyPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('copy')\n      expect(data.targetFolderId).toBe('target-folder-id')\n    })\n\n    it('should handle bulk copy with name prefix', async () => {\n      mockRequest = createMockRequest({\n        items: [{ id: 'file1', name: 'file1.txt', isFolder: false }],\n        targetFolderId: 'target-folder-id',\n        namePrefix: 'Copy_',\n      })\n\n      const response = await CopyPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.namePrefix).toBe('Copy_')\n    })\n  })\n\n  describe('/api/drive/files/rename', () => {\n    it('should handle single file rename', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n        newName: 'new-file-name.txt',\n      })\n\n      const response = await RenamePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('rename')\n    })\n\n    it('should handle bulk rename with prefix', async () => {\n      mockRequest = createMockRequest({\n        items: [\n          { id: 'file1', name: 'file1.txt', isFolder: false },\n          { id: 'file2', name: 'file2.txt', isFolder: false },\n        ],\n        namePrefix: 'Bulk_',\n      })\n\n      const response = await RenamePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.type).toBe('bulk')\n    })\n  })\n\n  describe('/api/drive/files/trash', () => {\n    it('should handle trash operation', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n      })\n\n      const response = await TrashPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('trash')\n    })\n  })\n\n  describe('/api/drive/files/untrash', () => {\n    it('should handle untrash operation', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n      })\n\n      const response = await UntrashPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('untrash')\n    })\n  })\n\n  describe('/api/drive/files/delete', () => {\n    it('should handle permanent delete operation', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n      })\n\n      const response = await DeletePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('delete')\n    })\n  })\n\n  describe('/api/drive/files/share', () => {\n    it('should handle share operation', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n        permissions: [{ type: 'user', role: 'reader', emailAddress: 'test@example.com' }],\n        notifyUsers: false,\n      })\n\n      const response = await SharePOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('share')\n    })\n  })\n\n  describe('/api/drive/files/export', () => {\n    it('should handle export operation', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n        exportFormat: 'pdf',\n      })\n\n      const response = await ExportPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n      expect(data.operation).toBe('export')\n      expect(data.exportFormat).toBe('pdf')\n    })\n  })\n\n  describe('/api/drive/files/download', () => {\n    it('should handle single file download', async () => {\n      mockRequest = createMockRequest({\n        fileId: 'test-file-id',\n        downloadMode: 'exportLinks',\n      })\n\n      const response = await DownloadPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.success).toBe(true)\n    })\n\n    it('should handle bulk download', async () => {\n      mockRequest = createMockRequest({\n        items: [{ id: 'file1', name: 'file1.txt', isFolder: false }],\n        downloadMode: 'exportLinks',\n      })\n\n      const response = await DownloadPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n    })\n\n    it('should return error for missing fileId in single mode', async () => {\n      mockRequest = createMockRequest({\n        downloadMode: 'oneByOne',\n      })\n\n      const response = await DownloadPOST(mockRequest)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toBe('fileId is required for single file download')\n    })\n  })\n})\n\ndescribe('API Endpoints - Error Handling', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('should handle authentication failure', async () => {\n    // Mock authentication failure\n    const { initDriveService } = require('@/lib/api-utils')\n    initDriveService.mockResolvedValueOnce({\n      success: false,\n      response: new Response('Unauthorized', { status: 401 }),\n    })\n\n    const mockRequest = new NextRequest('http://localhost:3000/test', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ fileId: 'test-file-id' }),\n    })\n\n    const response = await POST(mockRequest)\n    expect(response.status).toBe(401)\n  })\n\n  it('should handle service errors gracefully', async () => {\n    // Mock service error\n    const { initDriveService } = require('@/lib/api-utils')\n    initDriveService.mockResolvedValueOnce({\n      success: true,\n      driveService: {\n        getFileDetails: jest.fn().mockRejectedValue(new Error('Service error')),\n      },\n    })\n\n    const mockRequest = new NextRequest('http://localhost:3000/test', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ fileId: 'test-file-id' }),\n    })\n\n    const response = await POST(mockRequest)\n    expect(response.status).toBe(500)\n  })\n})\n\ndescribe('API Endpoints - Request Validation', () => {\n  const createMockRequest = (body: any) => {\n    return new NextRequest('http://localhost:3000/test', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n    })\n  }\n\n  it('should validate required fields for each endpoint', async () => {\n    // Test missing fileId for details endpoint\n    const detailsRequest = createMockRequest({})\n    const detailsResponse = await POST(detailsRequest)\n    expect(detailsResponse.status).toBe(400)\n\n    // Test missing targetFolderId for move endpoint\n    const moveRequest = createMockRequest({ fileId: 'test' })\n    const moveResponse = await MovePOST(moveRequest)\n    expect(moveResponse.status).toBe(400)\n  })\n\n  it('should handle malformed JSON', async () => {\n    const malformedRequest = new NextRequest('http://localhost:3000/test', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: 'invalid-json',\n    })\n\n    try {\n      await POST(malformedRequest)\n    } catch (error) {\n      expect(error).toBeInstanceOf(Error)\n    }\n  })\n})\n"],"names":["jest","mock","default","fn","handlers","GET","POST","auth","signIn","signOut","mockResolvedValue","user","id","email","accessToken","initDriveService","success","driveService","getFileDetails","name","mimeType","size","moveFile","copyFile","renameFile","moveToTrash","restoreFromTrash","deleteFilePermanently","shareFile","exportFile","downloadFile","ReadableStream","handleApiError","mockReturnValue","Response","JSON","stringify","error","status","GoogleDriveService","mockImplementation","createdTime","modifiedTime","getFileMetadata","untrashFile","deleteFile","ArrayBuffer","validateShareRequest","validateOperationsRequest","throttledDriveRequest","retryDriveApiCall","describe","mockRequest","beforeEach","clearAllMocks","createMockRequest","body","NextRequest","method","headers","it","fileId","response","data","json","expect","toBe","operation","fileDetails","toBeDefined","EssentialPOST","fileMetadata","ExtendedPOST","targetFolderId","MovePOST","type","items","isFolder","processed","CopyPOST","namePrefix","newName","RenamePOST","TrashPOST","UntrashPOST","DeletePOST","permissions","role","emailAddress","notifyUsers","SharePOST","exportFormat","ExportPOST","downloadMode","DownloadPOST","require","mockResolvedValueOnce","mockRejectedValue","Error","detailsRequest","detailsResponse","moveRequest","moveResponse","malformedRequest","toBeInstanceOf"],"mappings":"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"}