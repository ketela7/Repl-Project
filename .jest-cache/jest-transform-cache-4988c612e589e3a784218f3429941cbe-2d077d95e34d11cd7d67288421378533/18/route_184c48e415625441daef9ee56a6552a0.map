{"version":3,"names":["cov_3cjso7g0","actualCoverage","s","POST","generateRenamedFileName","originalName","pattern","renameType","index","f","extension","includes","b","substring","lastIndexOf","nameWithoutExt","basePattern","now","Date","timestamp","toISOString","slice","replace","oldText","newText","split","RegExp","regexMatch","match","regPattern","replacement","flags","regex","error","request","authResult","_apiutils","initDriveService","success","response","driveService","body","json","validateRenameRequest","_server","NextResponse","status","fileId","namePrefix","newName","items","fileIds","length","map","item","id","isBulkOperation","results","errors","i","finalName","originalItem","find","name","push","result","_apithrottle","throttledDriveRequest","_apiretry","retryDriveApiCall","renameFile","errorMessage","code","message","session","userId","user","email","_cache","driveCache","clearUserCache","clearFolderCache","processed","failed","total","type","operation","undefined","handleApiError"],"sources":["/home/runner/workspace/src/app/api/drive/files/rename/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError, validateRenameRequest } from '@/lib/api-utils'\nimport { retryDriveApiCall } from '@/lib/api-retry'\nimport { throttledDriveRequest } from '@/lib/api-throttle'\nimport { driveCache } from '@/lib/cache'\n\n/**\n * Rename pattern generators following Download Operations pattern\n */\nfunction generateRenamedFileName(originalName: string, pattern: string, renameType: string, index?: number): string {\n  const extension = originalName.includes('.') ? originalName.substring(originalName.lastIndexOf('.')) : ''\n  const nameWithoutExt = extension ? originalName.substring(0, originalName.lastIndexOf('.')) : originalName\n\n  switch (renameType) {\n    case 'prefix':\n      return `${pattern}_${originalName}`\n\n    case 'suffix':\n      return extension ? `${nameWithoutExt}_${pattern}${extension}` : `${originalName}_${pattern}`\n\n    case 'numbering':\n      const basePattern = pattern || 'File'\n      return extension ? `${basePattern} (${index || 1})${extension}` : `${basePattern} (${index || 1})`\n\n    case 'timestamp':\n      const now = new Date()\n      const timestamp = now.toISOString().slice(0, 19).replace(/[T:]/g, '_').replace(/-/g, '')\n      return extension ? `${nameWithoutExt}_${timestamp}${extension}` : `${originalName}_${timestamp}`\n\n    case 'replace':\n      if (!pattern.includes('|')) return originalName\n      const [oldText, newText] = pattern.split('|')\n      if (!oldText) return originalName\n      return originalName.replace(new RegExp(oldText, 'g'), newText || '')\n\n    case 'regex':\n      try {\n        // Parse regex pattern in format: /pattern/replacement/flags\n        const regexMatch = pattern.match(/^\\/(.+)\\/(.*)\\/([gimuy]*)$/)\n        if (regexMatch) {\n          const [, regPattern, replacement, flags] = regexMatch\n          if (!regPattern) return originalName\n          const regex = flags ? new RegExp(regPattern, flags) : new RegExp(regPattern)\n          return originalName.replace(regex, replacement || '')\n        }\n        return originalName\n      } catch (error) {\n        return originalName\n      }\n\n    default:\n      return originalName\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    if (!validateRenameRequest(body)) {\n      return NextResponse.json({ error: 'Invalid rename request format' }, { status: 400 })\n    }\n\n    // Handle both single and bulk operations\n    const { fileId, namePrefix, newName, items, renameType = 'prefix' } = body\n\n    // // // // // console.log(`[Rename Debug] Request body:`, JSON.stringify({ fileId, namePrefix, newName, items: items?.length, renameType }))\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id || item.fileId) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (let i = 0; i < fileIds.length; i++) {\n      const id = fileIds[i]\n\n      try {\n        let finalName = newName\n\n        // Priority: Use newName if provided directly (from rename dialog)\n        if (newName) {\n          finalName = newName\n        }\n        // Otherwise, generate name based on rename type and pattern\n        else if (namePrefix && items) {\n          const originalItem = items.find((item: any) => item.id === id)\n          const originalName = originalItem?.name || 'Unknown'\n          const pattern = namePrefix || ''\n\n          if (isBulkOperation) {\n            finalName = generateRenamedFileName(originalName, pattern, renameType, i + 1)\n          } else {\n            finalName = generateRenamedFileName(originalName, pattern, renameType, 1)\n          }\n        }\n\n        if (!finalName) {\n          errors.push({\n            fileId: id,\n            success: false,\n            error: 'New name is required',\n          })\n          continue\n        }\n\n        // // // // // console.log(`[Rename API] Processing file ${id} with name \"${finalName}\"`)\n\n        // Use throttling and retry like Download Operations\n        const result = await throttledDriveRequest(async () => {\n          return await retryDriveApiCall(async () => {\n            return await driveService!.renameFile(id, finalName)\n          })\n        })\n\n        // // // // // console.log(`[Rename API] Success for file ${id}:`, result)\n\n        results.push({\n          fileId: id,\n          success: true,\n          result,\n          newName: finalName,\n        })\n      } catch (error: any) {\n        // Provide detailed error messages for common Google Drive API errors\n        let errorMessage = 'Rename failed'\n\n        if (error.code) {\n          switch (error.code) {\n            case 401:\n              errorMessage = 'Authentication expired - please re-login to Google Drive'\n              break\n            case 403:\n              errorMessage = \"Permission denied - you don't have write access to this file\"\n              break\n            case 404:\n              errorMessage = 'File not found - it may have been deleted or moved'\n              break\n            case 409:\n              errorMessage = 'A file with this name already exists in the same location'\n              break\n            case 429:\n              errorMessage = 'Too many requests - please wait and try again'\n              break\n            case 500:\n            case 502:\n            case 503:\n              errorMessage = 'Google Drive server error - please try again later'\n              break\n            default:\n              errorMessage = error.message || `Google Drive API error (${error.code})`\n          }\n        } else if (error.message) {\n          if (error.message.includes('Invalid file name')) {\n            errorMessage = 'Invalid filename - check for special characters'\n          } else if (error.message.includes('File name too long')) {\n            errorMessage = 'Filename is too long - please use a shorter name'\n          } else if (error.message.includes('duplicate')) {\n            errorMessage = 'A file with this name already exists'\n          } else if (error.message.includes('permission')) {\n            errorMessage = \"Permission denied - you don't have write access\"\n          } else {\n            errorMessage = error.message\n          }\n        }\n\n        errors.push({\n          fileId: id,\n          success: false,\n          error: errorMessage,\n        })\n      }\n    }\n\n    // Clear cache for affected files to ensure UI updates\n    if (results.length > 0) {\n      const { session } = authResult\n      const userId = session?.user?.email || 'unknown'\n\n      // Clear related cache entries\n      driveCache.clearUserCache(userId)\n      driveCache.clearFolderCache(userId, 'root')\n\n      // // // // // console.log(`[Rename Cache] Cleared cache for ${results.length} renamed files`)\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      total: fileIds.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'rename',\n      renameType,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],"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","ignoreList":[]}