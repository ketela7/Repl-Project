dd5768d93ae9fd36d2c74c730a1debb1
'use client';
"use strict";

/* istanbul ignore next */
function cov_d46q84749() {
  var path = "/home/runner/workspace/src/app/(main)/dashboard/drive/_components/file-breadcrumb.tsx";
  var hash = "bedfeae64ab6cb5e3c335b6a3df91af18f7cbb64";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/(main)/dashboard/drive/_components/file-breadcrumb.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 30
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 24
        }
      },
      "6": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 48
        }
      },
      "7": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 31
        }
      },
      "8": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "9": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 70
        }
      },
      "10": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "11": {
        start: {
          line: 26,
          column: 50
        },
        end: {
          line: 26,
          column: 74
        }
      },
      "12": {
        start: {
          line: 27,
          column: 34
        },
        end: {
          line: 27,
          column: 61
        }
      },
      "13": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 56
        }
      },
      "14": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "16": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 29
        }
      },
      "17": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 27
        }
      },
      "18": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 39,
          column: 14
        }
      },
      "19": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "20": {
        start: {
          line: 43,
          column: 34
        },
        end: {
          line: 43,
          column: 55
        }
      },
      "21": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 93
        }
      },
      "22": {
        start: {
          line: 47,
          column: 27
        },
        end: {
          line: 47,
          column: 48
        }
      },
      "23": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 50
        }
      },
      "24": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "25": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "27": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 63,
          column: 32
        }
      },
      "28": {
        start: {
          line: 64,
          column: 32
        },
        end: {
          line: 64,
          column: 38
        }
      },
      "29": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 65,
          column: 44
        }
      },
      "30": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "31": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 49
        }
      },
      "32": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "33": {
        start: {
          line: 76,
          column: 33
        },
        end: {
          line: 76,
          column: 57
        }
      },
      "34": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "35": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 26
        }
      },
      "36": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "37": {
        start: {
          line: 84,
          column: 43
        },
        end: {
          line: 89,
          column: 22
        }
      },
      "38": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 92,
          column: 21
        }
      },
      "39": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 30
        }
      },
      "40": {
        start: {
          line: 93,
          column: 41
        },
        end: {
          line: 93,
          column: 68
        }
      },
      "41": {
        start: {
          line: 99,
          column: 43
        },
        end: {
          line: 99,
          column: 70
        }
      },
      "42": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 104,
          column: 21
        }
      },
      "43": {
        start: {
          line: 103,
          column: 24
        },
        end: {
          line: 103,
          column: 30
        }
      },
      "44": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 53
        }
      },
      "45": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "46": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 55
        }
      },
      "47": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 49
        }
      },
      "48": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 26
        }
      },
      "49": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 32
        }
      },
      "50": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 42
        }
      },
      "51": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 51
        }
      },
      "52": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 35
        }
      },
      "53": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 30
        }
      },
      "54": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 142,
          column: 7
        }
      },
      "55": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "56": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 45
        }
      },
      "57": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 35
        }
      },
      "58": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 27
        }
      },
      "59": {
        start: {
          line: 143,
          column: 22
        },
        end: {
          line: 143,
          column: 48
        }
      },
      "60": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 252,
          column: 7
        }
      },
      "61": {
        start: {
          line: 155,
          column: 36
        },
        end: {
          line: 155,
          column: 55
        }
      },
      "62": {
        start: {
          line: 156,
          column: 36
        },
        end: {
          line: 156,
          column: 53
        }
      },
      "63": {
        start: {
          line: 174,
          column: 75
        },
        end: {
          line: 219,
          column: 66
        }
      },
      "64": {
        start: {
          line: 196,
          column: 48
        },
        end: {
          line: 196,
          column: 67
        }
      },
      "65": {
        start: {
          line: 199,
          column: 48
        },
        end: {
          line: 203,
          column: 49
        }
      },
      "66": {
        start: {
          line: 202,
          column: 52
        },
        end: {
          line: 202,
          column: 59
        }
      },
      "67": {
        start: {
          line: 204,
          column: 48
        },
        end: {
          line: 204,
          column: 70
        }
      },
      "68": {
        start: {
          line: 245,
          column: 37
        },
        end: {
          line: 245,
          column: 88
        }
      },
      "69": {
        start: {
          line: 254,
          column: 17
        },
        end: {
          line: 254,
          column: 31
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 21
          }
        },
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 13
          },
          end: {
            line: 16,
            column: 14
          }
        },
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "FileBreadcrumb",
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 23
          }
        },
        loc: {
          start: {
            line: 25,
            column: 83
          },
          end: {
            line: 253,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 29
          }
        },
        loc: {
          start: {
            line: 29,
            column: 46
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 27
          }
        },
        loc: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 154,
            column: 41
          },
          end: {
            line: 154,
            column: 42
          }
        },
        loc: {
          start: {
            line: 154,
            column: 46
          },
          end: {
            line: 157,
            column: 33
          }
        },
        line: 154
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 174,
            column: 44
          },
          end: {
            line: 174,
            column: 45
          }
        },
        loc: {
          start: {
            line: 174,
            column: 75
          },
          end: {
            line: 219,
            column: 66
          }
        },
        line: 174
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 195,
            column: 53
          },
          end: {
            line: 195,
            column: 54
          }
        },
        loc: {
          start: {
            line: 195,
            column: 58
          },
          end: {
            line: 205,
            column: 45
          }
        },
        line: 195
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 245,
            column: 33
          },
          end: {
            line: 245,
            column: 34
          }
        },
        loc: {
          start: {
            line: 245,
            column: 37
          },
          end: {
            line: 245,
            column: 88
          }
        },
        line: 245
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 38
          }
        }, {
          start: {
            line: 54,
            column: 42
          },
          end: {
            line: 54,
            column: 50
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 75,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 75,
            column: 39
          }
        }, {
          start: {
            line: 75,
            column: 43
          },
          end: {
            line: 75,
            column: 75
          }
        }, {
          start: {
            line: 75,
            column: 79
          },
          end: {
            line: 75,
            column: 114
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 20
          },
          end: {
            line: 92,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 20
          },
          end: {
            line: 92,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 43
          },
          end: {
            line: 99,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 43
          },
          end: {
            line: 99,
            column: 58
          }
        }, {
          start: {
            line: 99,
            column: 62
          },
          end: {
            line: 99,
            column: 70
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 104,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 104,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: 136,
            column: 15
          },
          end: {
            line: 139,
            column: 9
          }
        }],
        line: 134
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 22
          },
          end: {
            line: 143,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 22
          },
          end: {
            line: 143,
            column: 29
          }
        }, {
          start: {
            line: 143,
            column: 33
          },
          end: {
            line: 143,
            column: 48
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 158,
            column: 125
          },
          end: {
            line: 158,
            column: 175
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 144
          },
          end: {
            line: 158,
            column: 170
          }
        }, {
          start: {
            line: 158,
            column: 173
          },
          end: {
            line: 158,
            column: 175
          }
        }],
        line: 158
      },
      "11": {
        loc: {
          start: {
            line: 182,
            column: 50
          },
          end: {
            line: 216,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 103
          },
          end: {
            line: 193,
            column: 42
          }
        }, {
          start: {
            line: 193,
            column: 59
          },
          end: {
            line: 216,
            column: 42
          }
        }],
        line: 182
      },
      "12": {
        loc: {
          start: {
            line: 199,
            column: 48
          },
          end: {
            line: 203,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 48
          },
          end: {
            line: 203,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "13": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 234,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 223,
            column: 21
          }
        }, {
          start: {
            line: 223,
            column: 39
          },
          end: {
            line: 234,
            column: 14
          }
        }],
        line: 223
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 250,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 235,
            column: 17
          }
        }, {
          start: {
            line: 235,
            column: 35
          },
          end: {
            line: 250,
            column: 14
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 245,
            column: 37
          },
          end: {
            line: 245,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 37
          },
          end: {
            line: 245,
            column: 52
          }
        }, {
          start: {
            line: 245,
            column: 56
          },
          end: {
            line: 245,
            column: 88
          }
        }],
        line: 245
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/(main)/dashboard/drive/_components/file-breadcrumb.tsx"],
      sourcesContent: ["'use client'\n\nimport { useState, useEffect, Fragment } from 'react'\nimport { Home, Folder, ChevronRight, Loader2 } from 'lucide-react'\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from '@/components/ui/breadcrumb'\nimport { Button } from '@/components/ui/button'\n\ninterface BreadcrumbItemData {\n  id: string\n  name: string\n}\n\ninterface FileBreadcrumbProps {\n  currentFolderId: string | null\n  onNavigate: (folderId: string | null) => void\n  onBackToRoot?: () => void\n  loading?: boolean\n}\n\nexport function FileBreadcrumb({ currentFolderId, onNavigate, loading: externalLoading }: FileBreadcrumbProps) {\n  const [breadcrumbItems, setBreadcrumbItems] = useState<BreadcrumbItemData[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchFolderPath = async (folderId: string) => {\n    try {\n      // // // // // console.log('[Breadcrumb] Starting fetchFolderPath for:', folderId)\n      setLoading(true)\n      setError(null)\n\n      const response = await fetch(`/api/drive/files?fileId=${folderId}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      })\n\n      // // // // // console.log('[Breadcrumb] API Response status:', response.status)\n      // // // // // console.log('[Breadcrumb] API Response headers:', response.headers)\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        // // // // // console.error('[Breadcrumb] API Error response:', errorText)\n        throw new Error(`Failed to fetch folder: ${response.status} - ${errorText}`)\n      }\n\n      const folder = await response.json()\n      // // // // // console.log('[Breadcrumb] Initial folder data:', folder)\n      // // // // // console.log('[Breadcrumb] Folder properties:', Object.keys(folder))\n      // // // // // console.log('[Breadcrumb] Folder ID raw:', folder.id)\n      // // // // // console.log('[Breadcrumb] Folder name:', folder.name)\n      // // // // // console.log('[Breadcrumb] Folder parents:', folder.parents)\n\n      // Use fileId if id is not available (common in Google Drive API responses)\n      const actualId = folder.id || folderId\n      // // // // // console.log('[Breadcrumb] Resolved folder ID:', actualId)\n\n      // Validate folder data\n      if (!actualId) {\n        // // // // // console.error('[Breadcrumb] ERROR: Folder missing ID property!', folder)\n        throw new Error('Invalid folder data: missing ID')\n      }\n\n      // Update folder object with correct ID\n      folder.id = actualId\n\n      const pathItems: BreadcrumbItemData[] = []\n      let currentFolder = folder\n      const visitedFolders = new Set<string>()\n\n      // Add current folder first\n      // // // // // console.log('[Breadcrumb] Adding current folder - ID:', currentFolder.id, 'Name:', currentFolder.name)\n      pathItems.push({ id: currentFolder.id, name: currentFolder.name })\n      visitedFolders.add(currentFolder.id)\n\n      // Traverse up to root\n      // // // // // console.log('[Breadcrumb] Starting parent traversal, current folder parents:', currentFolder.parents)\n\n      while (currentFolder.parents && currentFolder.parents.length > 0 && currentFolder.parents[0] !== 'root') {\n        const parentId = currentFolder.parents[0]\n        // // // // // console.log('[Breadcrumb] Processing parent ID:', parentId)\n\n        // Prevent infinite loops\n        if (visitedFolders.has(parentId)) {\n          // // // // // console.log('[Breadcrumb] Detected circular reference, breaking loop')\n          break\n        }\n        try {\n          // // // // // console.log('[Breadcrumb] Fetching parent with fileId:', parentId)\n\n          const parentResponse = await fetch(`/api/drive/files?fileId=${parentId}`, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n          })\n          if (!parentResponse.ok) {\n            // // // // // console.log('[Breadcrumb] Parent response not ok:', parentResponse.status)\n            break\n          }\n\n          const parentFolder = await parentResponse.json()\n          // // // // // console.log('[Breadcrumb] Parent folder data:', parentFolder)\n          // // // // // console.log('[Breadcrumb] Parent folder properties:', Object.keys(parentFolder))\n          // // // // // console.log('[Breadcrumb] Parent folder ID raw:', parentFolder.id)\n          // // // // // console.log('[Breadcrumb] Parent folder name:', parentFolder.name)\n\n          // Use fileId if id is not available\n          const actualParentId = parentFolder.id || parentId\n          // // // // // console.log('[Breadcrumb] Resolved parent folder ID:', actualParentId)\n\n          // Validate parent folder data\n          if (!actualParentId) {\n            // // // // // console.error('[Breadcrumb] ERROR: Parent folder missing ID!', parentFolder)\n            break\n          }\n\n          // Update parent folder object with correct ID\n          parentFolder.id = actualParentId\n\n          // // // // // console.log('[Breadcrumb] Adding parent folder - ID:', parentFolder.id, 'Name:', parentFolder.name)\n          pathItems.push({ id: parentFolder.id, name: parentFolder.name })\n          visitedFolders.add(actualParentId)\n          currentFolder = parentFolder\n          // // // // // console.log('[Breadcrumb] Next parent will be:', currentFolder.parents ? currentFolder.parents[0] : 'none')\n        } catch (err) {\n          // // // // // console.error(`[Breadcrumb] Error fetching parent folder:${parentId}`, err)\n          break\n        }\n      }\n\n      // // // // // console.log('[Breadcrumb] Finished parent traversal, pathItems before reverse:', pathItems)\n\n      // Reverse path items to show from root to current folder\n      pathItems.reverse()\n      // // // // // console.log('[Breadcrumb] Final items:', pathItems)\n      setBreadcrumbItems(pathItems)\n    } catch (error) {\n      // Log error for debugging in development only\n      // // // // // console.error(`Error fetching folder path: ${folderId}`, error)\n\n      setError('Failed to load folder path')\n      setBreadcrumbItems([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    if (currentFolderId) {\n      fetchFolderPath(currentFolderId)\n    } else {\n      setBreadcrumbItems([])\n      setError(null)\n    }\n  }, [currentFolderId])\n\n  const isLoading = loading || externalLoading\n\n  return (\n    <div className=\"bg-muted/30 flex items-center gap-2 overflow-x-auto rounded-lg border px-2 py-3\">\n      <Breadcrumb>\n        <BreadcrumbList className=\"min-w-0 flex-nowrap\">\n          {/* Root Drive Link */}\n          <BreadcrumbItem>\n            <BreadcrumbLink\n              href=\"#\"\n              onClick={e => {\n                e.preventDefault()\n                onNavigate(null)\n              }}\n              className={`hover:text-primary flex items-center gap-2 whitespace-nowrap transition-colors ${!currentFolderId ? 'text-primary font-medium' : ''}`}\n            >\n              <Home className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"hidden sm:inline\">My Drive</span>\n              <span className=\"sm:hidden\">Drive</span>\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n\n          {/* Folder Breadcrumb Items */}\n          {breadcrumbItems.map((folder, index) => (\n            <Fragment key={`breadcrumb-${folder.id}-${index}`}>\n              <BreadcrumbSeparator>\n                <ChevronRight className=\"h-4 w-4\" />\n              </BreadcrumbSeparator>\n              <BreadcrumbItem>\n                {index === breadcrumbItems.length - 1 ? (\n                  <BreadcrumbPage className=\"flex max-w-[120px] items-center gap-2 whitespace-nowrap sm:max-w-[200px] md:max-w-none\">\n                    <Folder className=\"text-primary h-4 w-4 flex-shrink-0\" />\n                    <span className=\"text-primary truncate font-medium\">{folder.name}</span>\n                  </BreadcrumbPage>\n                ) : (\n                  <BreadcrumbLink\n                    href=\"#\"\n                    onClick={e => {\n                      e.preventDefault()\n                      // // // // // console.log('[Breadcrumb] Navigating to folder:', folder.name, 'ID:', folder.id)\n                      // // // // // console.log('[Breadcrumb] Full folder object:', folder)\n                      if (!folder.id) {\n                        // // // // // console.error('[Breadcrumb] ERROR: Folder ID is null/undefined!', folder)\n                        // // // // // console.error('[Breadcrumb] Cannot navigate without valid folder ID')\n                        return\n                      }\n                      onNavigate(folder.id)\n                    }}\n                    className=\"hover:text-primary flex max-w-[120px] items-center gap-2 whitespace-nowrap transition-colors sm:max-w-[200px] md:max-w-none\"\n                  >\n                    <Folder className=\"h-4 w-4 flex-shrink-0\" />\n                    <span className=\"truncate\">{folder.name}</span>\n                  </BreadcrumbLink>\n                )}\n              </BreadcrumbItem>\n            </Fragment>\n          ))}\n        </BreadcrumbList>\n      </Breadcrumb>\n\n      {/* Loading Indicator */}\n      {isLoading && (\n        <div className=\"text-muted-foreground ml-2 flex items-center gap-1\">\n          <Loader2 className=\"h-3 w-3 animate-spin\" />\n          <span className=\"hidden text-xs sm:inline\">Loading...</span>\n        </div>\n      )}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"text-destructive ml-2 flex items-center gap-1\">\n          <span className=\"text-xs\">{error}</span>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => currentFolderId && fetchFolderPath(currentFolderId)}\n            className=\"h-6 px-2 text-xs\"\n          >\n            Retry\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default FileBreadcrumb\n"],
      names: ["FileBreadcrumb", "currentFolderId", "onNavigate", "loading", "externalLoading", "breadcrumbItems", "setBreadcrumbItems", "useState", "setLoading", "error", "setError", "fetchFolderPath", "folderId", "response", "fetch", "method", "headers", "ok", "errorText", "text", "Error", "status", "folder", "json", "actualId", "id", "pathItems", "currentFolder", "visitedFolders", "Set", "push", "name", "add", "parents", "length", "parentId", "has", "parentResponse", "parentFolder", "actualParentId", "err", "reverse", "useEffect", "isLoading", "div", "className", "Breadcrumb", "BreadcrumbList", "BreadcrumbItem", "BreadcrumbLink", "href", "onClick", "e", "preventDefault", "Home", "span", "map", "index", "Fragment", "BreadcrumbSeparator", "ChevronRight", "BreadcrumbPage", "Folder", "Loader2", "Button", "variant", "size"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bedfeae64ab6cb5e3c335b6a3df91af18f7cbb64"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_d46q84749 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_d46q84749();
cov_d46q84749().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_d46q84749().f[0]++;
  cov_d46q84749().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_d46q84749().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_d46q84749().s[3]++;
_export(exports, {
  FileBreadcrumb: function () {
    /* istanbul ignore next */
    cov_d46q84749().f[1]++;
    cov_d46q84749().s[4]++;
    return FileBreadcrumb;
  },
  default: function () {
    /* istanbul ignore next */
    cov_d46q84749().f[2]++;
    cov_d46q84749().s[5]++;
    return _default;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_d46q84749().s[6]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_d46q84749().s[7]++, require("react"));
const _lucidereact =
/* istanbul ignore next */
(cov_d46q84749().s[8]++, require("lucide-react"));
const _breadcrumb =
/* istanbul ignore next */
(cov_d46q84749().s[9]++, require("../../../../../components/ui/breadcrumb"));
const _button =
/* istanbul ignore next */
(cov_d46q84749().s[10]++, require("../../../../../components/ui/button"));
function FileBreadcrumb({
  currentFolderId,
  onNavigate,
  loading: externalLoading
}) {
  /* istanbul ignore next */
  cov_d46q84749().f[3]++;
  const [breadcrumbItems, setBreadcrumbItems] =
  /* istanbul ignore next */
  (cov_d46q84749().s[11]++, (0, _react.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_d46q84749().s[12]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_d46q84749().s[13]++, (0, _react.useState)(null));
  /* istanbul ignore next */
  cov_d46q84749().s[14]++;
  const fetchFolderPath = async folderId => {
    /* istanbul ignore next */
    cov_d46q84749().f[4]++;
    cov_d46q84749().s[15]++;
    try {
      /* istanbul ignore next */
      cov_d46q84749().s[16]++;
      // // // // // console.log('[Breadcrumb] Starting fetchFolderPath for:', folderId)
      setLoading(true);
      /* istanbul ignore next */
      cov_d46q84749().s[17]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_d46q84749().s[18]++, await fetch(`/api/drive/files?fileId=${folderId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      }));
      // // // // // console.log('[Breadcrumb] API Response status:', response.status)
      // // // // // console.log('[Breadcrumb] API Response headers:', response.headers)
      /* istanbul ignore next */
      cov_d46q84749().s[19]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_d46q84749().b[0][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_d46q84749().s[20]++, await response.text());
        // // // // // console.error('[Breadcrumb] API Error response:', errorText)
        /* istanbul ignore next */
        cov_d46q84749().s[21]++;
        throw new Error(`Failed to fetch folder: ${response.status} - ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_d46q84749().b[0][1]++;
      }
      const folder =
      /* istanbul ignore next */
      (cov_d46q84749().s[22]++, await response.json());
      // // // // // console.log('[Breadcrumb] Initial folder data:', folder)
      // // // // // console.log('[Breadcrumb] Folder properties:', Object.keys(folder))
      // // // // // console.log('[Breadcrumb] Folder ID raw:', folder.id)
      // // // // // console.log('[Breadcrumb] Folder name:', folder.name)
      // // // // // console.log('[Breadcrumb] Folder parents:', folder.parents)
      // Use fileId if id is not available (common in Google Drive API responses)
      const actualId =
      /* istanbul ignore next */
      (cov_d46q84749().s[23]++,
      /* istanbul ignore next */
      (cov_d46q84749().b[1][0]++, folder.id) ||
      /* istanbul ignore next */
      (cov_d46q84749().b[1][1]++, folderId));
      // // // // // console.log('[Breadcrumb] Resolved folder ID:', actualId)
      // Validate folder data
      /* istanbul ignore next */
      cov_d46q84749().s[24]++;
      if (!actualId) {
        /* istanbul ignore next */
        cov_d46q84749().b[2][0]++;
        cov_d46q84749().s[25]++;
        // // // // // console.error('[Breadcrumb] ERROR: Folder missing ID property!', folder)
        throw new Error('Invalid folder data: missing ID');
      } else
      /* istanbul ignore next */
      {
        cov_d46q84749().b[2][1]++;
      }
      // Update folder object with correct ID
      cov_d46q84749().s[26]++;
      folder.id = actualId;
      const pathItems =
      /* istanbul ignore next */
      (cov_d46q84749().s[27]++, []);
      let currentFolder =
      /* istanbul ignore next */
      (cov_d46q84749().s[28]++, folder);
      const visitedFolders =
      /* istanbul ignore next */
      (cov_d46q84749().s[29]++, new Set());
      // Add current folder first
      // // // // // console.log('[Breadcrumb] Adding current folder - ID:', currentFolder.id, 'Name:', currentFolder.name)
      /* istanbul ignore next */
      cov_d46q84749().s[30]++;
      pathItems.push({
        id: currentFolder.id,
        name: currentFolder.name
      });
      /* istanbul ignore next */
      cov_d46q84749().s[31]++;
      visitedFolders.add(currentFolder.id);
      // Traverse up to root
      // // // // // console.log('[Breadcrumb] Starting parent traversal, current folder parents:', currentFolder.parents)
      /* istanbul ignore next */
      cov_d46q84749().s[32]++;
      while (
      /* istanbul ignore next */
      (cov_d46q84749().b[3][0]++, currentFolder.parents) &&
      /* istanbul ignore next */
      (cov_d46q84749().b[3][1]++, currentFolder.parents.length > 0) &&
      /* istanbul ignore next */
      (cov_d46q84749().b[3][2]++, currentFolder.parents[0] !== 'root')) {
        const parentId =
        /* istanbul ignore next */
        (cov_d46q84749().s[33]++, currentFolder.parents[0]);
        // // // // // console.log('[Breadcrumb] Processing parent ID:', parentId)
        // Prevent infinite loops
        /* istanbul ignore next */
        cov_d46q84749().s[34]++;
        if (visitedFolders.has(parentId)) {
          /* istanbul ignore next */
          cov_d46q84749().b[4][0]++;
          cov_d46q84749().s[35]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_d46q84749().b[4][1]++;
        }
        cov_d46q84749().s[36]++;
        try {
          // // // // // console.log('[Breadcrumb] Fetching parent with fileId:', parentId)
          const parentResponse =
          /* istanbul ignore next */
          (cov_d46q84749().s[37]++, await fetch(`/api/drive/files?fileId=${parentId}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json'
            }
          }));
          /* istanbul ignore next */
          cov_d46q84749().s[38]++;
          if (!parentResponse.ok) {
            /* istanbul ignore next */
            cov_d46q84749().b[5][0]++;
            cov_d46q84749().s[39]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_d46q84749().b[5][1]++;
          }
          const parentFolder =
          /* istanbul ignore next */
          (cov_d46q84749().s[40]++, await parentResponse.json());
          // // // // // console.log('[Breadcrumb] Parent folder data:', parentFolder)
          // // // // // console.log('[Breadcrumb] Parent folder properties:', Object.keys(parentFolder))
          // // // // // console.log('[Breadcrumb] Parent folder ID raw:', parentFolder.id)
          // // // // // console.log('[Breadcrumb] Parent folder name:', parentFolder.name)
          // Use fileId if id is not available
          const actualParentId =
          /* istanbul ignore next */
          (cov_d46q84749().s[41]++,
          /* istanbul ignore next */
          (cov_d46q84749().b[6][0]++, parentFolder.id) ||
          /* istanbul ignore next */
          (cov_d46q84749().b[6][1]++, parentId));
          // // // // // console.log('[Breadcrumb] Resolved parent folder ID:', actualParentId)
          // Validate parent folder data
          /* istanbul ignore next */
          cov_d46q84749().s[42]++;
          if (!actualParentId) {
            /* istanbul ignore next */
            cov_d46q84749().b[7][0]++;
            cov_d46q84749().s[43]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_d46q84749().b[7][1]++;
          }
          // Update parent folder object with correct ID
          cov_d46q84749().s[44]++;
          parentFolder.id = actualParentId;
          // // // // // console.log('[Breadcrumb] Adding parent folder - ID:', parentFolder.id, 'Name:', parentFolder.name)
          /* istanbul ignore next */
          cov_d46q84749().s[45]++;
          pathItems.push({
            id: parentFolder.id,
            name: parentFolder.name
          });
          /* istanbul ignore next */
          cov_d46q84749().s[46]++;
          visitedFolders.add(actualParentId);
          /* istanbul ignore next */
          cov_d46q84749().s[47]++;
          currentFolder = parentFolder;
          // // // // // console.log('[Breadcrumb] Next parent will be:', currentFolder.parents ? currentFolder.parents[0] : 'none')
        } catch (err) {
          /* istanbul ignore next */
          cov_d46q84749().s[48]++;
          break;
        }
      }
      // // // // // console.log('[Breadcrumb] Finished parent traversal, pathItems before reverse:', pathItems)
      // Reverse path items to show from root to current folder
      /* istanbul ignore next */
      cov_d46q84749().s[49]++;
      pathItems.reverse();
      // // // // // console.log('[Breadcrumb] Final items:', pathItems)
      /* istanbul ignore next */
      cov_d46q84749().s[50]++;
      setBreadcrumbItems(pathItems);
    } catch (error) {
      /* istanbul ignore next */
      cov_d46q84749().s[51]++;
      // Log error for debugging in development only
      // // // // // console.error(`Error fetching folder path: ${folderId}`, error)
      setError('Failed to load folder path');
      /* istanbul ignore next */
      cov_d46q84749().s[52]++;
      setBreadcrumbItems([]);
    } finally {
      /* istanbul ignore next */
      cov_d46q84749().s[53]++;
      setLoading(false);
    }
  };
  /* istanbul ignore next */
  cov_d46q84749().s[54]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_d46q84749().f[5]++;
    cov_d46q84749().s[55]++;
    if (currentFolderId) {
      /* istanbul ignore next */
      cov_d46q84749().b[8][0]++;
      cov_d46q84749().s[56]++;
      fetchFolderPath(currentFolderId);
    } else {
      /* istanbul ignore next */
      cov_d46q84749().b[8][1]++;
      cov_d46q84749().s[57]++;
      setBreadcrumbItems([]);
      /* istanbul ignore next */
      cov_d46q84749().s[58]++;
      setError(null);
    }
  }, [currentFolderId]);
  const isLoading =
  /* istanbul ignore next */
  (cov_d46q84749().s[59]++,
  /* istanbul ignore next */
  (cov_d46q84749().b[9][0]++, loading) ||
  /* istanbul ignore next */
  (cov_d46q84749().b[9][1]++, externalLoading));
  /* istanbul ignore next */
  cov_d46q84749().s[60]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: "bg-muted/30 flex items-center gap-2 overflow-x-auto rounded-lg border px-2 py-3",
    children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_breadcrumb.Breadcrumb, {
      children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_breadcrumb.BreadcrumbList, {
        className: "min-w-0 flex-nowrap",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_breadcrumb.BreadcrumbItem, {
          children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_breadcrumb.BreadcrumbLink, {
            href: "#",
            onClick: e => {
              /* istanbul ignore next */
              cov_d46q84749().f[6]++;
              cov_d46q84749().s[61]++;
              e.preventDefault();
              /* istanbul ignore next */
              cov_d46q84749().s[62]++;
              onNavigate(null);
            },
            className: `hover:text-primary flex items-center gap-2 whitespace-nowrap transition-colors ${!currentFolderId ?
            /* istanbul ignore next */
            (cov_d46q84749().b[10][0]++, 'text-primary font-medium') :
            /* istanbul ignore next */
            (cov_d46q84749().b[10][1]++, '')}`,
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Home, {
              className: "h-4 w-4 flex-shrink-0"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
              className: "hidden sm:inline",
              children: "My Drive"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
              className: "sm:hidden",
              children: "Drive"
            })]
          })
        }), breadcrumbItems.map((folder, index) => {
          /* istanbul ignore next */
          cov_d46q84749().f[7]++;
          cov_d46q84749().s[63]++;
          return /*#__PURE__*/(0, _jsxruntime.jsxs)(_react.Fragment, {
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_breadcrumb.BreadcrumbSeparator, {
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.ChevronRight, {
                className: "h-4 w-4"
              })
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_breadcrumb.BreadcrumbItem, {
              children: index === breadcrumbItems.length - 1 ?
              /* istanbul ignore next */
              (/*#__PURE__*/cov_d46q84749().b[11][0]++, (0, _jsxruntime.jsxs)(_breadcrumb.BreadcrumbPage, {
                className: "flex max-w-[120px] items-center gap-2 whitespace-nowrap sm:max-w-[200px] md:max-w-none",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Folder, {
                  className: "text-primary h-4 w-4 flex-shrink-0"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                  className: "text-primary truncate font-medium",
                  children: folder.name
                })]
              })) :
              /* istanbul ignore next */
              (/*#__PURE__*/cov_d46q84749().b[11][1]++, (0, _jsxruntime.jsxs)(_breadcrumb.BreadcrumbLink, {
                href: "#",
                onClick: e => {
                  /* istanbul ignore next */
                  cov_d46q84749().f[8]++;
                  cov_d46q84749().s[64]++;
                  e.preventDefault();
                  // // // // // console.log('[Breadcrumb] Navigating to folder:', folder.name, 'ID:', folder.id)
                  // // // // // console.log('[Breadcrumb] Full folder object:', folder)
                  /* istanbul ignore next */
                  cov_d46q84749().s[65]++;
                  if (!folder.id) {
                    /* istanbul ignore next */
                    cov_d46q84749().b[12][0]++;
                    cov_d46q84749().s[66]++;
                    // // // // // console.error('[Breadcrumb] ERROR: Folder ID is null/undefined!', folder)
                    // // // // // console.error('[Breadcrumb] Cannot navigate without valid folder ID')
                    return;
                  } else
                  /* istanbul ignore next */
                  {
                    cov_d46q84749().b[12][1]++;
                  }
                  cov_d46q84749().s[67]++;
                  onNavigate(folder.id);
                },
                className: "hover:text-primary flex max-w-[120px] items-center gap-2 whitespace-nowrap transition-colors sm:max-w-[200px] md:max-w-none",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Folder, {
                  className: "h-4 w-4 flex-shrink-0"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                  className: "truncate",
                  children: folder.name
                })]
              }))
            })]
          }, `breadcrumb-${folder.id}-${index}`);
        })]
      })
    }),
    /* istanbul ignore next */
    (cov_d46q84749().b[13][0]++, isLoading) &&
    /* istanbul ignore next */
    (cov_d46q84749().b[13][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "text-muted-foreground ml-2 flex items-center gap-1",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Loader2, {
        className: "h-3 w-3 animate-spin"
      }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
        className: "hidden text-xs sm:inline",
        children: "Loading..."
      })]
    })),
    /* istanbul ignore next */
    (cov_d46q84749().b[14][0]++, error) &&
    /* istanbul ignore next */
    (cov_d46q84749().b[14][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "text-destructive ml-2 flex items-center gap-1",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("span", {
        className: "text-xs",
        children: error
      }), /*#__PURE__*/(0, _jsxruntime.jsx)(_button.Button, {
        variant: "ghost",
        size: "sm",
        onClick: () => {
          /* istanbul ignore next */
          cov_d46q84749().f[9]++;
          cov_d46q84749().s[68]++;
          return /* istanbul ignore next */(cov_d46q84749().b[15][0]++, currentFolderId) &&
          /* istanbul ignore next */
          (cov_d46q84749().b[15][1]++, fetchFolderPath(currentFolderId));
        },
        className: "h-6 px-2 text-xs",
        children: "Retry"
      })]
    }))]
  });
}
const _default =
/* istanbul ignore next */
(cov_d46q84749().s[69]++, FileBreadcrumb);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,