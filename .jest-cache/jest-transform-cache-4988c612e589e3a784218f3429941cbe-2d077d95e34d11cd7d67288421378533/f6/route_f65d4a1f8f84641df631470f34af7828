1f43f0077042fecf2584a2a0740df22f
"use strict";

/* istanbul ignore next */
function cov_279p22t1jw() {
  var path = "/home/runner/workspace/src/app/api/drive/files/export/route.ts";
  var hash = "2f0f9649f62580449fc913e3dd8f22eeee13a843";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/files/export/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 66
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "9": {
        start: {
          line: 19,
          column: 29
        },
        end: {
          line: 19,
          column: 52
        }
      },
      "10": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "11": {
        start: {
          line: 22,
          column: 56
        },
        end: {
          line: 22,
          column: 60
        }
      },
      "12": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "13": {
        start: {
          line: 24,
          column: 70
        },
        end: {
          line: 24,
          column: 77
        }
      },
      "14": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 27,
          column: 57
        }
      },
      "15": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "16": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "17": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "18": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 25
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "20": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "21": {
        start: {
          line: 40,
          column: 33
        },
        end: {
          line: 43,
          column: 18
        }
      },
      "22": {
        start: {
          line: 44,
          column: 33
        },
        end: {
          line: 44,
          column: 50
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 69,
          column: 17
        }
      },
      "24": {
        start: {
          line: 47,
          column: 43
        },
        end: {
          line: 47,
          column: 84
        }
      },
      "25": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 70
        }
      },
      "26": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 57,
          column: 23
        }
      },
      "27": {
        start: {
          line: 60,
          column: 40
        },
        end: {
          line: 60,
          column: 94
        }
      },
      "28": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 68,
          column: 23
        }
      },
      "29": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "30": {
        start: {
          line: 78,
          column: 25
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "31": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "32": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 52
        }
      },
      "33": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 73
        }
      },
      "34": {
        start: {
          line: 103,
          column: 22
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "35": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 62
          },
          end: {
            line: 24,
            column: 63
          }
        },
        loc: {
          start: {
            line: 24,
            column: 70
          },
          end: {
            line: 24,
            column: 77
          }
        },
        line: 24
      },
      "3": {
        name: "isGoogleWorkspaceFile",
        decl: {
          start: {
            line: 97,
            column: 13
          },
          end: {
            line: 97,
            column: 34
          }
        },
        loc: {
          start: {
            line: 97,
            column: 45
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 97
      },
      "4": {
        name: "getExportMimeType",
        decl: {
          start: {
            line: 102,
            column: 13
          },
          end: {
            line: 102,
            column: 30
          }
        },
        loc: {
          start: {
            line: 102,
            column: 57
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 22,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 46
          },
          end: {
            line: 22,
            column: 51
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 52
          },
          end: {
            line: 24,
            column: 78
          }
        }, {
          start: {
            line: 24,
            column: 81
          },
          end: {
            line: 26,
            column: 9
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 29
          }
        }, {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 24,
            column: 49
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 27,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 27,
            column: 37
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 27,
            column: 57
          }
        }],
        line: 27
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 20
          }
        }, {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 28,
            column: 44
          }
        }],
        line: 28
      },
      "7": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 69,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 69,
            column: 17
          }
        }, {
          start: {
            line: 58,
            column: 23
          },
          end: {
            line: 69,
            column: 17
          }
        }],
        line: 46
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 40
          }
        }, {
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 69
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 36
          },
          end: {
            line: 82,
            column: 42
          }
        }, {
          start: {
            line: 82,
            column: 45
          },
          end: {
            line: 82,
            column: 53
          }
        }],
        line: 82
      },
      "10": {
        loc: {
          start: {
            line: 86,
            column: 20
          },
          end: {
            line: 86,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 40
          },
          end: {
            line: 86,
            column: 46
          }
        }, {
          start: {
            line: 86,
            column: 49
          },
          end: {
            line: 86,
            column: 58
          }
        }],
        line: 86
      },
      "11": {
        loc: {
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 89,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 89,
            column: 45
          }
        }, {
          start: {
            line: 89,
            column: 48
          },
          end: {
            line: 89,
            column: 51
          }
        }],
        line: 89
      },
      "12": {
        loc: {
          start: {
            line: 98,
            column: 11
          },
          end: {
            line: 98,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 11
          },
          end: {
            line: 98,
            column: 63
          }
        }, {
          start: {
            line: 98,
            column: 67
          },
          end: {
            line: 98,
            column: 72
          }
        }],
        line: 98
      },
      "13": {
        loc: {
          start: {
            line: 126,
            column: 11
          },
          end: {
            line: 126,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 11
          },
          end: {
            line: 126,
            column: 48
          }
        }, {
          start: {
            line: 126,
            column: 52
          },
          end: {
            line: 126,
            column: 69
          }
        }],
        line: 126
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/files/export/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const driveService = authResult.driveService!\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, items, exportFormat = 'pdf' } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        // Get file metadata to determine if export is needed\n        const metadata = await driveService.getFileMetadata(id, ['name', 'mimeType'])\n        const mimeType = metadata.mimeType\n\n        // Check if it's a Google Workspace file that can be exported\n        if (isGoogleWorkspaceFile(mimeType)) {\n          const exportMimeType = getExportMimeType(exportFormat, mimeType)\n          await driveService.exportFile(id, exportMimeType)\n\n          results.push({\n            fileId: id,\n            success: true,\n            exported: true,\n            originalMimeType: mimeType,\n            exportMimeType,\n            exportFormat,\n            fileName: metadata.name,\n          })\n        } else {\n          // Regular file - provide download URL\n          const downloadUrl = `https://drive.google.com/uc?export=download&id=${id}`\n          results.push({\n            fileId: id,\n            success: true,\n            exported: false,\n            downloadUrl,\n            fileName: metadata.name,\n            note: 'File is already in downloadable format',\n          })\n        }\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Export operation failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'export',\n      exportFormat,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n\n/**\n * Check if file is Google Workspace file that can be exported\n */\nfunction isGoogleWorkspaceFile(mimeType: string): boolean {\n  return mimeType?.startsWith('application/vnd.google-apps.') || false\n}\n\n/**\n * Get export MIME type based on format and original MIME type\n */\nfunction getExportMimeType(format: string, originalMimeType: string): string {\n  const formatMap: { [key: string]: { [key: string]: string } } = {\n    pdf: {\n      'application/vnd.google-apps.document': 'application/pdf',\n      'application/vnd.google-apps.spreadsheet': 'application/pdf',\n      'application/vnd.google-apps.presentation': 'application/pdf',\n      'application/vnd.google-apps.drawing': 'application/pdf',\n    },\n    docx: {\n      'application/vnd.google-apps.document': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    },\n    xlsx: {\n      'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    },\n    pptx: {\n      'application/vnd.google-apps.presentation':\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    },\n    png: {\n      'application/vnd.google-apps.drawing': 'image/png',\n    },\n    txt: {\n      'application/vnd.google-apps.document': 'text/plain',\n    },\n  }\n\n  return formatMap[format]?.[originalMimeType] || 'application/pdf'\n}\n"],
      names: ["POST", "request", "authResult", "initDriveService", "success", "response", "driveService", "body", "json", "fileId", "items", "exportFormat", "fileIds", "length", "map", "item", "id", "isBulkOperation", "NextResponse", "error", "status", "results", "errors", "metadata", "getFileMetadata", "mimeType", "isGoogleWorkspaceFile", "exportMimeType", "getExportMimeType", "exportFile", "push", "exported", "originalMimeType", "fileName", "name", "downloadUrl", "note", "message", "processed", "failed", "type", "operation", "undefined", "handleApiError", "startsWith", "format", "formatMap", "pdf", "docx", "xlsx", "pptx", "png", "txt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2f0f9649f62580449fc913e3dd8f22eeee13a843"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_279p22t1jw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_279p22t1jw();
cov_279p22t1jw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_279p22t1jw().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_279p22t1jw().f[0]++;
    cov_279p22t1jw().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_279p22t1jw().s[3]++, require("next/server"));
const _apiutils =
/* istanbul ignore next */
(cov_279p22t1jw().s[4]++, require("../../../../../lib/api-utils"));
async function POST(request) {
  /* istanbul ignore next */
  cov_279p22t1jw().f[1]++;
  cov_279p22t1jw().s[5]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[6]++, await (0, _apiutils.initDriveService)());
    /* istanbul ignore next */
    cov_279p22t1jw().s[7]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_279p22t1jw().b[0][0]++;
      cov_279p22t1jw().s[8]++;
      return authResult.response;
    } else
    /* istanbul ignore next */
    {
      cov_279p22t1jw().b[0][1]++;
    }
    const driveService =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[9]++, authResult.driveService);
    const body =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[10]++, await request.json());
    // Handle both single and bulk operations
    const {
      fileId,
      items,
      exportFormat =
      /* istanbul ignore next */
      (cov_279p22t1jw().b[1][0]++, 'pdf')
    } =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[11]++, body);
    // Determine operation type based on items array or single fileId
    const fileIds =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[12]++,
    /* istanbul ignore next */
    (cov_279p22t1jw().b[3][0]++, items) &&
    /* istanbul ignore next */
    (cov_279p22t1jw().b[3][1]++, items.length > 0) ?
    /* istanbul ignore next */
    (cov_279p22t1jw().b[2][0]++, items.map(item => {
      /* istanbul ignore next */
      cov_279p22t1jw().f[2]++;
      cov_279p22t1jw().s[13]++;
      return item.id;
    })) :
    /* istanbul ignore next */
    (cov_279p22t1jw().b[2][1]++, [fileId]));
    const isBulkOperation =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[14]++,
    /* istanbul ignore next */
    (cov_279p22t1jw().b[4][0]++, items) &&
    /* istanbul ignore next */
    (cov_279p22t1jw().b[4][1]++, items.length > 1));
    /* istanbul ignore next */
    cov_279p22t1jw().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_279p22t1jw().b[6][0]++, !fileIds) ||
    /* istanbul ignore next */
    (cov_279p22t1jw().b[6][1]++, fileIds.length === 0)) {
      /* istanbul ignore next */
      cov_279p22t1jw().b[5][0]++;
      cov_279p22t1jw().s[16]++;
      return _server.NextResponse.json({
        error: 'File IDs are required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_279p22t1jw().b[5][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[17]++, []);
    const errors =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[18]++, []);
    /* istanbul ignore next */
    cov_279p22t1jw().s[19]++;
    for (const id of fileIds) {
      /* istanbul ignore next */
      cov_279p22t1jw().s[20]++;
      try {
        // Get file metadata to determine if export is needed
        const metadata =
        /* istanbul ignore next */
        (cov_279p22t1jw().s[21]++, await driveService.getFileMetadata(id, ['name', 'mimeType']));
        const mimeType =
        /* istanbul ignore next */
        (cov_279p22t1jw().s[22]++, metadata.mimeType);
        // Check if it's a Google Workspace file that can be exported
        /* istanbul ignore next */
        cov_279p22t1jw().s[23]++;
        if (isGoogleWorkspaceFile(mimeType)) {
          /* istanbul ignore next */
          cov_279p22t1jw().b[7][0]++;
          const exportMimeType =
          /* istanbul ignore next */
          (cov_279p22t1jw().s[24]++, getExportMimeType(exportFormat, mimeType));
          /* istanbul ignore next */
          cov_279p22t1jw().s[25]++;
          await driveService.exportFile(id, exportMimeType);
          /* istanbul ignore next */
          cov_279p22t1jw().s[26]++;
          results.push({
            fileId: id,
            success: true,
            exported: true,
            originalMimeType: mimeType,
            exportMimeType,
            exportFormat,
            fileName: metadata.name
          });
        } else {
          /* istanbul ignore next */
          cov_279p22t1jw().b[7][1]++;
          // Regular file - provide download URL
          const downloadUrl =
          /* istanbul ignore next */
          (cov_279p22t1jw().s[27]++, `https://drive.google.com/uc?export=download&id=${id}`);
          /* istanbul ignore next */
          cov_279p22t1jw().s[28]++;
          results.push({
            fileId: id,
            success: true,
            exported: false,
            downloadUrl,
            fileName: metadata.name,
            note: 'File is already in downloadable format'
          });
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_279p22t1jw().s[29]++;
        errors.push({
          fileId: id,
          success: false,
          error:
          /* istanbul ignore next */
          (cov_279p22t1jw().b[8][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_279p22t1jw().b[8][1]++, 'Export operation failed')
        });
      }
    }
    const response =
    /* istanbul ignore next */
    (cov_279p22t1jw().s[30]++, {
      success: errors.length === 0,
      processed: results.length,
      failed: errors.length,
      type: isBulkOperation ?
      /* istanbul ignore next */
      (cov_279p22t1jw().b[9][0]++, 'bulk') :
      /* istanbul ignore next */
      (cov_279p22t1jw().b[9][1]++, 'single'),
      operation: 'export',
      exportFormat,
      results,
      errors: errors.length > 0 ?
      /* istanbul ignore next */
      (cov_279p22t1jw().b[10][0]++, errors) :
      /* istanbul ignore next */
      (cov_279p22t1jw().b[10][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_279p22t1jw().s[31]++;
    return _server.NextResponse.json(response, {
      status: errors.length === 0 ?
      /* istanbul ignore next */
      (cov_279p22t1jw().b[11][0]++, 200) :
      /* istanbul ignore next */
      (cov_279p22t1jw().b[11][1]++, 207)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_279p22t1jw().s[32]++;
    return (0, _apiutils.handleApiError)(error);
  }
}
/**
 * Check if file is Google Workspace file that can be exported
 */
function isGoogleWorkspaceFile(mimeType) {
  /* istanbul ignore next */
  cov_279p22t1jw().f[3]++;
  cov_279p22t1jw().s[33]++;
  return /* istanbul ignore next */(cov_279p22t1jw().b[12][0]++, mimeType?.startsWith('application/vnd.google-apps.')) ||
  /* istanbul ignore next */
  (cov_279p22t1jw().b[12][1]++, false);
}
/**
 * Get export MIME type based on format and original MIME type
 */
function getExportMimeType(format, originalMimeType) {
  /* istanbul ignore next */
  cov_279p22t1jw().f[4]++;
  const formatMap =
  /* istanbul ignore next */
  (cov_279p22t1jw().s[34]++, {
    pdf: {
      'application/vnd.google-apps.document': 'application/pdf',
      'application/vnd.google-apps.spreadsheet': 'application/pdf',
      'application/vnd.google-apps.presentation': 'application/pdf',
      'application/vnd.google-apps.drawing': 'application/pdf'
    },
    docx: {
      'application/vnd.google-apps.document': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    },
    xlsx: {
      'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    },
    pptx: {
      'application/vnd.google-apps.presentation': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
    },
    png: {
      'application/vnd.google-apps.drawing': 'image/png'
    },
    txt: {
      'application/vnd.google-apps.document': 'text/plain'
    }
  });
  /* istanbul ignore next */
  cov_279p22t1jw().s[35]++;
  return /* istanbul ignore next */(cov_279p22t1jw().b[13][0]++, formatMap[format]?.[originalMimeType]) ||
  /* istanbul ignore next */
  (cov_279p22t1jw().b[13][1]++, 'application/pdf');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,