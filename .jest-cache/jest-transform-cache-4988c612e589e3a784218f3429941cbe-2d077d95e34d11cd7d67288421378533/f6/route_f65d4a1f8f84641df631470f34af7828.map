{"version":3,"names":["cov_279p22t1jw","actualCoverage","s","POST","request","f","authResult","_apiutils","initDriveService","success","b","response","driveService","body","json","fileId","items","exportFormat","fileIds","length","map","item","id","isBulkOperation","_server","NextResponse","error","status","results","errors","metadata","getFileMetadata","mimeType","isGoogleWorkspaceFile","exportMimeType","getExportMimeType","exportFile","push","exported","originalMimeType","fileName","name","downloadUrl","note","message","processed","failed","type","operation","undefined","handleApiError","startsWith","format","formatMap","pdf","docx","xlsx","pptx","png","txt"],"sources":["/home/runner/workspace/src/app/api/drive/files/export/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const driveService = authResult.driveService!\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, items, exportFormat = 'pdf' } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        // Get file metadata to determine if export is needed\n        const metadata = await driveService.getFileMetadata(id, ['name', 'mimeType'])\n        const mimeType = metadata.mimeType\n\n        // Check if it's a Google Workspace file that can be exported\n        if (isGoogleWorkspaceFile(mimeType)) {\n          const exportMimeType = getExportMimeType(exportFormat, mimeType)\n          await driveService.exportFile(id, exportMimeType)\n\n          results.push({\n            fileId: id,\n            success: true,\n            exported: true,\n            originalMimeType: mimeType,\n            exportMimeType,\n            exportFormat,\n            fileName: metadata.name,\n          })\n        } else {\n          // Regular file - provide download URL\n          const downloadUrl = `https://drive.google.com/uc?export=download&id=${id}`\n          results.push({\n            fileId: id,\n            success: true,\n            exported: false,\n            downloadUrl,\n            fileName: metadata.name,\n            note: 'File is already in downloadable format',\n          })\n        }\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Export operation failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'export',\n      exportFormat,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n\n/**\n * Check if file is Google Workspace file that can be exported\n */\nfunction isGoogleWorkspaceFile(mimeType: string): boolean {\n  return mimeType?.startsWith('application/vnd.google-apps.') || false\n}\n\n/**\n * Get export MIME type based on format and original MIME type\n */\nfunction getExportMimeType(format: string, originalMimeType: string): string {\n  const formatMap: { [key: string]: { [key: string]: string } } = {\n    pdf: {\n      'application/vnd.google-apps.document': 'application/pdf',\n      'application/vnd.google-apps.spreadsheet': 'application/pdf',\n      'application/vnd.google-apps.presentation': 'application/pdf',\n      'application/vnd.google-apps.drawing': 'application/pdf',\n    },\n    docx: {\n      'application/vnd.google-apps.document': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    },\n    xlsx: {\n      'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    },\n    pptx: {\n      'application/vnd.google-apps.presentation':\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    },\n    png: {\n      'application/vnd.google-apps.drawing': 'image/png',\n    },\n    txt: {\n      'application/vnd.google-apps.document': 'text/plain',\n    },\n  }\n\n  return formatMap[format]?.[originalMimeType] || 'application/pdf'\n}\n"],"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","ignoreList":[]}