{"version":3,"sources":["/home/runner/workspace/src/app/api/drive/files/export/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, items, exportFormat = 'pdf' } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        // Get file metadata to determine if export is needed\n        const metadata = await driveService.getFileMetadata(id, ['name', 'mimeType'])\n        const mimeType = metadata.mimeType\n\n        // Check if it's a Google Workspace file that can be exported\n        if (isGoogleWorkspaceFile(mimeType)) {\n          const exportMimeType = getExportMimeType(exportFormat, mimeType)\n          const exportResult = await driveService.exportFile(id, exportMimeType)\n\n          results.push({\n            fileId: id,\n            success: true,\n            exported: true,\n            originalMimeType: mimeType,\n            exportMimeType,\n            exportFormat,\n            fileName: metadata.name,\n          })\n        } else {\n          // Regular file - provide download URL\n          const downloadUrl = `https://drive.google.com/uc?export=download&id=${id}`\n          results.push({\n            fileId: id,\n            success: true,\n            exported: false,\n            downloadUrl,\n            fileName: metadata.name,\n            note: 'File is already in downloadable format',\n          })\n        }\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Export operation failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'export',\n      exportFormat,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n\n/**\n * Check if file is Google Workspace file that can be exported\n */\nfunction isGoogleWorkspaceFile(mimeType: string): boolean {\n  return mimeType?.startsWith('application/vnd.google-apps.') || false\n}\n\n/**\n * Get export MIME type based on format and original MIME type\n */\nfunction getExportMimeType(format: string, originalMimeType: string): string {\n  const formatMap: { [key: string]: { [key: string]: string } } = {\n    pdf: {\n      'application/vnd.google-apps.document': 'application/pdf',\n      'application/vnd.google-apps.spreadsheet': 'application/pdf',\n      'application/vnd.google-apps.presentation': 'application/pdf',\n      'application/vnd.google-apps.drawing': 'application/pdf',\n    },\n    docx: {\n      'application/vnd.google-apps.document': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    },\n    xlsx: {\n      'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    },\n    pptx: {\n      'application/vnd.google-apps.presentation': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    },\n    png: {\n      'application/vnd.google-apps.drawing': 'image/png',\n    },\n    txt: {\n      'application/vnd.google-apps.document': 'text/plain',\n    },\n  }\n\n  return formatMap[format]?.[originalMimeType] || 'application/pdf'\n}\n"],"names":["POST","request","authResult","initDriveService","success","response","driveService","body","json","fileId","items","exportFormat","fileIds","length","map","item","id","isBulkOperation","NextResponse","error","status","results","errors","metadata","getFileMetadata","mimeType","isGoogleWorkspaceFile","exportMimeType","getExportMimeType","exportResult","exportFile","push","exported","originalMimeType","fileName","name","downloadUrl","note","message","processed","failed","type","operation","undefined","handleApiError","startsWith","format","formatMap","pdf","docx","xlsx","pptx","png","txt"],"mappings":"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"}