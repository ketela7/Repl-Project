a516a289ba767212c19a54c529781d38
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _apiutils = require("../../../../../lib/api-utils");
async function POST(request) {
    try {
        const authResult = await (0, _apiutils.initDriveService)();
        if (!authResult.success) {
            return authResult.response;
        }
        const { driveService } = authResult;
        const body = await request.json();
        // Handle both single and bulk operations
        const { fileId, items, exportFormat = 'pdf' } = body;
        // Determine operation type based on items array or single fileId
        const fileIds = items && items.length > 0 ? items.map((item)=>item.id) : [
            fileId
        ];
        const isBulkOperation = items && items.length > 1;
        if (!fileIds || fileIds.length === 0) {
            return _server.NextResponse.json({
                error: 'File IDs are required'
            }, {
                status: 400
            });
        }
        const results = [];
        const errors = [];
        for (const id of fileIds){
            try {
                // Get file metadata to determine if export is needed
                const metadata = await driveService.getFileMetadata(id, [
                    'name',
                    'mimeType'
                ]);
                const mimeType = metadata.mimeType;
                // Check if it's a Google Workspace file that can be exported
                if (isGoogleWorkspaceFile(mimeType)) {
                    const exportMimeType = getExportMimeType(exportFormat, mimeType);
                    const exportResult = await driveService.exportFile(id, exportMimeType);
                    results.push({
                        fileId: id,
                        success: true,
                        exported: true,
                        originalMimeType: mimeType,
                        exportMimeType,
                        exportFormat,
                        fileName: metadata.name
                    });
                } else {
                    // Regular file - provide download URL
                    const downloadUrl = `https://drive.google.com/uc?export=download&id=${id}`;
                    results.push({
                        fileId: id,
                        success: true,
                        exported: false,
                        downloadUrl,
                        fileName: metadata.name,
                        note: 'File is already in downloadable format'
                    });
                }
            } catch (error) {
                errors.push({
                    fileId: id,
                    success: false,
                    error: error.message || 'Export operation failed'
                });
            }
        }
        const response = {
            success: errors.length === 0,
            processed: results.length,
            failed: errors.length,
            type: isBulkOperation ? 'bulk' : 'single',
            operation: 'export',
            exportFormat,
            results,
            errors: errors.length > 0 ? errors : undefined
        };
        return _server.NextResponse.json(response, {
            status: errors.length === 0 ? 200 : 207
        });
    } catch (error) {
        return (0, _apiutils.handleApiError)(error);
    }
}
/**
 * Check if file is Google Workspace file that can be exported
 */ function isGoogleWorkspaceFile(mimeType) {
    return mimeType?.startsWith('application/vnd.google-apps.') || false;
}
/**
 * Get export MIME type based on format and original MIME type
 */ function getExportMimeType(format, originalMimeType) {
    const formatMap = {
        pdf: {
            'application/vnd.google-apps.document': 'application/pdf',
            'application/vnd.google-apps.spreadsheet': 'application/pdf',
            'application/vnd.google-apps.presentation': 'application/pdf',
            'application/vnd.google-apps.drawing': 'application/pdf'
        },
        docx: {
            'application/vnd.google-apps.document': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        },
        xlsx: {
            'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        },
        pptx: {
            'application/vnd.google-apps.presentation': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
        },
        png: {
            'application/vnd.google-apps.drawing': 'image/png'
        },
        txt: {
            'application/vnd.google-apps.document': 'text/plain'
        }
    };
    return formatMap[format]?.[originalMimeType] || 'application/pdf';
}

//# sourceMappingURL=data:application/json;base64,