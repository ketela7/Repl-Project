{"version":3,"sources":["/home/runner/workspace/src/lib/__tests__/enhanced-error-handler.test.ts"],"sourcesContent":["\nimport { enhancedErrorHandler, AppError, ErrorSeverity } from '../enhanced-error-handler'\n\ndescribe('Enhanced Error Handler', () => {\n  let consoleSpy: jest.SpyInstance\n\n  beforeEach(() => {\n    consoleSpy = jest.spyOn(console, 'error').mockImplementation()\n  })\n\n  afterEach(() => {\n    consoleSpy.mockRestore()\n  })\n\n  describe('AppError', () => {\n    it('should create AppError with default values', () => {\n      const error = new AppError('Test error')\n      \n      expect(error.message).toBe('Test error')\n      expect(error.statusCode).toBe(500)\n      expect(error.severity).toBe(ErrorSeverity.HIGH)\n      expect(error.isOperational).toBe(true)\n    })\n\n    it('should create AppError with custom values', () => {\n      const error = new AppError('Custom error', 400, ErrorSeverity.LOW, false)\n      \n      expect(error.message).toBe('Custom error')\n      expect(error.statusCode).toBe(400)\n      expect(error.severity).toBe(ErrorSeverity.LOW)\n      expect(error.isOperational).toBe(false)\n    })\n  })\n\n  describe('enhancedErrorHandler', () => {\n    it('should handle AppError correctly', () => {\n      const appError = new AppError('App error', 400, ErrorSeverity.MEDIUM)\n      const result = enhancedErrorHandler(appError)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('App error')\n      expect(result.statusCode).toBe(400)\n      expect(result.data).toBeNull()\n    })\n\n    it('should handle standard Error objects', () => {\n      const error = new Error('Standard error')\n      const result = enhancedErrorHandler(error)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('Standard error')\n      expect(result.statusCode).toBe(500)\n      expect(result.data).toBeNull()\n    })\n\n    it('should handle string errors', () => {\n      const result = enhancedErrorHandler('String error')\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('String error')\n      expect(result.statusCode).toBe(500)\n      expect(result.data).toBeNull()\n    })\n\n    it('should handle unknown error types', () => {\n      const result = enhancedErrorHandler({ unknown: 'object' })\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('An unknown error occurred')\n      expect(result.statusCode).toBe(500)\n      expect(result.data).toBeNull()\n    })\n\n    it('should log errors based on severity', () => {\n      const highSeverityError = new AppError('High severity', 500, ErrorSeverity.HIGH)\n      enhancedErrorHandler(highSeverityError)\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('[HIGH]'),\n        expect.stringContaining('High severity')\n      )\n    })\n  })\n})\n"],"names":["describe","consoleSpy","beforeEach","jest","spyOn","console","mockImplementation","afterEach","mockRestore","it","error","AppError","expect","message","toBe","statusCode","severity","ErrorSeverity","HIGH","isOperational","LOW","appError","MEDIUM","result","enhancedErrorHandler","success","data","toBeNull","Error","unknown","highSeverityError","toHaveBeenCalledWith","stringContaining"],"mappings":";;;;sCAC8D;AAE9DA,SAAS,0BAA0B;IACjC,IAAIC;IAEJC,WAAW;QACTD,aAAaE,KAAKC,KAAK,CAACC,SAAS,SAASC,kBAAkB;IAC9D;IAEAC,UAAU;QACRN,WAAWO,WAAW;IACxB;IAEAR,SAAS,YAAY;QACnBS,GAAG,8CAA8C;YAC/C,MAAMC,QAAQ,IAAIC,8BAAQ,CAAC;YAE3BC,OAAOF,MAAMG,OAAO,EAAEC,IAAI,CAAC;YAC3BF,OAAOF,MAAMK,UAAU,EAAED,IAAI,CAAC;YAC9BF,OAAOF,MAAMM,QAAQ,EAAEF,IAAI,CAACG,mCAAa,CAACC,IAAI;YAC9CN,OAAOF,MAAMS,aAAa,EAAEL,IAAI,CAAC;QACnC;QAEAL,GAAG,6CAA6C;YAC9C,MAAMC,QAAQ,IAAIC,8BAAQ,CAAC,gBAAgB,KAAKM,mCAAa,CAACG,GAAG,EAAE;YAEnER,OAAOF,MAAMG,OAAO,EAAEC,IAAI,CAAC;YAC3BF,OAAOF,MAAMK,UAAU,EAAED,IAAI,CAAC;YAC9BF,OAAOF,MAAMM,QAAQ,EAAEF,IAAI,CAACG,mCAAa,CAACG,GAAG;YAC7CR,OAAOF,MAAMS,aAAa,EAAEL,IAAI,CAAC;QACnC;IACF;IAEAd,SAAS,wBAAwB;QAC/BS,GAAG,oCAAoC;YACrC,MAAMY,WAAW,IAAIV,8BAAQ,CAAC,aAAa,KAAKM,mCAAa,CAACK,MAAM;YACpE,MAAMC,SAASC,IAAAA,0CAAoB,EAACH;YAEpCT,OAAOW,OAAOE,OAAO,EAAEX,IAAI,CAAC;YAC5BF,OAAOW,OAAOb,KAAK,EAAEI,IAAI,CAAC;YAC1BF,OAAOW,OAAOR,UAAU,EAAED,IAAI,CAAC;YAC/BF,OAAOW,OAAOG,IAAI,EAAEC,QAAQ;QAC9B;QAEAlB,GAAG,wCAAwC;YACzC,MAAMC,QAAQ,IAAIkB,MAAM;YACxB,MAAML,SAASC,IAAAA,0CAAoB,EAACd;YAEpCE,OAAOW,OAAOE,OAAO,EAAEX,IAAI,CAAC;YAC5BF,OAAOW,OAAOb,KAAK,EAAEI,IAAI,CAAC;YAC1BF,OAAOW,OAAOR,UAAU,EAAED,IAAI,CAAC;YAC/BF,OAAOW,OAAOG,IAAI,EAAEC,QAAQ;QAC9B;QAEAlB,GAAG,+BAA+B;YAChC,MAAMc,SAASC,IAAAA,0CAAoB,EAAC;YAEpCZ,OAAOW,OAAOE,OAAO,EAAEX,IAAI,CAAC;YAC5BF,OAAOW,OAAOb,KAAK,EAAEI,IAAI,CAAC;YAC1BF,OAAOW,OAAOR,UAAU,EAAED,IAAI,CAAC;YAC/BF,OAAOW,OAAOG,IAAI,EAAEC,QAAQ;QAC9B;QAEAlB,GAAG,qCAAqC;YACtC,MAAMc,SAASC,IAAAA,0CAAoB,EAAC;gBAAEK,SAAS;YAAS;YAExDjB,OAAOW,OAAOE,OAAO,EAAEX,IAAI,CAAC;YAC5BF,OAAOW,OAAOb,KAAK,EAAEI,IAAI,CAAC;YAC1BF,OAAOW,OAAOR,UAAU,EAAED,IAAI,CAAC;YAC/BF,OAAOW,OAAOG,IAAI,EAAEC,QAAQ;QAC9B;QAEAlB,GAAG,uCAAuC;YACxC,MAAMqB,oBAAoB,IAAInB,8BAAQ,CAAC,iBAAiB,KAAKM,mCAAa,CAACC,IAAI;YAC/EM,IAAAA,0CAAoB,EAACM;YAErBlB,OAAOX,YAAY8B,oBAAoB,CACrCnB,OAAOoB,gBAAgB,CAAC,WACxBpB,OAAOoB,gBAAgB,CAAC;QAE5B;IACF;AACF"}