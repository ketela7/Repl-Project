035e66199a7fc2df8bcdcd198a2ec0ad
/**
 * Test utilities for React Testing Library and Jest
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "render", {
    enumerable: true,
    get: function() {
        return customRender;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _react2 = require("next-auth/react");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock session for testing
const mockSession = {
    user: {
        id: 'test-user-id',
        email: 'test@example.com',
        name: 'Test User'
    },
    accessToken: 'mock-access-token',
    refreshToken: 'mock-refresh-token',
    expires: '2025-12-31T23:59:59.999Z'
};
const AllTheProviders = ({ children })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react2.SessionProvider, {
        session: mockSession,
        children: children
    });
};
const customRender = (ui, options)=>(0, _react1.render)(ui, {
        wrapper: AllTheProviders,
        ...options
    });
// Add dummy test to prevent "no tests" error
describe('Test Utils', ()=>{
    it('exports custom render function', ()=>{
        expect(customRender).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvX190ZXN0c19fL3Rlc3QtdXRpbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdCB1dGlsaXRpZXMgZm9yIFJlYWN0IFRlc3RpbmcgTGlicmFyeSBhbmQgSmVzdFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciwgUmVuZGVyT3B0aW9ucyB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyBTZXNzaW9uUHJvdmlkZXIgfSBmcm9tICduZXh0LWF1dGgvcmVhY3QnXG5cbi8vIE1vY2sgc2Vzc2lvbiBmb3IgdGVzdGluZ1xuY29uc3QgbW9ja1Nlc3Npb24gPSB7XG4gIHVzZXI6IHtcbiAgICBpZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgfSxcbiAgYWNjZXNzVG9rZW46ICdtb2NrLWFjY2Vzcy10b2tlbicsXG4gIHJlZnJlc2hUb2tlbjogJ21vY2stcmVmcmVzaC10b2tlbicsXG4gIGV4cGlyZXM6ICcyMDI1LTEyLTMxVDIzOjU5OjU5Ljk5OVonLFxufVxuXG5jb25zdCBBbGxUaGVQcm92aWRlcnMgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4ge1xuICByZXR1cm4gPFNlc3Npb25Qcm92aWRlciBzZXNzaW9uPXttb2NrU2Vzc2lvbn0+e2NoaWxkcmVufTwvU2Vzc2lvblByb3ZpZGVyPlxufVxuXG5jb25zdCBjdXN0b21SZW5kZXIgPSAodWk6IFJlYWN0RWxlbWVudCwgb3B0aW9ucz86IE9taXQ8UmVuZGVyT3B0aW9ucywgJ3dyYXBwZXInPikgPT4gcmVuZGVyKHVpLCB7IHdyYXBwZXI6IEFsbFRoZVByb3ZpZGVycywgLi4ub3B0aW9ucyB9KVxuXG5leHBvcnQgKiBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuZXhwb3J0IHsgY3VzdG9tUmVuZGVyIGFzIHJlbmRlciB9XG5cbi8vIEFkZCBkdW1teSB0ZXN0IHRvIHByZXZlbnQgXCJubyB0ZXN0c1wiIGVycm9yXG5kZXNjcmliZSgnVGVzdCBVdGlscycsICgpID0+IHtcbiAgaXQoJ2V4cG9ydHMgY3VzdG9tIHJlbmRlciBmdW5jdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoY3VzdG9tUmVuZGVyKS50b0JlRGVmaW5lZCgpXG4gIH0pXG59KVxuIl0sIm5hbWVzIjpbInJlbmRlciIsImN1c3RvbVJlbmRlciIsIm1vY2tTZXNzaW9uIiwidXNlciIsImlkIiwiZW1haWwiLCJuYW1lIiwiYWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJleHBpcmVzIiwiQWxsVGhlUHJvdmlkZXJzIiwiY2hpbGRyZW4iLCJTZXNzaW9uUHJvdmlkZXIiLCJzZXNzaW9uIiwidWkiLCJvcHRpb25zIiwid3JhcHBlciIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7K0JBeUJ3QkE7OztlQUFoQkM7Ozs7OERBdkIyQjtxQ0FDRTt3QkFDTjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVoQywyQkFBMkI7QUFDM0IsTUFBTUMsY0FBYztJQUNsQkMsTUFBTTtRQUNKQyxJQUFJO1FBQ0pDLE9BQU87UUFDUEMsTUFBTTtJQUNSO0lBQ0FDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxTQUFTO0FBQ1g7QUFFQSxNQUFNQyxrQkFBa0IsQ0FBQyxFQUFFQyxRQUFRLEVBQWlDO0lBQ2xFLHFCQUFPLHFCQUFDQyx1QkFBZTtRQUFDQyxTQUFTWDtrQkFBY1M7O0FBQ2pEO0FBRUEsTUFBTVYsZUFBZSxDQUFDYSxJQUFrQkMsVUFBNkNmLElBQUFBLGNBQU0sRUFBQ2MsSUFBSTtRQUFFRSxTQUFTTjtRQUFpQixHQUFHSyxPQUFPO0lBQUM7QUFLdkksNkNBQTZDO0FBQzdDRSxTQUFTLGNBQWM7SUFDckJDLEdBQUcsa0NBQWtDO1FBQ25DQyxPQUFPbEIsY0FBY21CLFdBQVc7SUFDbEM7QUFDRiJ9