4ee4996d32733e968773bc437d4f479c
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GoogleAuthButton", {
    enumerable: true,
    get: function() {
        return GoogleAuthButton;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _react1 = require("next-auth/react");
const _button = require("../ui/button");
const _utils = require("../../lib/utils");
function GoogleAuthButton({ className, onClick }) {
    const [loading, setLoading] = (0, _react.useState)(false);
    const handleGoogleSignIn = async ()=>{
        const loadingId = 'google-signin';
        try {
            setLoading(true);
            _utils.loadingToast.start('Connecting to Google...', loadingId);
            // Call external onClick handler first (for localStorage storage)
            if (onClick) {
                onClick();
            }
            await (0, _react1.signIn)('google', {
                callbackUrl: '/dashboard/drive'
            });
            // Note: Success toast will be shown after redirect in the dashboard
            _utils.loadingToast.dismiss(loadingId);
        } catch (error) {
            _utils.loadingToast.error('Failed to sign in with Google', loadingId);
            _utils.errorToast.generic('Sign in failed', {
                description: 'Please try again or check your connection',
                duration: 5000
            });
        } finally{
            setLoading(false);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
        onClick: handleGoogleSignIn,
        disabled: loading,
        variant: "outline",
        className: (0, _utils.cn)('relative', className),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("svg", {
                className: "mr-2 h-4 w-4",
                viewBox: "0 0 24 24",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                        fill: "currentColor",
                        d: "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                        fill: "currentColor",
                        d: "M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                        fill: "currentColor",
                        d: "M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                        fill: "currentColor",
                        d: "M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    })
                ]
            }),
            loading ? 'Signing in...' : 'Sign in with Google'
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2NvbXBvbmVudHMvYXV0aC9nb29nbGUtYXV0aC1idXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgc2lnbkluIH0gZnJvbSAnbmV4dC1hdXRoL3JlYWN0J1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJ1xuaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscydcbmltcG9ydCB7IGVycm9yVG9hc3QsIGxvYWRpbmdUb2FzdCB9IGZyb20gJ0AvbGliL3V0aWxzJ1xuXG5pbnRlcmZhY2UgR29vZ2xlQXV0aEJ1dHRvblByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHb29nbGVBdXRoQnV0dG9uKHsgY2xhc3NOYW1lLCBvbkNsaWNrIH06IEdvb2dsZUF1dGhCdXR0b25Qcm9wcykge1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcblxuICBjb25zdCBoYW5kbGVHb29nbGVTaWduSW4gPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbG9hZGluZ0lkID0gJ2dvb2dsZS1zaWduaW4nXG5cbiAgICB0cnkge1xuICAgICAgc2V0TG9hZGluZyh0cnVlKVxuICAgICAgbG9hZGluZ1RvYXN0LnN0YXJ0KCdDb25uZWN0aW5nIHRvIEdvb2dsZS4uLicsIGxvYWRpbmdJZClcblxuICAgICAgLy8gQ2FsbCBleHRlcm5hbCBvbkNsaWNrIGhhbmRsZXIgZmlyc3QgKGZvciBsb2NhbFN0b3JhZ2Ugc3RvcmFnZSlcbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soKVxuICAgICAgfVxuXG4gICAgICBhd2FpdCBzaWduSW4oJ2dvb2dsZScsIHtcbiAgICAgICAgY2FsbGJhY2tVcmw6ICcvZGFzaGJvYXJkL2RyaXZlJyxcbiAgICAgIH0pXG5cbiAgICAgIC8vIE5vdGU6IFN1Y2Nlc3MgdG9hc3Qgd2lsbCBiZSBzaG93biBhZnRlciByZWRpcmVjdCBpbiB0aGUgZGFzaGJvYXJkXG4gICAgICBsb2FkaW5nVG9hc3QuZGlzbWlzcyhsb2FkaW5nSWQpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvYWRpbmdUb2FzdC5lcnJvcignRmFpbGVkIHRvIHNpZ24gaW4gd2l0aCBHb29nbGUnLCBsb2FkaW5nSWQpXG4gICAgICBlcnJvclRvYXN0LmdlbmVyaWMoJ1NpZ24gaW4gZmFpbGVkJywge1xuICAgICAgICBkZXNjcmlwdGlvbjogJ1BsZWFzZSB0cnkgYWdhaW4gb3IgY2hlY2sgeW91ciBjb25uZWN0aW9uJyxcbiAgICAgICAgZHVyYXRpb246IDUwMDAsXG4gICAgICB9KVxuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVHb29nbGVTaWduSW59IGRpc2FibGVkPXtsb2FkaW5nfSB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT17Y24oJ3JlbGF0aXZlJywgY2xhc3NOYW1lKX0+XG4gICAgICA8c3ZnIGNsYXNzTmFtZT1cIm1yLTIgaC00IHctNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICBkPVwiTTIyLjU2IDEyLjI1YzAtLjc4LS4wNy0xLjUzLS4yLTIuMjVIMTJ2NC4yNmg1LjkyYy0uMjYgMS4zNy0xLjA0IDIuNTMtMi4yMSAzLjMxdjIuNzdoMy41N2MyLjA4LTEuOTIgMy4yOC00Ljc0IDMuMjgtOC4wOXpcIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgIGQ9XCJNMTIgMjNjMi45NyAwIDUuNDYtLjk4IDcuMjgtMi42NmwtMy41Ny0yLjc3Yy0uOTguNjYtMi4yMyAxLjA2LTMuNzEgMS4wNi0yLjg2IDAtNS4yOS0xLjkzLTYuMTYtNC41M0gyLjE4djIuODRDMy45OSAyMC41MyA3LjcgMjMgMTIgMjN6XCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICBkPVwiTTUuODQgMTQuMDljLS4yMi0uNjYtLjM1LTEuMzYtLjM1LTIuMDlzLjEzLTEuNDMuMzUtMi4wOVY3LjA3SDIuMThDMS40MyA4LjU1IDEgMTAuMjIgMSAxMnMuNDMgMy40NSAxLjE4IDQuOTNsMi44NS0yLjIyLjgxLS42MnpcIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgIGQ9XCJNMTIgNS4zOGMxLjYyIDAgMy4wNi41NiA0LjIxIDEuNjRsMy4xNS0zLjE1QzE3LjQ1IDIuMDkgMTQuOTcgMSAxMiAxIDcuNyAxIDMuOTkgMy40NyAyLjE4IDcuMDdsMy42NiAyLjg0Yy44Ny0yLjYgMy4zLTQuNTMgNi4xNi00LjUzelwiXG4gICAgICAgIC8+XG4gICAgICA8L3N2Zz5cbiAgICAgIHtsb2FkaW5nID8gJ1NpZ25pbmcgaW4uLi4nIDogJ1NpZ24gaW4gd2l0aCBHb29nbGUnfVxuICAgIDwvQnV0dG9uPlxuICApXG59XG4iXSwibmFtZXMiOlsiR29vZ2xlQXV0aEJ1dHRvbiIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsInVzZVN0YXRlIiwiaGFuZGxlR29vZ2xlU2lnbkluIiwibG9hZGluZ0lkIiwibG9hZGluZ1RvYXN0Iiwic3RhcnQiLCJzaWduSW4iLCJjYWxsYmFja1VybCIsImRpc21pc3MiLCJlcnJvciIsImVycm9yVG9hc3QiLCJnZW5lcmljIiwiZGVzY3JpcHRpb24iLCJkdXJhdGlvbiIsIkJ1dHRvbiIsImRpc2FibGVkIiwidmFyaWFudCIsImNuIiwic3ZnIiwidmlld0JveCIsInBhdGgiLCJmaWxsIiwiZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OytCQWNnQkE7OztlQUFBQTs7Ozt1QkFaUzt3QkFDRjt3QkFFQTt1QkFDSjtBQVFaLFNBQVNBLGlCQUFpQixFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBeUI7SUFDNUUsTUFBTSxDQUFDQyxTQUFTQyxXQUFXLEdBQUdDLElBQUFBLGVBQVEsRUFBQztJQUV2QyxNQUFNQyxxQkFBcUI7UUFDekIsTUFBTUMsWUFBWTtRQUVsQixJQUFJO1lBQ0ZILFdBQVc7WUFDWEksbUJBQVksQ0FBQ0MsS0FBSyxDQUFDLDJCQUEyQkY7WUFFOUMsaUVBQWlFO1lBQ2pFLElBQUlMLFNBQVM7Z0JBQ1hBO1lBQ0Y7WUFFQSxNQUFNUSxJQUFBQSxjQUFNLEVBQUMsVUFBVTtnQkFDckJDLGFBQWE7WUFDZjtZQUVBLG9FQUFvRTtZQUNwRUgsbUJBQVksQ0FBQ0ksT0FBTyxDQUFDTDtRQUN2QixFQUFFLE9BQU9NLE9BQU87WUFDZEwsbUJBQVksQ0FBQ0ssS0FBSyxDQUFDLGlDQUFpQ047WUFDcERPLGlCQUFVLENBQUNDLE9BQU8sQ0FBQyxrQkFBa0I7Z0JBQ25DQyxhQUFhO2dCQUNiQyxVQUFVO1lBQ1o7UUFDRixTQUFVO1lBQ1JiLFdBQVc7UUFDYjtJQUNGO0lBRUEscUJBQ0Usc0JBQUNjLGNBQU07UUFBQ2hCLFNBQVNJO1FBQW9CYSxVQUFVaEI7UUFBU2lCLFNBQVE7UUFBVW5CLFdBQVdvQixJQUFBQSxTQUFFLEVBQUMsWUFBWXBCOzswQkFDbEcsc0JBQUNxQjtnQkFBSXJCLFdBQVU7Z0JBQWVzQixTQUFROztrQ0FDcEMscUJBQUNDO3dCQUNDQyxNQUFLO3dCQUNMQyxHQUFFOztrQ0FFSixxQkFBQ0Y7d0JBQ0NDLE1BQUs7d0JBQ0xDLEdBQUU7O2tDQUVKLHFCQUFDRjt3QkFDQ0MsTUFBSzt3QkFDTEMsR0FBRTs7a0NBRUoscUJBQUNGO3dCQUNDQyxNQUFLO3dCQUNMQyxHQUFFOzs7O1lBR0x2QixVQUFVLGtCQUFrQjs7O0FBR25DIn0=