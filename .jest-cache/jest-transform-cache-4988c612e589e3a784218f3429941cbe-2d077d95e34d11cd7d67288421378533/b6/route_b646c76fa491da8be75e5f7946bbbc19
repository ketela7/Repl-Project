e93095368e4e6a5b93ef55dc4c31fb9b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _apiutils = require("../../../../../lib/api-utils");
async function POST(request) {
    try {
        const authResult = await (0, _apiutils.initDriveService)();
        if (!authResult.success) {
            return authResult.response;
        }
        const { driveService } = authResult;
        const body = await request.json();
        // Handle both single and bulk operations
        const { fileId, targetFolderId, namePrefix, items } = body;
        // Determine operation type based on items array or single fileId
        const fileIds = items && items.length > 0 ? items.map((item)=>item.id) : [
            fileId
        ];
        const isBulkOperation = items && items.length > 1;
        if (!fileIds || fileIds.length === 0) {
            return _server.NextResponse.json({
                error: 'File IDs are required'
            }, {
                status: 400
            });
        }
        const results = [];
        const errors = [];
        for (const id of fileIds){
            try {
                let copyName = undefined;
                // For bulk operations with name prefix
                if (isBulkOperation && namePrefix) {
                    const originalItem = items.find((item)=>item.id === id);
                    copyName = `${namePrefix} ${originalItem?.name || 'Copy'}`;
                }
                const result = await driveService.copyFile(id, targetFolderId);
                results.push({
                    fileId: id,
                    success: true,
                    result
                });
            } catch (error) {
                errors.push({
                    fileId: id,
                    success: false,
                    error: error.message || 'Copy failed'
                });
            }
        }
        const response = {
            success: errors.length === 0,
            processed: results.length,
            failed: errors.length,
            type: isBulkOperation ? 'bulk' : 'single',
            operation: 'copy',
            targetFolderId,
            namePrefix,
            results,
            errors: errors.length > 0 ? errors : undefined
        };
        return _server.NextResponse.json(response, {
            status: errors.length === 0 ? 200 : 207
        });
    } catch (error) {
        return (0, _apiutils.handleApiError)(error);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvZHJpdmUvZmlsZXMvY29weS9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbmltcG9ydCB7IGluaXREcml2ZVNlcnZpY2UsIGhhbmRsZUFwaUVycm9yIH0gZnJvbSAnQC9saWIvYXBpLXV0aWxzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSBhd2FpdCBpbml0RHJpdmVTZXJ2aWNlKClcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIGF1dGhSZXN1bHQucmVzcG9uc2UhXG4gICAgfVxuXG4gICAgY29uc3QgeyBkcml2ZVNlcnZpY2UgfSA9IGF1dGhSZXN1bHRcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKClcblxuICAgIC8vIEhhbmRsZSBib3RoIHNpbmdsZSBhbmQgYnVsayBvcGVyYXRpb25zXG4gICAgY29uc3QgeyBmaWxlSWQsIHRhcmdldEZvbGRlcklkLCBuYW1lUHJlZml4LCBpdGVtcyB9ID0gYm9keVxuXG4gICAgLy8gRGV0ZXJtaW5lIG9wZXJhdGlvbiB0eXBlIGJhc2VkIG9uIGl0ZW1zIGFycmF5IG9yIHNpbmdsZSBmaWxlSWRcbiAgICBjb25zdCBmaWxlSWRzID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zLm1hcCgoaXRlbTogYW55KSA9PiBpdGVtLmlkKSA6IFtmaWxlSWRdXG4gICAgY29uc3QgaXNCdWxrT3BlcmF0aW9uID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMVxuXG4gICAgaWYgKCFmaWxlSWRzIHx8IGZpbGVJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZpbGUgSURzIGFyZSByZXF1aXJlZCcgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXVxuICAgIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IGlkIG9mIGZpbGVJZHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjb3B5TmFtZSA9IHVuZGVmaW5lZFxuXG4gICAgICAgIC8vIEZvciBidWxrIG9wZXJhdGlvbnMgd2l0aCBuYW1lIHByZWZpeFxuICAgICAgICBpZiAoaXNCdWxrT3BlcmF0aW9uICYmIG5hbWVQcmVmaXgpIHtcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbEl0ZW0gPSBpdGVtcy5maW5kKChpdGVtOiBhbnkpID0+IGl0ZW0uaWQgPT09IGlkKVxuICAgICAgICAgIGNvcHlOYW1lID0gYCR7bmFtZVByZWZpeH0gJHtvcmlnaW5hbEl0ZW0/Lm5hbWUgfHwgJ0NvcHknfWBcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRyaXZlU2VydmljZS5jb3B5RmlsZShpZCwgdGFyZ2V0Rm9sZGVySWQpXG4gICAgICAgIHJlc3VsdHMucHVzaCh7IGZpbGVJZDogaWQsIHN1Y2Nlc3M6IHRydWUsIHJlc3VsdCB9KVxuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgZmlsZUlkOiBpZCxcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnQ29weSBmYWlsZWQnLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgc3VjY2VzczogZXJyb3JzLmxlbmd0aCA9PT0gMCxcbiAgICAgIHByb2Nlc3NlZDogcmVzdWx0cy5sZW5ndGgsXG4gICAgICBmYWlsZWQ6IGVycm9ycy5sZW5ndGgsXG4gICAgICB0eXBlOiBpc0J1bGtPcGVyYXRpb24gPyAnYnVsaycgOiAnc2luZ2xlJyxcbiAgICAgIG9wZXJhdGlvbjogJ2NvcHknLFxuICAgICAgdGFyZ2V0Rm9sZGVySWQsXG4gICAgICBuYW1lUHJlZml4LFxuICAgICAgcmVzdWx0cyxcbiAgICAgIGVycm9yczogZXJyb3JzLmxlbmd0aCA+IDAgPyBlcnJvcnMgOiB1bmRlZmluZWQsXG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlLCB7XG4gICAgICBzdGF0dXM6IGVycm9ycy5sZW5ndGggPT09IDAgPyAyMDAgOiAyMDcsXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiBoYW5kbGVBcGlFcnJvcihlcnJvcilcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlBPU1QiLCJyZXF1ZXN0IiwiYXV0aFJlc3VsdCIsImluaXREcml2ZVNlcnZpY2UiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJkcml2ZVNlcnZpY2UiLCJib2R5IiwianNvbiIsImZpbGVJZCIsInRhcmdldEZvbGRlcklkIiwibmFtZVByZWZpeCIsIml0ZW1zIiwiZmlsZUlkcyIsImxlbmd0aCIsIm1hcCIsIml0ZW0iLCJpZCIsImlzQnVsa09wZXJhdGlvbiIsIk5leHRSZXNwb25zZSIsImVycm9yIiwic3RhdHVzIiwicmVzdWx0cyIsImVycm9ycyIsImNvcHlOYW1lIiwidW5kZWZpbmVkIiwib3JpZ2luYWxJdGVtIiwiZmluZCIsIm5hbWUiLCJyZXN1bHQiLCJjb3B5RmlsZSIsInB1c2giLCJtZXNzYWdlIiwicHJvY2Vzc2VkIiwiZmFpbGVkIiwidHlwZSIsIm9wZXJhdGlvbiIsImhhbmRsZUFwaUVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OytCQUlzQkE7OztlQUFBQTs7O3dCQUpvQjswQkFFTztBQUUxQyxlQUFlQSxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTUMsYUFBYSxNQUFNQyxJQUFBQSwwQkFBZ0I7UUFDekMsSUFBSSxDQUFDRCxXQUFXRSxPQUFPLEVBQUU7WUFDdkIsT0FBT0YsV0FBV0csUUFBUTtRQUM1QjtRQUVBLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUdKO1FBQ3pCLE1BQU1LLE9BQU8sTUFBTU4sUUFBUU8sSUFBSTtRQUUvQix5Q0FBeUM7UUFDekMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUUsR0FBR0w7UUFFdEQsaUVBQWlFO1FBQ2pFLE1BQU1NLFVBQVVELFNBQVNBLE1BQU1FLE1BQU0sR0FBRyxJQUFJRixNQUFNRyxHQUFHLENBQUMsQ0FBQ0MsT0FBY0EsS0FBS0MsRUFBRSxJQUFJO1lBQUNSO1NBQU87UUFDeEYsTUFBTVMsa0JBQWtCTixTQUFTQSxNQUFNRSxNQUFNLEdBQUc7UUFFaEQsSUFBSSxDQUFDRCxXQUFXQSxRQUFRQyxNQUFNLEtBQUssR0FBRztZQUNwQyxPQUFPSyxvQkFBWSxDQUFDWCxJQUFJLENBQUM7Z0JBQUVZLE9BQU87WUFBd0IsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQzdFO1FBRUEsTUFBTUMsVUFBVSxFQUFFO1FBQ2xCLE1BQU1DLFNBQVMsRUFBRTtRQUVqQixLQUFLLE1BQU1OLE1BQU1KLFFBQVM7WUFDeEIsSUFBSTtnQkFDRixJQUFJVyxXQUFXQztnQkFFZix1Q0FBdUM7Z0JBQ3ZDLElBQUlQLG1CQUFtQlAsWUFBWTtvQkFDakMsTUFBTWUsZUFBZWQsTUFBTWUsSUFBSSxDQUFDLENBQUNYLE9BQWNBLEtBQUtDLEVBQUUsS0FBS0E7b0JBQzNETyxXQUFXLEdBQUdiLFdBQVcsQ0FBQyxFQUFFZSxjQUFjRSxRQUFRLFFBQVE7Z0JBQzVEO2dCQUVBLE1BQU1DLFNBQVMsTUFBTXZCLGFBQWF3QixRQUFRLENBQUNiLElBQUlQO2dCQUMvQ1ksUUFBUVMsSUFBSSxDQUFDO29CQUFFdEIsUUFBUVE7b0JBQUliLFNBQVM7b0JBQU15QjtnQkFBTztZQUNuRCxFQUFFLE9BQU9ULE9BQVk7Z0JBQ25CRyxPQUFPUSxJQUFJLENBQUM7b0JBQ1Z0QixRQUFRUTtvQkFDUmIsU0FBUztvQkFDVGdCLE9BQU9BLE1BQU1ZLE9BQU8sSUFBSTtnQkFDMUI7WUFDRjtRQUNGO1FBRUEsTUFBTTNCLFdBQVc7WUFDZkQsU0FBU21CLE9BQU9ULE1BQU0sS0FBSztZQUMzQm1CLFdBQVdYLFFBQVFSLE1BQU07WUFDekJvQixRQUFRWCxPQUFPVCxNQUFNO1lBQ3JCcUIsTUFBTWpCLGtCQUFrQixTQUFTO1lBQ2pDa0IsV0FBVztZQUNYMUI7WUFDQUM7WUFDQVc7WUFDQUMsUUFBUUEsT0FBT1QsTUFBTSxHQUFHLElBQUlTLFNBQVNFO1FBQ3ZDO1FBRUEsT0FBT04sb0JBQVksQ0FBQ1gsSUFBSSxDQUFDSCxVQUFVO1lBQ2pDZ0IsUUFBUUUsT0FBT1QsTUFBTSxLQUFLLElBQUksTUFBTTtRQUN0QztJQUNGLEVBQUUsT0FBT00sT0FBWTtRQUNuQixPQUFPaUIsSUFBQUEsd0JBQWMsRUFBQ2pCO0lBQ3hCO0FBQ0YifQ==