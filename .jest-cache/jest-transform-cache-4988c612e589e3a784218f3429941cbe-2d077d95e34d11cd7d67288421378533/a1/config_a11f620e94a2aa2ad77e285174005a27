783bfbba5f1b13f10999540724ec2e90
"use strict";

/* istanbul ignore next */
function cov_2gelcdxzqp() {
  var path = "/home/runner/workspace/src/lib/google-drive/config.ts";
  var hash = "f7c070f4afd1d6098e1d3e90d6da84ceaf73f375";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/lib/google-drive/config.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "6": {
        start: {
          line: 16,
          column: 17
        },
        end: {
          line: 16,
          column: 53
        }
      },
      "7": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 20,
          column: 7
        }
      },
      "8": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 44,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "createDriveClient",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 40
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/lib/google-drive/config.ts"],
      sourcesContent: ["import { google } from 'googleapis'\n\nexport function createDriveClient(accessToken: string) {\n  if (!accessToken) {\n    throw new Error('Access token is required for Google Drive API')\n  }\n\n  const auth = new google.auth.OAuth2()\n  auth.setCredentials({\n    access_token: accessToken.trim(),\n    token_type: 'Bearer',\n  })\n\n  return google.drive({\n    version: 'v3',\n    auth,\n    timeout: 30000, // 30 second timeout\n    retry: true,\n    retryConfig: {\n      retry: 3,\n      retryDelay: 1000,\n      statusCodesToRetry: [\n        [100, 199],\n        [429, 429],\n        [500, 599],\n      ],\n    },\n  })\n}\n"],
      names: ["createDriveClient", "accessToken", "Error", "auth", "google", "OAuth2", "setCredentials", "access_token", "trim", "token_type", "drive", "version", "timeout", "retry", "retryConfig", "retryDelay", "statusCodesToRetry"],
      mappings: ";;;;+BAEgBA;;;eAAAA;;;4BAFO;AAEhB,SAASA,kBAAkBC,WAAmB;IACnD,IAAI,CAACA,aAAa;QAChB,MAAM,IAAIC,MAAM;IAClB;IAEA,MAAMC,OAAO,IAAIC,kBAAM,CAACD,IAAI,CAACE,MAAM;IACnCF,KAAKG,cAAc,CAAC;QAClBC,cAAcN,YAAYO,IAAI;QAC9BC,YAAY;IACd;IAEA,OAAOL,kBAAM,CAACM,KAAK,CAAC;QAClBC,SAAS;QACTR;QACAS,SAAS;QACTC,OAAO;QACPC,aAAa;YACXD,OAAO;YACPE,YAAY;YACZC,oBAAoB;gBAClB;oBAAC;oBAAK;iBAAI;gBACV;oBAAC;oBAAK;iBAAI;gBACV;oBAAC;oBAAK;iBAAI;aACX;QACH;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f7c070f4afd1d6098e1d3e90d6da84ceaf73f375"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gelcdxzqp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gelcdxzqp();
cov_2gelcdxzqp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2gelcdxzqp().s[1]++;
Object.defineProperty(exports, "createDriveClient", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2gelcdxzqp().f[0]++;
    cov_2gelcdxzqp().s[2]++;
    return createDriveClient;
  }
});
const _googleapis =
/* istanbul ignore next */
(cov_2gelcdxzqp().s[3]++, require("googleapis"));
function createDriveClient(accessToken) {
  /* istanbul ignore next */
  cov_2gelcdxzqp().f[1]++;
  cov_2gelcdxzqp().s[4]++;
  if (!accessToken) {
    /* istanbul ignore next */
    cov_2gelcdxzqp().b[0][0]++;
    cov_2gelcdxzqp().s[5]++;
    throw new Error('Access token is required for Google Drive API');
  } else
  /* istanbul ignore next */
  {
    cov_2gelcdxzqp().b[0][1]++;
  }
  const auth =
  /* istanbul ignore next */
  (cov_2gelcdxzqp().s[6]++, new _googleapis.google.auth.OAuth2());
  /* istanbul ignore next */
  cov_2gelcdxzqp().s[7]++;
  auth.setCredentials({
    access_token: accessToken.trim(),
    token_type: 'Bearer'
  });
  /* istanbul ignore next */
  cov_2gelcdxzqp().s[8]++;
  return _googleapis.google.drive({
    version: 'v3',
    auth,
    timeout: 30000,
    retry: true,
    retryConfig: {
      retry: 3,
      retryDelay: 1000,
      statusCodesToRetry: [[100, 199], [429, 429], [500, 599]]
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmdlbGNkeHpxcCIsImFjdHVhbENvdmVyYWdlIiwicyIsImNyZWF0ZURyaXZlQ2xpZW50IiwiYWNjZXNzVG9rZW4iLCJmIiwiYiIsIkVycm9yIiwiYXV0aCIsIl9nb29nbGVhcGlzIiwiZ29vZ2xlIiwiT0F1dGgyIiwic2V0Q3JlZGVudGlhbHMiLCJhY2Nlc3NfdG9rZW4iLCJ0cmltIiwidG9rZW5fdHlwZSIsImRyaXZlIiwidmVyc2lvbiIsInRpbWVvdXQiLCJyZXRyeSIsInJldHJ5Q29uZmlnIiwicmV0cnlEZWxheSIsInN0YXR1c0NvZGVzVG9SZXRyeSJdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2xpYi9nb29nbGUtZHJpdmUvY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdvb2dsZSB9IGZyb20gJ2dvb2dsZWFwaXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEcml2ZUNsaWVudChhY2Nlc3NUb2tlbjogc3RyaW5nKSB7XG4gIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY2VzcyB0b2tlbiBpcyByZXF1aXJlZCBmb3IgR29vZ2xlIERyaXZlIEFQSScpXG4gIH1cblxuICBjb25zdCBhdXRoID0gbmV3IGdvb2dsZS5hdXRoLk9BdXRoMigpXG4gIGF1dGguc2V0Q3JlZGVudGlhbHMoe1xuICAgIGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4udHJpbSgpLFxuICAgIHRva2VuX3R5cGU6ICdCZWFyZXInLFxuICB9KVxuXG4gIHJldHVybiBnb29nbGUuZHJpdmUoe1xuICAgIHZlcnNpb246ICd2MycsXG4gICAgYXV0aCxcbiAgICB0aW1lb3V0OiAzMDAwMCwgLy8gMzAgc2Vjb25kIHRpbWVvdXRcbiAgICByZXRyeTogdHJ1ZSxcbiAgICByZXRyeUNvbmZpZzoge1xuICAgICAgcmV0cnk6IDMsXG4gICAgICByZXRyeURlbGF5OiAxMDAwLFxuICAgICAgc3RhdHVzQ29kZXNUb1JldHJ5OiBbXG4gICAgICAgIFsxMDAsIDE5OV0sXG4gICAgICAgIFs0MjksIDQyOV0sXG4gICAgICAgIFs1MDAsIDU5OV0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0pXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBT1E7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFMUTs7Ozs7O1dBQUFDLGlCQUFBOzs7OztrQ0FGTztBQUVoQixTQUFTQSxrQkFBa0JDLFdBQW1CO0VBQUE7RUFBQUosY0FBQSxHQUFBSyxDQUFBO0VBQUFMLGNBQUEsR0FBQUUsQ0FBQTtFQUNuRCxJQUFJLENBQUNFLFdBQUEsRUFBYTtJQUFBO0lBQUFKLGNBQUEsR0FBQU0sQ0FBQTtJQUFBTixjQUFBLEdBQUFFLENBQUE7SUFDaEIsTUFBTSxJQUFJSyxLQUFBLENBQU07RUFDbEI7RUFBQTtFQUFBO0lBQUFQLGNBQUEsR0FBQU0sQ0FBQTtFQUFBO0VBRUEsTUFBTUUsSUFBQTtFQUFBO0VBQUEsQ0FBQVIsY0FBQSxHQUFBRSxDQUFBLE9BQU8sSUFBSU8sV0FBQSxDQUFBQyxNQUFNLENBQUNGLElBQUksQ0FBQ0csTUFBTTtFQUFBO0VBQUFYLGNBQUEsR0FBQUUsQ0FBQTtFQUNuQ00sSUFBQSxDQUFLSSxjQUFjLENBQUM7SUFDbEJDLFlBQUEsRUFBY1QsV0FBQSxDQUFZVSxJQUFJO0lBQzlCQyxVQUFBLEVBQVk7RUFDZDtFQUFBO0VBQUFmLGNBQUEsR0FBQUUsQ0FBQTtFQUVBLE9BQU9PLFdBQUEsQ0FBQUMsTUFBTSxDQUFDTSxLQUFLLENBQUM7SUFDbEJDLE9BQUEsRUFBUztJQUNUVCxJQUFBO0lBQ0FVLE9BQUEsRUFBUztJQUNUQyxLQUFBLEVBQU87SUFDUEMsV0FBQSxFQUFhO01BQ1hELEtBQUEsRUFBTztNQUNQRSxVQUFBLEVBQVk7TUFDWkMsa0JBQUEsRUFBb0IsQ0FDbEIsQ0FBQyxLQUFLLElBQUksRUFDVixDQUFDLEtBQUssSUFBSSxFQUNWLENBQUMsS0FBSyxJQUFJO0lBRWQ7RUFDRjtBQUNGIiwiaWdub3JlTGlzdCI6W119