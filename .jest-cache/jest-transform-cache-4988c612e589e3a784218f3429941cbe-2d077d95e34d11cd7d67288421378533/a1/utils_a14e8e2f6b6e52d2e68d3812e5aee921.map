{"version":3,"sources":["/home/runner/workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { toast } from 'sonner'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function successToast(message: string, description?: string) {\n  toast.success(message, {\n    description,\n    duration: 4000,\n  })\n}\n\nexport function errorToast(message: string, description?: string) {\n  toast.error(message, {\n    description,\n    duration: 6000,\n  })\n}\n\nexport function loadingToast(message: string, description?: string) {\n  return toast.loading(message, {\n    description,\n  })\n}\n\n// Extended toast utility functions\nloadingToast.start = (message: string, id?: string) => {\n  return toast.loading(message, { id })\n}\n\nloadingToast.success = (message: string, id?: string) => {\n  toast.success(message, { id })\n}\n\nloadingToast.error = (message: string, id?: string) => {\n  toast.error(message, { id })\n}\n\nloadingToast.dismiss = (id?: string) => {\n  toast.dismiss(id)\n}\n\nsuccessToast.generic = (message: string, options?: any) => {\n  toast.success(message, options)\n}\n\nsuccessToast.shared = (count: number) => {\n  toast.success(`Successfully shared ${count} item${count > 1 ? 's' : ''}`)\n}\n\nerrorToast.generic = (message: string, options?: any) => {\n  toast.error(message, options)\n}\n\nerrorToast.apiError = (message: string, details?: string) => {\n  toast.error(message, { description: details })\n}\n\nerrorToast.driveAccessDenied = () => {\n  toast.error('Google Drive access denied', {\n    description: 'Please reconnect your Google Drive account',\n  })\n}\n\nerrorToast.permissionDenied = () => {\n  toast.error('Permission denied', {\n    description: 'You do not have permission to perform this action',\n  })\n}\n\nexport function infoToast(message: string, description?: string) {\n  toast.info(message, {\n    description,\n    duration: 4000,\n  })\n}\n\nexport function formatFileTime(dateString: string, timezone?: string): string {\n  try {\n    const date = new Date(dateString)\n    if (isNaN(date.getTime())) return 'Invalid date'\n\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: timezone || 'UTC',\n    }).format(date)\n  } catch {\n    return 'Invalid date'\n  }\n}\n\nexport function formatCreationTime(dateString: string, timezone?: string): string {\n  return formatFileTime(dateString, timezone)\n}\n\nexport function getInitials(name: string): string {\n  return name\n    .split(' ')\n    .map((word) => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n}\n\nexport const toastUtils = {\n  success: successToast,\n  error: errorToast,\n  loading: loadingToast,\n  info: infoToast,\n}\n"],"names":["cn","errorToast","formatCreationTime","formatFileTime","getInitials","infoToast","loadingToast","successToast","toastUtils","inputs","twMerge","clsx","message","description","toast","success","duration","error","loading","start","id","dismiss","generic","options","shared","count","apiError","details","driveAccessDenied","permissionDenied","info","dateString","timezone","date","Date","isNaN","getTime","Intl","DateTimeFormat","year","month","day","hour","minute","timeZone","format","name","split","map","word","charAt","join","toUpperCase","slice"],"mappings":"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"}