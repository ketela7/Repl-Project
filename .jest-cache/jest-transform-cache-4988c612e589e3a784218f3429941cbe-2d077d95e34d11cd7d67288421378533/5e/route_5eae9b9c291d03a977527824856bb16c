23df9bfd59b5d938b1440b0c7a0f1e3e
"use strict";

/* istanbul ignore next */
function cov_1v39hx2ey1() {
  var path = "/home/runner/workspace/src/app/api/auth/google/route.ts";
  var hash = "e1ee74a3c67f20eb12740621e30f067f279cd938";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/auth/google/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 18,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/auth/google/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server'\n\nexport async function POST() {\n  // This route is deprecated - NextAuth handles OAuth automatically\n  return NextResponse.json({ error: 'Use NextAuth signin instead' }, { status: 400 })\n}\n"],
      names: ["POST", "NextResponse", "json", "error", "status"],
      mappings: ";;;;+BAEsBA;;;eAAAA;;;wBAFO;AAEtB,eAAeA;IACpB,kEAAkE;IAClE,OAAOC,oBAAY,CAACC,IAAI,CAAC;QAAEC,OAAO;IAA8B,GAAG;QAAEC,QAAQ;IAAI;AACnF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e1ee74a3c67f20eb12740621e30f067f279cd938"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v39hx2ey1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v39hx2ey1();
cov_1v39hx2ey1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1v39hx2ey1().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1v39hx2ey1().f[0]++;
    cov_1v39hx2ey1().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1v39hx2ey1().s[3]++, require("next/server"));
async function POST() {
  /* istanbul ignore next */
  cov_1v39hx2ey1().f[1]++;
  cov_1v39hx2ey1().s[4]++;
  // This route is deprecated - NextAuth handles OAuth automatically
  return _server.NextResponse.json({
    error: 'Use NextAuth signin instead'
  }, {
    status: 400
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXYzOWh4MmV5MSIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJmIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyJdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvYXV0aC9nb29nbGUvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKCkge1xuICAvLyBUaGlzIHJvdXRlIGlzIGRlcHJlY2F0ZWQgLSBOZXh0QXV0aCBoYW5kbGVzIE9BdXRoIGF1dG9tYXRpY2FsbHlcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVc2UgTmV4dEF1dGggc2lnbmluIGluc3RlYWQnIH0sIHsgc3RhdHVzOiA0MDAgfSlcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBSXFFO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7K0JBRi9DOzs7Ozs7V0FBQUMsSUFBQTs7Ozs7a0NBRk87QUFFdEIsZUFBZUEsS0FBQTtFQUFBO0VBQUFILGNBQUEsR0FBQUksQ0FBQTtFQUFBSixjQUFBLEdBQUFFLENBQUE7RUFDcEI7RUFDQSxPQUFPRyxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO0lBQUVDLEtBQUEsRUFBTztFQUE4QixHQUFHO0lBQUVDLE1BQUEsRUFBUTtFQUFJO0FBQ25GIiwiaWdub3JlTGlzdCI6W119