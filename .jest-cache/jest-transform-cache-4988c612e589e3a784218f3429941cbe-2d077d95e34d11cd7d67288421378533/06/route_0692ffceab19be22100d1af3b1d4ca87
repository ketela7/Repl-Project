ca9069280b4a0f116023acfbffdd0a87
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _apiutils = require("../../../../../lib/api-utils");
async function POST(request) {
    try {
        const authResult = await (0, _apiutils.initDriveService)();
        if (!authResult.success) {
            return authResult.response;
        }
        const { driveService } = authResult;
        const body = await request.json();
        // Get fileId from body
        const { fileId } = body;
        if (!fileId) {
            return _server.NextResponse.json({
                error: 'File ID is required'
            }, {
                status: 400
            });
        }
        // Get extended file metadata for detailed view
        const extendedFields = [
            'permissions',
            'owners',
            'lastModifyingUser',
            'sharingUser',
            'viewedByMe',
            'viewedByMeTime',
            'version',
            'webViewLink',
            'webContentLink',
            'iconLink',
            'thumbnailLink',
            'hasThumbnail',
            'imageMediaMetadata',
            'videoMediaMetadata',
            'contentHints',
            'properties',
            'appProperties'
        ];
        const fileMetadata = await driveService.getFileMetadata(fileId, extendedFields);
        return _server.NextResponse.json({
            success: true,
            fileMetadata,
            operation: 'extended'
        });
    } catch (error) {
        return (0, _apiutils.handleApiError)(error);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvZHJpdmUvZmlsZXMvZXh0ZW5kZWQvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuXG5pbXBvcnQgeyBpbml0RHJpdmVTZXJ2aWNlLCBoYW5kbGVBcGlFcnJvciB9IGZyb20gJ0AvbGliL2FwaS11dGlscydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gYXdhaXQgaW5pdERyaXZlU2VydmljZSgpXG4gICAgaWYgKCFhdXRoUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiBhdXRoUmVzdWx0LnJlc3BvbnNlIVxuICAgIH1cblxuICAgIGNvbnN0IHsgZHJpdmVTZXJ2aWNlIH0gPSBhdXRoUmVzdWx0XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG5cbiAgICAvLyBHZXQgZmlsZUlkIGZyb20gYm9keVxuICAgIGNvbnN0IHsgZmlsZUlkIH0gPSBib2R5XG5cbiAgICBpZiAoIWZpbGVJZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdGaWxlIElEIGlzIHJlcXVpcmVkJyB9LCB7IHN0YXR1czogNDAwIH0pXG4gICAgfVxuXG4gICAgLy8gR2V0IGV4dGVuZGVkIGZpbGUgbWV0YWRhdGEgZm9yIGRldGFpbGVkIHZpZXdcbiAgICBjb25zdCBleHRlbmRlZEZpZWxkcyA9IFtcbiAgICAgICdwZXJtaXNzaW9ucycsXG4gICAgICAnb3duZXJzJyxcbiAgICAgICdsYXN0TW9kaWZ5aW5nVXNlcicsXG4gICAgICAnc2hhcmluZ1VzZXInLFxuICAgICAgJ3ZpZXdlZEJ5TWUnLFxuICAgICAgJ3ZpZXdlZEJ5TWVUaW1lJyxcbiAgICAgICd2ZXJzaW9uJyxcbiAgICAgICd3ZWJWaWV3TGluaycsXG4gICAgICAnd2ViQ29udGVudExpbmsnLFxuICAgICAgJ2ljb25MaW5rJyxcbiAgICAgICd0aHVtYm5haWxMaW5rJyxcbiAgICAgICdoYXNUaHVtYm5haWwnLFxuICAgICAgJ2ltYWdlTWVkaWFNZXRhZGF0YScsXG4gICAgICAndmlkZW9NZWRpYU1ldGFkYXRhJyxcbiAgICAgICdjb250ZW50SGludHMnLFxuICAgICAgJ3Byb3BlcnRpZXMnLFxuICAgICAgJ2FwcFByb3BlcnRpZXMnLFxuICAgIF1cblxuICAgIGNvbnN0IGZpbGVNZXRhZGF0YSA9IGF3YWl0IGRyaXZlU2VydmljZS5nZXRGaWxlTWV0YWRhdGEoZmlsZUlkLCBleHRlbmRlZEZpZWxkcylcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZmlsZU1ldGFkYXRhLFxuICAgICAgb3BlcmF0aW9uOiAnZXh0ZW5kZWQnLFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4gaGFuZGxlQXBpRXJyb3IoZXJyb3IpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJQT1NUIiwicmVxdWVzdCIsImF1dGhSZXN1bHQiLCJpbml0RHJpdmVTZXJ2aWNlIiwic3VjY2VzcyIsInJlc3BvbnNlIiwiZHJpdmVTZXJ2aWNlIiwiYm9keSIsImpzb24iLCJmaWxlSWQiLCJOZXh0UmVzcG9uc2UiLCJlcnJvciIsInN0YXR1cyIsImV4dGVuZGVkRmllbGRzIiwiZmlsZU1ldGFkYXRhIiwiZ2V0RmlsZU1ldGFkYXRhIiwib3BlcmF0aW9uIiwiaGFuZGxlQXBpRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7K0JBSXNCQTs7O2VBQUFBOzs7d0JBSm9COzBCQUVPO0FBRTFDLGVBQWVBLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNQyxhQUFhLE1BQU1DLElBQUFBLDBCQUFnQjtRQUN6QyxJQUFJLENBQUNELFdBQVdFLE9BQU8sRUFBRTtZQUN2QixPQUFPRixXQUFXRyxRQUFRO1FBQzVCO1FBRUEsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBR0o7UUFDekIsTUFBTUssT0FBTyxNQUFNTixRQUFRTyxJQUFJO1FBRS9CLHVCQUF1QjtRQUN2QixNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHRjtRQUVuQixJQUFJLENBQUNFLFFBQVE7WUFDWCxPQUFPQyxvQkFBWSxDQUFDRixJQUFJLENBQUM7Z0JBQUVHLE9BQU87WUFBc0IsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQzNFO1FBRUEsK0NBQStDO1FBQy9DLE1BQU1DLGlCQUFpQjtZQUNyQjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFFRCxNQUFNQyxlQUFlLE1BQU1SLGFBQWFTLGVBQWUsQ0FBQ04sUUFBUUk7UUFFaEUsT0FBT0gsb0JBQVksQ0FBQ0YsSUFBSSxDQUFDO1lBQ3ZCSixTQUFTO1lBQ1RVO1lBQ0FFLFdBQVc7UUFDYjtJQUNGLEVBQUUsT0FBT0wsT0FBWTtRQUNuQixPQUFPTSxJQUFBQSx3QkFBYyxFQUFDTjtJQUN4QjtBQUNGIn0=