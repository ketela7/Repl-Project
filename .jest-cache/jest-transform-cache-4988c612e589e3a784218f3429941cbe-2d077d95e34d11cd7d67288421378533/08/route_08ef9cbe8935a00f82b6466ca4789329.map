{"version":3,"names":["cov_22zrvzgts1","actualCoverage","s","GET","request","f","session","_auth","auth","accessToken","b","_server","NextResponse","json","error","status","searchParams","URL","url","strategy","get","drive","_config","createDriveClient","analyzer","_storage","StorageAnalyzer","startTime","Date","now","analytics","getAnalytics","totalTime","processing","processingTimeMs","success","data","meta","performanceMs","accuracy","estimatedAccuracy","apiCallsUsed","totalApiCalls","timestamp","toISOString","console","code","details","message"],"sources":["/home/runner/workspace/src/app/api/drive/storage/comprehensive/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport { createDriveClient } from '@/lib/google-drive/config'\nimport { StorageAnalyzer } from '@/lib/google-drive/storage'\n\n/**\n * Enhanced Storage Analytics API with complete pagination support\n * GET /api/drive/storage/comprehensive?strategy=progressive\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth()\n\n    if (!session?.accessToken) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })\n    }\n\n    // Get strategy from query parameters\n    const { searchParams } = new URL(request.url)\n    const strategy = (searchParams.get('strategy') as 'fast' | 'complete' | 'progressive') || 'progressive'\n\n    // Create Drive client and analyzer\n    const drive = createDriveClient(session.accessToken)\n    const analyzer = new StorageAnalyzer(drive)\n\n    // Get analytics\n    const startTime = Date.now()\n    const analytics = await analyzer.getAnalytics(strategy)\n    const totalTime = Date.now() - startTime\n\n    // Add performance metrics\n    analytics.processing.processingTimeMs = totalTime\n\n    return NextResponse.json({\n      success: true,\n      data: analytics,\n      meta: {\n        strategy,\n        performanceMs: totalTime,\n        accuracy: analytics.processing.estimatedAccuracy,\n        apiCallsUsed: analytics.processing.totalApiCalls,\n        timestamp: new Date().toISOString(),\n      },\n    })\n  } catch (error: any) {\n    console.error('Comprehensive storage analytics error:', error)\n\n    // Handle specific Google API errors\n    if (error.code === 401 || error.status === 401) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })\n    }\n\n    if (error.code === 403 || error.status === 403) {\n      return NextResponse.json(\n        {\n          error: 'Insufficient permissions',\n          details: 'This application needs full Google Drive access to analyze storage',\n        },\n        { status: 403 },\n      )\n    }\n\n    if (error.code === 429 || error.status === 429) {\n      return NextResponse.json(\n        {\n          error: 'Rate limit exceeded',\n          details: 'Too many requests. Please try again in a few minutes.',\n        },\n        { status: 429 },\n      )\n    }\n\n    return NextResponse.json(\n      {\n        error: 'Failed to analyze storage',\n        details: error.message || 'Unknown error occurred',\n      },\n      { status: 500 },\n    )\n  }\n}\n"],"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","ignoreList":[]}