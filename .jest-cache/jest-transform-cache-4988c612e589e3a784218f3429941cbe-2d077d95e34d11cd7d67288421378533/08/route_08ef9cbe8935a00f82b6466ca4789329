f2a659acde33767abc121b6c9313b649
"use strict";

/* istanbul ignore next */
function cov_22zrvzgts1() {
  var path = "/home/runner/workspace/src/app/api/drive/storage/comprehensive/route.ts";
  var hash = "65d64ea3342105442a5879996fb972079797b8c2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/storage/comprehensive/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 65
        }
      },
      "6": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 67
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 17,
          column: 47
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "11": {
        start: {
          line: 26,
          column: 33
        },
        end: {
          line: 26,
          column: 53
        }
      },
      "12": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 70
        }
      },
      "13": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 73
        }
      },
      "14": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "15": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 36
        }
      },
      "16": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "17": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 48
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 58
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "21": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "23": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "24": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "26": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "27": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 53
          }
        }, {
          start: {
            line: 27,
            column: 57
          },
          end: {
            line: 27,
            column: 70
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 30
          }
        }, {
          start: {
            line: 51,
            column: 34
          },
          end: {
            line: 51,
            column: 54
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 30
          }
        }, {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 54
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 66,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 66,
            column: 30
          }
        }, {
          start: {
            line: 66,
            column: 34
          },
          end: {
            line: 66,
            column: 54
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 76,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 76,
            column: 34
          }
        }, {
          start: {
            line: 76,
            column: 38
          },
          end: {
            line: 76,
            column: 62
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/storage/comprehensive/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport { createDriveClient } from '@/lib/google-drive/config'\nimport { StorageAnalyzer } from '@/lib/google-drive/storage'\n\n/**\n * Enhanced Storage Analytics API with complete pagination support\n * GET /api/drive/storage/comprehensive?strategy=progressive\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth()\n\n    if (!session?.accessToken) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })\n    }\n\n    // Get strategy from query parameters\n    const { searchParams } = new URL(request.url)\n    const strategy = (searchParams.get('strategy') as 'fast' | 'complete' | 'progressive') || 'progressive'\n\n    // Create Drive client and analyzer\n    const drive = createDriveClient(session.accessToken)\n    const analyzer = new StorageAnalyzer(drive)\n\n    // Get analytics\n    const startTime = Date.now()\n    const analytics = await analyzer.getAnalytics(strategy)\n    const totalTime = Date.now() - startTime\n\n    // Add performance metrics\n    analytics.processing.processingTimeMs = totalTime\n\n    return NextResponse.json({\n      success: true,\n      data: analytics,\n      meta: {\n        strategy,\n        performanceMs: totalTime,\n        accuracy: analytics.processing.estimatedAccuracy,\n        apiCallsUsed: analytics.processing.totalApiCalls,\n        timestamp: new Date().toISOString(),\n      },\n    })\n  } catch (error: any) {\n    console.error('Comprehensive storage analytics error:', error)\n\n    // Handle specific Google API errors\n    if (error.code === 401 || error.status === 401) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })\n    }\n\n    if (error.code === 403 || error.status === 403) {\n      return NextResponse.json(\n        {\n          error: 'Insufficient permissions',\n          details: 'This application needs full Google Drive access to analyze storage',\n        },\n        { status: 403 },\n      )\n    }\n\n    if (error.code === 429 || error.status === 429) {\n      return NextResponse.json(\n        {\n          error: 'Rate limit exceeded',\n          details: 'Too many requests. Please try again in a few minutes.',\n        },\n        { status: 429 },\n      )\n    }\n\n    return NextResponse.json(\n      {\n        error: 'Failed to analyze storage',\n        details: error.message || 'Unknown error occurred',\n      },\n      { status: 500 },\n    )\n  }\n}\n"],
      names: ["GET", "request", "session", "auth", "accessToken", "NextResponse", "json", "error", "status", "searchParams", "URL", "url", "strategy", "get", "drive", "createDriveClient", "analyzer", "StorageAnalyzer", "startTime", "Date", "now", "analytics", "getAnalytics", "totalTime", "processing", "processingTimeMs", "success", "data", "meta", "performanceMs", "accuracy", "estimatedAccuracy", "apiCallsUsed", "totalApiCalls", "timestamp", "toISOString", "console", "code", "details", "message"],
      mappings: ";;;;+BASsBA;;;eAAAA;;;wBAToB;sBACrB;wBACa;yBACF;AAMzB,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,UAAI;QAE1B,IAAI,CAACD,SAASE,aAAa;YACzB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAA0B,GAAG;gBAAEC,QAAQ;YAAI;QAC/E;QAEA,qCAAqC;QACrC,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIT,QAAQU,GAAG;QAC5C,MAAMC,WAAW,AAACH,aAAaI,GAAG,CAAC,eAAuD;QAE1F,mCAAmC;QACnC,MAAMC,QAAQC,IAAAA,yBAAiB,EAACb,QAAQE,WAAW;QACnD,MAAMY,WAAW,IAAIC,wBAAe,CAACH;QAErC,gBAAgB;QAChB,MAAMI,YAAYC,KAAKC,GAAG;QAC1B,MAAMC,YAAY,MAAML,SAASM,YAAY,CAACV;QAC9C,MAAMW,YAAYJ,KAAKC,GAAG,KAAKF;QAE/B,0BAA0B;QAC1BG,UAAUG,UAAU,CAACC,gBAAgB,GAAGF;QAExC,OAAOlB,oBAAY,CAACC,IAAI,CAAC;YACvBoB,SAAS;YACTC,MAAMN;YACNO,MAAM;gBACJhB;gBACAiB,eAAeN;gBACfO,UAAUT,UAAUG,UAAU,CAACO,iBAAiB;gBAChDC,cAAcX,UAAUG,UAAU,CAACS,aAAa;gBAChDC,WAAW,IAAIf,OAAOgB,WAAW;YACnC;QACF;IACF,EAAE,OAAO5B,OAAY;QACnB6B,QAAQ7B,KAAK,CAAC,0CAA0CA;QAExD,oCAAoC;QACpC,IAAIA,MAAM8B,IAAI,KAAK,OAAO9B,MAAMC,MAAM,KAAK,KAAK;YAC9C,OAAOH,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAA0B,GAAG;gBAAEC,QAAQ;YAAI;QAC/E;QAEA,IAAID,MAAM8B,IAAI,KAAK,OAAO9B,MAAMC,MAAM,KAAK,KAAK;YAC9C,OAAOH,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACP+B,SAAS;YACX,GACA;gBAAE9B,QAAQ;YAAI;QAElB;QAEA,IAAID,MAAM8B,IAAI,KAAK,OAAO9B,MAAMC,MAAM,KAAK,KAAK;YAC9C,OAAOH,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACP+B,SAAS;YACX,GACA;gBAAE9B,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YACEC,OAAO;YACP+B,SAAS/B,MAAMgC,OAAO,IAAI;QAC5B,GACA;YAAE/B,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "65d64ea3342105442a5879996fb972079797b8c2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22zrvzgts1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22zrvzgts1();
cov_22zrvzgts1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_22zrvzgts1().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_22zrvzgts1().f[0]++;
    cov_22zrvzgts1().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_22zrvzgts1().s[3]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_22zrvzgts1().s[4]++, require("../../../../../auth"));
const _config =
/* istanbul ignore next */
(cov_22zrvzgts1().s[5]++, require("../../../../../lib/google-drive/config"));
const _storage =
/* istanbul ignore next */
(cov_22zrvzgts1().s[6]++, require("../../../../../lib/google-drive/storage"));
async function GET(request) {
  /* istanbul ignore next */
  cov_22zrvzgts1().f[1]++;
  cov_22zrvzgts1().s[7]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[8]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_22zrvzgts1().s[9]++;
    if (!session?.accessToken) {
      /* istanbul ignore next */
      cov_22zrvzgts1().b[0][0]++;
      cov_22zrvzgts1().s[10]++;
      return _server.NextResponse.json({
        error: 'Authentication required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_22zrvzgts1().b[0][1]++;
    }
    // Get strategy from query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[11]++, new URL(request.url));
    const strategy =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[12]++,
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[1][0]++, searchParams.get('strategy')) ||
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[1][1]++, 'progressive'));
    // Create Drive client and analyzer
    const drive =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[13]++, (0, _config.createDriveClient)(session.accessToken));
    const analyzer =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[14]++, new _storage.StorageAnalyzer(drive));
    // Get analytics
    const startTime =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[15]++, Date.now());
    const analytics =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[16]++, await analyzer.getAnalytics(strategy));
    const totalTime =
    /* istanbul ignore next */
    (cov_22zrvzgts1().s[17]++, Date.now() - startTime);
    // Add performance metrics
    /* istanbul ignore next */
    cov_22zrvzgts1().s[18]++;
    analytics.processing.processingTimeMs = totalTime;
    /* istanbul ignore next */
    cov_22zrvzgts1().s[19]++;
    return _server.NextResponse.json({
      success: true,
      data: analytics,
      meta: {
        strategy,
        performanceMs: totalTime,
        accuracy: analytics.processing.estimatedAccuracy,
        apiCallsUsed: analytics.processing.totalApiCalls,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_22zrvzgts1().s[20]++;
    console.error('Comprehensive storage analytics error:', error);
    // Handle specific Google API errors
    /* istanbul ignore next */
    cov_22zrvzgts1().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[3][0]++, error.code === 401) ||
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[3][1]++, error.status === 401)) {
      /* istanbul ignore next */
      cov_22zrvzgts1().b[2][0]++;
      cov_22zrvzgts1().s[22]++;
      return _server.NextResponse.json({
        error: 'Authentication required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_22zrvzgts1().b[2][1]++;
    }
    cov_22zrvzgts1().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[5][0]++, error.code === 403) ||
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[5][1]++, error.status === 403)) {
      /* istanbul ignore next */
      cov_22zrvzgts1().b[4][0]++;
      cov_22zrvzgts1().s[24]++;
      return _server.NextResponse.json({
        error: 'Insufficient permissions',
        details: 'This application needs full Google Drive access to analyze storage'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_22zrvzgts1().b[4][1]++;
    }
    cov_22zrvzgts1().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[7][0]++, error.code === 429) ||
    /* istanbul ignore next */
    (cov_22zrvzgts1().b[7][1]++, error.status === 429)) {
      /* istanbul ignore next */
      cov_22zrvzgts1().b[6][0]++;
      cov_22zrvzgts1().s[26]++;
      return _server.NextResponse.json({
        error: 'Rate limit exceeded',
        details: 'Too many requests. Please try again in a few minutes.'
      }, {
        status: 429
      });
    } else
    /* istanbul ignore next */
    {
      cov_22zrvzgts1().b[6][1]++;
    }
    cov_22zrvzgts1().s[27]++;
    return _server.NextResponse.json({
      error: 'Failed to analyze storage',
      details:
      /* istanbul ignore next */
      (cov_22zrvzgts1().b[8][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_22zrvzgts1().b[8][1]++, 'Unknown error occurred')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,