5ad139742e235d8d243cda9dcdd511f5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _apiutils = require("../../../../../lib/api-utils");
async function POST(request) {
    try {
        const authResult = await (0, _apiutils.initDriveService)();
        if (!authResult.success) {
            return authResult.response;
        }
        const { driveService } = authResult;
        const body = await request.json();
        // Handle both single and bulk operations
        const { fileId, items } = body;
        // Determine operation type based on items array or single fileId
        const fileIds = items && items.length > 0 ? items.map((item)=>item.id) : [
            fileId
        ];
        const isBulkOperation = items && items.length > 1;
        if (!fileIds || fileIds.length === 0) {
            return _server.NextResponse.json({
                error: 'File IDs are required'
            }, {
                status: 400
            });
        }
        const results = [];
        const errors = [];
        for (const id of fileIds){
            try {
                const result = await driveService.deleteFile(id);
                results.push({
                    fileId: id,
                    success: true,
                    result
                });
            } catch (error) {
                errors.push({
                    fileId: id,
                    success: false,
                    error: error.message || 'Delete operation failed'
                });
            }
        }
        const response = {
            success: errors.length === 0,
            processed: results.length,
            failed: errors.length,
            type: isBulkOperation ? 'bulk' : 'single',
            operation: 'delete',
            results,
            errors: errors.length > 0 ? errors : undefined
        };
        return _server.NextResponse.json(response, {
            status: errors.length === 0 ? 200 : 207
        });
    } catch (error) {
        return (0, _apiutils.handleApiError)(error);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvZHJpdmUvZmlsZXMvZGVsZXRlL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcblxuaW1wb3J0IHsgaW5pdERyaXZlU2VydmljZSwgaGFuZGxlQXBpRXJyb3IgfSBmcm9tICdAL2xpYi9hcGktdXRpbHMnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IGluaXREcml2ZVNlcnZpY2UoKVxuICAgIGlmICghYXV0aFJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gYXV0aFJlc3VsdC5yZXNwb25zZSFcbiAgICB9XG5cbiAgICBjb25zdCB7IGRyaXZlU2VydmljZSB9ID0gYXV0aFJlc3VsdFxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxuXG4gICAgLy8gSGFuZGxlIGJvdGggc2luZ2xlIGFuZCBidWxrIG9wZXJhdGlvbnNcbiAgICBjb25zdCB7IGZpbGVJZCwgaXRlbXMgfSA9IGJvZHlcblxuICAgIC8vIERldGVybWluZSBvcGVyYXRpb24gdHlwZSBiYXNlZCBvbiBpdGVtcyBhcnJheSBvciBzaW5nbGUgZmlsZUlkXG4gICAgY29uc3QgZmlsZUlkcyA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtcy5tYXAoKGl0ZW06IGFueSkgPT4gaXRlbS5pZCkgOiBbZmlsZUlkXVxuICAgIGNvbnN0IGlzQnVsa09wZXJhdGlvbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDFcblxuICAgIGlmICghZmlsZUlkcyB8fCBmaWxlSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdGaWxlIElEcyBhcmUgcmVxdWlyZWQnIH0sIHsgc3RhdHVzOiA0MDAgfSlcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHRzID0gW11cbiAgICBjb25zdCBlcnJvcnMgPSBbXVxuXG4gICAgZm9yIChjb25zdCBpZCBvZiBmaWxlSWRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkcml2ZVNlcnZpY2UuZGVsZXRlRmlsZShpZClcbiAgICAgICAgcmVzdWx0cy5wdXNoKHsgZmlsZUlkOiBpZCwgc3VjY2VzczogdHJ1ZSwgcmVzdWx0IH0pXG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICBmaWxlSWQ6IGlkLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdEZWxldGUgb3BlcmF0aW9uIGZhaWxlZCcsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICBzdWNjZXNzOiBlcnJvcnMubGVuZ3RoID09PSAwLFxuICAgICAgcHJvY2Vzc2VkOiByZXN1bHRzLmxlbmd0aCxcbiAgICAgIGZhaWxlZDogZXJyb3JzLmxlbmd0aCxcbiAgICAgIHR5cGU6IGlzQnVsa09wZXJhdGlvbiA/ICdidWxrJyA6ICdzaW5nbGUnLFxuICAgICAgb3BlcmF0aW9uOiAnZGVsZXRlJyxcbiAgICAgIHJlc3VsdHMsXG4gICAgICBlcnJvcnM6IGVycm9ycy5sZW5ndGggPiAwID8gZXJyb3JzIDogdW5kZWZpbmVkLFxuICAgIH1cblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSwge1xuICAgICAgc3RhdHVzOiBlcnJvcnMubGVuZ3RoID09PSAwID8gMjAwIDogMjA3LFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4gaGFuZGxlQXBpRXJyb3IoZXJyb3IpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJQT1NUIiwicmVxdWVzdCIsImF1dGhSZXN1bHQiLCJpbml0RHJpdmVTZXJ2aWNlIiwic3VjY2VzcyIsInJlc3BvbnNlIiwiZHJpdmVTZXJ2aWNlIiwiYm9keSIsImpzb24iLCJmaWxlSWQiLCJpdGVtcyIsImZpbGVJZHMiLCJsZW5ndGgiLCJtYXAiLCJpdGVtIiwiaWQiLCJpc0J1bGtPcGVyYXRpb24iLCJOZXh0UmVzcG9uc2UiLCJlcnJvciIsInN0YXR1cyIsInJlc3VsdHMiLCJlcnJvcnMiLCJyZXN1bHQiLCJkZWxldGVGaWxlIiwicHVzaCIsIm1lc3NhZ2UiLCJwcm9jZXNzZWQiLCJmYWlsZWQiLCJ0eXBlIiwib3BlcmF0aW9uIiwidW5kZWZpbmVkIiwiaGFuZGxlQXBpRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7K0JBSXNCQTs7O2VBQUFBOzs7d0JBSm9COzBCQUVPO0FBRTFDLGVBQWVBLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNQyxhQUFhLE1BQU1DLElBQUFBLDBCQUFnQjtRQUN6QyxJQUFJLENBQUNELFdBQVdFLE9BQU8sRUFBRTtZQUN2QixPQUFPRixXQUFXRyxRQUFRO1FBQzVCO1FBRUEsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBR0o7UUFDekIsTUFBTUssT0FBTyxNQUFNTixRQUFRTyxJQUFJO1FBRS9CLHlDQUF5QztRQUN6QyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdIO1FBRTFCLGlFQUFpRTtRQUNqRSxNQUFNSSxVQUFVRCxTQUFTQSxNQUFNRSxNQUFNLEdBQUcsSUFBSUYsTUFBTUcsR0FBRyxDQUFDLENBQUNDLE9BQWNBLEtBQUtDLEVBQUUsSUFBSTtZQUFDTjtTQUFPO1FBQ3hGLE1BQU1PLGtCQUFrQk4sU0FBU0EsTUFBTUUsTUFBTSxHQUFHO1FBRWhELElBQUksQ0FBQ0QsV0FBV0EsUUFBUUMsTUFBTSxLQUFLLEdBQUc7WUFDcEMsT0FBT0ssb0JBQVksQ0FBQ1QsSUFBSSxDQUFDO2dCQUFFVSxPQUFPO1lBQXdCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUM3RTtRQUVBLE1BQU1DLFVBQVUsRUFBRTtRQUNsQixNQUFNQyxTQUFTLEVBQUU7UUFFakIsS0FBSyxNQUFNTixNQUFNSixRQUFTO1lBQ3hCLElBQUk7Z0JBQ0YsTUFBTVcsU0FBUyxNQUFNaEIsYUFBYWlCLFVBQVUsQ0FBQ1I7Z0JBQzdDSyxRQUFRSSxJQUFJLENBQUM7b0JBQUVmLFFBQVFNO29CQUFJWCxTQUFTO29CQUFNa0I7Z0JBQU87WUFDbkQsRUFBRSxPQUFPSixPQUFZO2dCQUNuQkcsT0FBT0csSUFBSSxDQUFDO29CQUNWZixRQUFRTTtvQkFDUlgsU0FBUztvQkFDVGMsT0FBT0EsTUFBTU8sT0FBTyxJQUFJO2dCQUMxQjtZQUNGO1FBQ0Y7UUFFQSxNQUFNcEIsV0FBVztZQUNmRCxTQUFTaUIsT0FBT1QsTUFBTSxLQUFLO1lBQzNCYyxXQUFXTixRQUFRUixNQUFNO1lBQ3pCZSxRQUFRTixPQUFPVCxNQUFNO1lBQ3JCZ0IsTUFBTVosa0JBQWtCLFNBQVM7WUFDakNhLFdBQVc7WUFDWFQ7WUFDQUMsUUFBUUEsT0FBT1QsTUFBTSxHQUFHLElBQUlTLFNBQVNTO1FBQ3ZDO1FBRUEsT0FBT2Isb0JBQVksQ0FBQ1QsSUFBSSxDQUFDSCxVQUFVO1lBQ2pDYyxRQUFRRSxPQUFPVCxNQUFNLEtBQUssSUFBSSxNQUFNO1FBQ3RDO0lBQ0YsRUFBRSxPQUFPTSxPQUFZO1FBQ25CLE9BQU9hLElBQUFBLHdCQUFjLEVBQUNiO0lBQ3hCO0FBQ0YifQ==