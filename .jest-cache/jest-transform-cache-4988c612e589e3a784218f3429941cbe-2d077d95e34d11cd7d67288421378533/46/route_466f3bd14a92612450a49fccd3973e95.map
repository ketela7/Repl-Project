{"version":3,"names":["cov_z0bdu4yo5","actualCoverage","s","POST","request","f","authResult","_apiutils","initDriveService","success","b","response","driveService","body","json","fileId","items","fileIds","length","map","item","id","isBulkOperation","_server","NextResponse","error","status","results","errors","result","untrashFile","push","message","processed","failed","type","operation","undefined","handleApiError"],"sources":["/home/runner/workspace/src/app/api/drive/files/untrash/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, items } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        const result = await driveService!.untrashFile(id)\n        results.push({ fileId: id, success: true, result })\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Restore operation failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'untrash',\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],"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","ignoreList":[]}