93ed27670746197255a728a627b0bdde
"use strict";

/* istanbul ignore next */
function cov_z0bdu4yo5() {
  var path = "/home/runner/workspace/src/app/api/drive/files/untrash/route.ts";
  var hash = "acb1ec9ed935908f1a9c4c5c8c39f778dae03627";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/files/untrash/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 66
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "9": {
        start: {
          line: 19,
          column: 33
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "10": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "11": {
        start: {
          line: 22,
          column: 34
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "12": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "13": {
        start: {
          line: 24,
          column: 70
        },
        end: {
          line: 24,
          column: 77
        }
      },
      "14": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 27,
          column: 57
        }
      },
      "15": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "16": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "17": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "18": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 25
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "21": {
        start: {
          line: 39,
          column: 31
        },
        end: {
          line: 39,
          column: 65
        }
      },
      "22": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 50,
          column: 19
        }
      },
      "24": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 62
          },
          end: {
            line: 24,
            column: 63
          }
        },
        loc: {
          start: {
            line: 24,
            column: 70
          },
          end: {
            line: 24,
            column: 77
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 52
          },
          end: {
            line: 24,
            column: 78
          }
        }, {
          start: {
            line: 24,
            column: 81
          },
          end: {
            line: 26,
            column: 9
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 29
          }
        }, {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 24,
            column: 49
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 27,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 27,
            column: 37
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 27,
            column: 57
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 20
          }
        }, {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 28,
            column: 44
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 40
          }
        }, {
          start: {
            line: 49,
            column: 44
          },
          end: {
            line: 49,
            column: 70
          }
        }],
        line: 49
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 18
          },
          end: {
            line: 57,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 36
          },
          end: {
            line: 57,
            column: 42
          }
        }, {
          start: {
            line: 57,
            column: 45
          },
          end: {
            line: 57,
            column: 53
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 40
          },
          end: {
            line: 60,
            column: 46
          }
        }, {
          start: {
            line: 60,
            column: 49
          },
          end: {
            line: 60,
            column: 58
          }
        }],
        line: 60
      },
      "9": {
        loc: {
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 63,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 42
          },
          end: {
            line: 63,
            column: 45
          }
        }, {
          start: {
            line: 63,
            column: 48
          },
          end: {
            line: 63,
            column: 51
          }
        }],
        line: 63
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/files/untrash/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, items } = body\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        const result = await driveService!.untrashFile(id)\n        results.push({ fileId: id, success: true, result })\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Restore operation failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'untrash',\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],
      names: ["POST", "request", "authResult", "initDriveService", "success", "response", "driveService", "body", "json", "fileId", "items", "fileIds", "length", "map", "item", "id", "isBulkOperation", "NextResponse", "error", "status", "results", "errors", "result", "untrashFile", "push", "message", "processed", "failed", "type", "operation", "undefined", "handleApiError"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;0BAEO;AAE1C,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,0BAAgB;QACzC,IAAI,CAACD,WAAWE,OAAO,EAAE;YACvB,OAAOF,WAAWG,QAAQ;QAC5B;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAGJ;QACzB,MAAMK,OAAO,MAAMN,QAAQO,IAAI;QAE/B,yCAAyC;QACzC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAE,GAAGH;QAE1B,iEAAiE;QACjE,MAAMI,UAAUD,SAASA,MAAME,MAAM,GAAG,IAAIF,MAAMG,GAAG,CAAC,CAACC,OAAcA,KAAKC,EAAE,IAAI;YAACN;SAAO;QACxF,MAAMO,kBAAkBN,SAASA,MAAME,MAAM,GAAG;QAEhD,IAAI,CAACD,WAAWA,QAAQC,MAAM,KAAK,GAAG;YACpC,OAAOK,oBAAY,CAACT,IAAI,CAAC;gBAAEU,OAAO;YAAwB,GAAG;gBAAEC,QAAQ;YAAI;QAC7E;QAEA,MAAMC,UAAU,EAAE;QAClB,MAAMC,SAAS,EAAE;QAEjB,KAAK,MAAMN,MAAMJ,QAAS;YACxB,IAAI;gBACF,MAAMW,SAAS,MAAMhB,aAAciB,WAAW,CAACR;gBAC/CK,QAAQI,IAAI,CAAC;oBAAEf,QAAQM;oBAAIX,SAAS;oBAAMkB;gBAAO;YACnD,EAAE,OAAOJ,OAAY;gBACnBG,OAAOG,IAAI,CAAC;oBACVf,QAAQM;oBACRX,SAAS;oBACTc,OAAOA,MAAMO,OAAO,IAAI;gBAC1B;YACF;QACF;QAEA,MAAMpB,WAAW;YACfD,SAASiB,OAAOT,MAAM,KAAK;YAC3Bc,WAAWN,QAAQR,MAAM;YACzBe,QAAQN,OAAOT,MAAM;YACrBgB,MAAMZ,kBAAkB,SAAS;YACjCa,WAAW;YACXT;YACAC,QAAQA,OAAOT,MAAM,GAAG,IAAIS,SAASS;QACvC;QAEA,OAAOb,oBAAY,CAACT,IAAI,CAACH,UAAU;YACjCc,QAAQE,OAAOT,MAAM,KAAK,IAAI,MAAM;QACtC;IACF,EAAE,OAAOM,OAAY;QACnB,OAAOa,IAAAA,wBAAc,EAACb;IACxB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "acb1ec9ed935908f1a9c4c5c8c39f778dae03627"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z0bdu4yo5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z0bdu4yo5();
cov_z0bdu4yo5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_z0bdu4yo5().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_z0bdu4yo5().f[0]++;
    cov_z0bdu4yo5().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_z0bdu4yo5().s[3]++, require("next/server"));
const _apiutils =
/* istanbul ignore next */
(cov_z0bdu4yo5().s[4]++, require("../../../../../lib/api-utils"));
async function POST(request) {
  /* istanbul ignore next */
  cov_z0bdu4yo5().f[1]++;
  cov_z0bdu4yo5().s[5]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[6]++, await (0, _apiutils.initDriveService)());
    /* istanbul ignore next */
    cov_z0bdu4yo5().s[7]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_z0bdu4yo5().b[0][0]++;
      cov_z0bdu4yo5().s[8]++;
      return authResult.response;
    } else
    /* istanbul ignore next */
    {
      cov_z0bdu4yo5().b[0][1]++;
    }
    const {
      driveService
    } =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[9]++, authResult);
    const body =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[10]++, await request.json());
    // Handle both single and bulk operations
    const {
      fileId,
      items
    } =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[11]++, body);
    // Determine operation type based on items array or single fileId
    const fileIds =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[12]++,
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[2][0]++, items) &&
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[2][1]++, items.length > 0) ?
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[1][0]++, items.map(item => {
      /* istanbul ignore next */
      cov_z0bdu4yo5().f[2]++;
      cov_z0bdu4yo5().s[13]++;
      return item.id;
    })) :
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[1][1]++, [fileId]));
    const isBulkOperation =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[14]++,
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[3][0]++, items) &&
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[3][1]++, items.length > 1));
    /* istanbul ignore next */
    cov_z0bdu4yo5().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[5][0]++, !fileIds) ||
    /* istanbul ignore next */
    (cov_z0bdu4yo5().b[5][1]++, fileIds.length === 0)) {
      /* istanbul ignore next */
      cov_z0bdu4yo5().b[4][0]++;
      cov_z0bdu4yo5().s[16]++;
      return _server.NextResponse.json({
        error: 'File IDs are required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_z0bdu4yo5().b[4][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[17]++, []);
    const errors =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[18]++, []);
    /* istanbul ignore next */
    cov_z0bdu4yo5().s[19]++;
    for (const id of fileIds) {
      /* istanbul ignore next */
      cov_z0bdu4yo5().s[20]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_z0bdu4yo5().s[21]++, await driveService.untrashFile(id));
        /* istanbul ignore next */
        cov_z0bdu4yo5().s[22]++;
        results.push({
          fileId: id,
          success: true,
          result
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_z0bdu4yo5().s[23]++;
        errors.push({
          fileId: id,
          success: false,
          error:
          /* istanbul ignore next */
          (cov_z0bdu4yo5().b[6][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_z0bdu4yo5().b[6][1]++, 'Restore operation failed')
        });
      }
    }
    const response =
    /* istanbul ignore next */
    (cov_z0bdu4yo5().s[24]++, {
      success: errors.length === 0,
      processed: results.length,
      failed: errors.length,
      type: isBulkOperation ?
      /* istanbul ignore next */
      (cov_z0bdu4yo5().b[7][0]++, 'bulk') :
      /* istanbul ignore next */
      (cov_z0bdu4yo5().b[7][1]++, 'single'),
      operation: 'untrash',
      results,
      errors: errors.length > 0 ?
      /* istanbul ignore next */
      (cov_z0bdu4yo5().b[8][0]++, errors) :
      /* istanbul ignore next */
      (cov_z0bdu4yo5().b[8][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_z0bdu4yo5().s[25]++;
    return _server.NextResponse.json(response, {
      status: errors.length === 0 ?
      /* istanbul ignore next */
      (cov_z0bdu4yo5().b[9][0]++, 200) :
      /* istanbul ignore next */
      (cov_z0bdu4yo5().b[9][1]++, 207)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z0bdu4yo5().s[26]++;
    return (0, _apiutils.handleApiError)(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfejBiZHU0eW81IiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiUE9TVCIsInJlcXVlc3QiLCJmIiwiYXV0aFJlc3VsdCIsIl9hcGl1dGlscyIsImluaXREcml2ZVNlcnZpY2UiLCJzdWNjZXNzIiwiYiIsInJlc3BvbnNlIiwiZHJpdmVTZXJ2aWNlIiwiYm9keSIsImpzb24iLCJmaWxlSWQiLCJpdGVtcyIsImZpbGVJZHMiLCJsZW5ndGgiLCJtYXAiLCJpdGVtIiwiaWQiLCJpc0J1bGtPcGVyYXRpb24iLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwiZXJyb3IiLCJzdGF0dXMiLCJyZXN1bHRzIiwiZXJyb3JzIiwicmVzdWx0IiwidW50cmFzaEZpbGUiLCJwdXNoIiwibWVzc2FnZSIsInByb2Nlc3NlZCIsImZhaWxlZCIsInR5cGUiLCJvcGVyYXRpb24iLCJ1bmRlZmluZWQiLCJoYW5kbGVBcGlFcnJvciJdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvZHJpdmUvZmlsZXMvdW50cmFzaC9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbmltcG9ydCB7IGluaXREcml2ZVNlcnZpY2UsIGhhbmRsZUFwaUVycm9yIH0gZnJvbSAnQC9saWIvYXBpLXV0aWxzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSBhd2FpdCBpbml0RHJpdmVTZXJ2aWNlKClcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIGF1dGhSZXN1bHQucmVzcG9uc2UhXG4gICAgfVxuXG4gICAgY29uc3QgeyBkcml2ZVNlcnZpY2UgfSA9IGF1dGhSZXN1bHRcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKClcblxuICAgIC8vIEhhbmRsZSBib3RoIHNpbmdsZSBhbmQgYnVsayBvcGVyYXRpb25zXG4gICAgY29uc3QgeyBmaWxlSWQsIGl0ZW1zIH0gPSBib2R5XG5cbiAgICAvLyBEZXRlcm1pbmUgb3BlcmF0aW9uIHR5cGUgYmFzZWQgb24gaXRlbXMgYXJyYXkgb3Igc2luZ2xlIGZpbGVJZFxuICAgIGNvbnN0IGZpbGVJZHMgPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXMubWFwKChpdGVtOiBhbnkpID0+IGl0ZW0uaWQpIDogW2ZpbGVJZF1cbiAgICBjb25zdCBpc0J1bGtPcGVyYXRpb24gPSBpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAxXG5cbiAgICBpZiAoIWZpbGVJZHMgfHwgZmlsZUlkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnRmlsZSBJRHMgYXJlIHJlcXVpcmVkJyB9LCB7IHN0YXR1czogNDAwIH0pXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0cyA9IFtdXG4gICAgY29uc3QgZXJyb3JzID0gW11cblxuICAgIGZvciAoY29uc3QgaWQgb2YgZmlsZUlkcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZHJpdmVTZXJ2aWNlIS51bnRyYXNoRmlsZShpZClcbiAgICAgICAgcmVzdWx0cy5wdXNoKHsgZmlsZUlkOiBpZCwgc3VjY2VzczogdHJ1ZSwgcmVzdWx0IH0pXG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICBmaWxlSWQ6IGlkLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdSZXN0b3JlIG9wZXJhdGlvbiBmYWlsZWQnLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgc3VjY2VzczogZXJyb3JzLmxlbmd0aCA9PT0gMCxcbiAgICAgIHByb2Nlc3NlZDogcmVzdWx0cy5sZW5ndGgsXG4gICAgICBmYWlsZWQ6IGVycm9ycy5sZW5ndGgsXG4gICAgICB0eXBlOiBpc0J1bGtPcGVyYXRpb24gPyAnYnVsaycgOiAnc2luZ2xlJyxcbiAgICAgIG9wZXJhdGlvbjogJ3VudHJhc2gnLFxuICAgICAgcmVzdWx0cyxcbiAgICAgIGVycm9yczogZXJyb3JzLmxlbmd0aCA+IDAgPyBlcnJvcnMgOiB1bmRlZmluZWQsXG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlLCB7XG4gICAgICBzdGF0dXM6IGVycm9ycy5sZW5ndGggPT09IDAgPyAyMDAgOiAyMDcsXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiBoYW5kbGVBcGlFcnJvcihlcnJvcilcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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