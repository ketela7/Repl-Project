{"version":3,"names":["GET","cov_1pv0l5f17z","f","s","POST","request","searchParams","URL","url","parentId","b","get","includeShared","authResult","_apiutils","initDriveService","success","response","session","driveService","userId","user","email","cacheKey","_cache","driveCache","generateDriveKey","query","cached","_server","NextResponse","json","folders","foldersResult","_apiretry","retryDriveApiCall","_apithrottle","throttledDriveRequest","drive","files","list","q","fields","orderBy","pageSize","supportsAllDrives","includeItemsFromAllDrives","data","formattedFolders","map","folder","id","name","isShared","shared","path","parents","webViewLink","modifiedTime","canEdit","capabilities","canAddChildren","sharedDrives","sharedDrivesResult","drives","error","console","warn","allFolders","set","total","length","handleApiError","body","status","folderResult","create","requestBody","trim","mimeType","clearFolderCache","clearUserCache","createdTime","message"],"sources":["/home/runner/workspace/src/app/api/drive/folders/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\nimport { retryDriveApiCall } from '@/lib/api-retry'\nimport { throttledDriveRequest } from '@/lib/api-throttle'\nimport { driveCache } from '@/lib/cache'\n\n/**\n * GET /api/drive/folders\n * Fetch folders from Google Drive with optional parent folder filtering\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const parentId = searchParams.get('parentId') || 'root'\n    const includeShared = searchParams.get('includeShared') === 'true'\n\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { session, driveService } = authResult\n    const userId = session.user?.email || 'unknown'\n\n    // Check cache first\n    const cacheKey = driveCache.generateDriveKey({\n      parentId,\n      userId,\n      query: includeShared ? 'includeShared=true' : 'folders',\n    })\n\n    const cached = driveCache.get<{ folders: any[] }>(cacheKey)\n    if (cached) {\n      return NextResponse.json({\n        success: true,\n        folders: cached.folders,\n        cached: true,\n      })\n    }\n\n    // Build query for folders only\n    let query = `mimeType='application/vnd.google-apps.folder' and trashed=false`\n\n    if (parentId && parentId !== 'root') {\n      query += ` and '${parentId}' in parents`\n    } else if (parentId === 'root') {\n      query += ` and 'root' in parents`\n    }\n\n    // Fetch folders with retry mechanism\n    const foldersResult = await retryDriveApiCall(async () => {\n      return await throttledDriveRequest(async () => {\n        return await driveService!.drive.files.list({\n          q: query,\n          fields: 'files(id,name,parents,shared,capabilities,owners,webViewLink,modifiedTime)',\n          orderBy: 'name',\n          pageSize: 100,\n          supportsAllDrives: true,\n          includeItemsFromAllDrives: true,\n        })\n      })\n    })\n\n    const folders = foldersResult.data.files || []\n\n    // Format folder data\n    const formattedFolders = folders.map((folder: any) => ({\n      id: folder.id,\n      name: folder.name,\n      isShared: folder.shared || false,\n      path: folder.parents ? `Parent: ${folder.parents[0]}` : 'Root',\n      webViewLink: folder.webViewLink,\n      modifiedTime: folder.modifiedTime,\n      canEdit: folder.capabilities?.canEdit || false,\n      canAddChildren: folder.capabilities?.canAddChildren || false,\n    }))\n\n    // Include shared drives if requested\n    let sharedDrives: any[] = []\n    if (includeShared && parentId === 'root') {\n      try {\n        const sharedDrivesResult = await retryDriveApiCall(async () => {\n          return await throttledDriveRequest(async () => {\n            return await driveService!.drive.drives.list({\n              fields: 'drives(id,name,capabilities)',\n              pageSize: 50,\n            })\n          })\n        })\n\n        sharedDrives = (sharedDrivesResult.data.drives || []).map((drive: any) => ({\n          id: drive.id,\n          name: `📁 ${drive.name} (Shared Drive)`,\n          isShared: true,\n          path: 'Shared Drive',\n          canEdit: drive.capabilities?.canAddChildren || false,\n          canAddChildren: drive.capabilities?.canAddChildren || false,\n        }))\n      } catch (error) {\n        console.warn('Failed to fetch shared drives:', error)\n      }\n    }\n\n    const allFolders = [...formattedFolders, ...sharedDrives]\n\n    // Cache the result\n    driveCache.set(cacheKey, { folders: allFolders }, 5) // 5 minute cache\n\n    return NextResponse.json({\n      success: true,\n      folders: allFolders,\n      total: allFolders.length,\n      parentId,\n      cached: false,\n    })\n  } catch (error) {\n    // // // // // console.error('Error in folders API:', error)\n    return handleApiError(error)\n  }\n}\n\n/**\n * POST /api/drive/folders\n * Create a new folder in Google Drive\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { name, parentId = 'root' } = body\n\n    if (!name) {\n      return NextResponse.json({ success: false, error: 'Folder name is required' }, { status: 400 })\n    }\n\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { session, driveService } = authResult\n    const userId = session.user?.email || 'unknown'\n\n    // Create folder with retry mechanism\n    const folderResult = await retryDriveApiCall(async () => {\n      return await throttledDriveRequest(async () => {\n        return await driveService!.drive.files.create({\n          requestBody: {\n            name: name.trim(),\n            mimeType: 'application/vnd.google-apps.folder',\n            parents: parentId === 'root' ? ['root'] : [parentId],\n          },\n          fields: 'id,name,parents,webViewLink,createdTime',\n        })\n      })\n    })\n\n    const folder = folderResult.data\n\n    // Clear relevant cache entries\n    driveCache.clearFolderCache(userId, parentId)\n    driveCache.clearUserCache(userId) // Clear user's main cache\n\n    return NextResponse.json({\n      success: true,\n      folder: {\n        id: folder.id,\n        name: folder.name,\n        parentId: folder.parents?.[0] || 'root',\n        webViewLink: folder.webViewLink,\n        createdTime: folder.createdTime,\n      },\n      message: `Folder \"${name}\" created successfully`,\n    })\n  } catch (error) {\n    // // // // // console.error('Error creating folder:', error)\n    return handleApiError(error)\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAUsBA,GAAG,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAHH,GAAA;;EAmHAI,IAAI,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;kCA7HoB;;;kCACO;;;kCACf;;;kCACI;;;mCACX;AAMpB,eAAeJ,IAAIK,OAAoB;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC5C,IAAI;IACF,MAAM;MAAEG;IAAY,CAAE;IAAA;IAAA,CAAAL,cAAA,GAAAE,CAAA,QAAG,IAAII,GAAA,CAAIF,OAAA,CAAQG,GAAG;IAC5C,MAAMC,QAAA;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA;IAAW;IAAA,CAAAF,cAAA,GAAAS,CAAA,UAAAJ,YAAA,CAAaK,GAAG,CAAC;IAAA;IAAA,CAAAV,cAAA,GAAAS,CAAA,UAAe;IACjD,MAAME,aAAA;IAAA;IAAA,CAAAX,cAAA,GAAAE,CAAA,QAAgBG,YAAA,CAAaK,GAAG,CAAC,qBAAqB;IAE5D,MAAME,UAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAAW,SAAA,CAAAC,gBAAgB;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACzC,IAAI,CAACU,UAAA,CAAWG,OAAO,EAAE;MAAA;MAAAf,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACvB,OAAOU,UAAA,CAAWI,QAAQ;IAC5B;IAAA;IAAA;MAAAhB,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM;MAAEQ,OAAO;MAAEC;IAAY,CAAE;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAGU,UAAA;IAClC,MAAMO,MAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA;IAAS;IAAA,CAAAF,cAAA,GAAAS,CAAA,UAAAQ,OAAA,CAAQG,IAAI,EAAEC,KAAA;IAAA;IAAA,CAAArB,cAAA,GAAAS,CAAA,UAAS;IAEtC;IACA,MAAMa,QAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAWqB,MAAA,CAAAC,UAAU,CAACC,gBAAgB,CAAC;MAC3CjB,QAAA;MACAW,MAAA;MACAO,KAAA,EAAOf,aAAA;MAAA;MAAA,CAAAX,cAAA,GAAAS,CAAA,UAAgB;MAAA;MAAA,CAAAT,cAAA,GAAAS,CAAA,UAAuB;IAChD;IAEA,MAAMkB,MAAA;IAAA;IAAA,CAAA3B,cAAA,GAAAE,CAAA,QAASqB,MAAA,CAAAC,UAAU,CAACd,GAAG,CAAqBY,QAAA;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAClD,IAAIyB,MAAA,EAAQ;MAAA;MAAA3B,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACV,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACvBf,OAAA,EAAS;QACTgB,OAAA,EAASJ,MAAA,CAAOI,OAAO;QACvBJ,MAAA,EAAQ;MACV;IACF;IAAA;IAAA;MAAA3B,cAAA,GAAAS,CAAA;IAAA;IAEA;IACA,IAAIiB,KAAA;IAAA;IAAA,CAAA1B,cAAA,GAAAE,CAAA,QAAQ,iEAAiE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAE7E;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,UAAAD,QAAA;IAAA;IAAA,CAAAR,cAAA,GAAAS,CAAA,UAAYD,QAAA,KAAa,SAAQ;MAAA;MAAAR,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACnCwB,KAAA,IAAS,SAASlB,QAAA,cAAsB;IAC1C,OAAO;MAAA;MAAAR,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,IAAIM,QAAA,KAAa,QAAQ;QAAA;QAAAR,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC9BwB,KAAA,IAAS,wBAAwB;MACnC;MAAA;MAAA;QAAA1B,cAAA,GAAAS,CAAA;MAAA;IAAA;IAEA;IACA,MAAMuB,aAAA;IAAA;IAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAgB,MAAM,IAAA+B,SAAA,CAAAC,iBAAiB,EAAC;MAAA;MAAAlC,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAC5C,OAAO,MAAM,IAAAiC,YAAA,CAAAC,qBAAqB,EAAC;QAAA;QAAApC,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACjC,OAAO,MAAMgB,YAAA,CAAcmB,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;UAC1CC,CAAA,EAAGd,KAAA;UACHe,MAAA,EAAQ;UACRC,OAAA,EAAS;UACTC,QAAA,EAAU;UACVC,iBAAA,EAAmB;UACnBC,yBAAA,EAA2B;QAC7B;MACF;IACF;IAEA,MAAMd,OAAA;IAAA;IAAA,CAAA/B,cAAA,GAAAE,CAAA;IAAU;IAAA,CAAAF,cAAA,GAAAS,CAAA,UAAAuB,aAAA,CAAcc,IAAI,CAACR,KAAK;IAAA;IAAA,CAAAtC,cAAA,GAAAS,CAAA,UAAI,EAAE;IAE9C;IACA,MAAMsC,gBAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAmB6B,OAAA,CAAQiB,GAAG,CAAEC,MAAA,IAAiB;MAAA;MAAAjD,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA;QACrDgD,EAAA,EAAID,MAAA,CAAOC,EAAE;QACbC,IAAA,EAAMF,MAAA,CAAOE,IAAI;QACjBC,QAAA;QAAU;QAAA,CAAApD,cAAA,GAAAS,CAAA,UAAAwC,MAAA,CAAOI,MAAM;QAAA;QAAA,CAAArD,cAAA,GAAAS,CAAA,UAAI;QAC3B6C,IAAA,EAAML,MAAA,CAAOM,OAAO;QAAA;QAAA,CAAAvD,cAAA,GAAAS,CAAA,WAAG,WAAWwC,MAAA,CAAOM,OAAO,CAAC,EAAE,EAAE;QAAA;QAAA,CAAAvD,cAAA,GAAAS,CAAA,WAAG;QACxD+C,WAAA,EAAaP,MAAA,CAAOO,WAAW;QAC/BC,YAAA,EAAcR,MAAA,CAAOQ,YAAY;QACjCC,OAAA;QAAS;QAAA,CAAA1D,cAAA,GAAAS,CAAA,WAAAwC,MAAA,CAAOU,YAAY,EAAED,OAAA;QAAA;QAAA,CAAA1D,cAAA,GAAAS,CAAA,WAAW;QACzCmD,cAAA;QAAgB;QAAA,CAAA5D,cAAA,GAAAS,CAAA,WAAAwC,MAAA,CAAOU,YAAY,EAAEC,cAAA;QAAA;QAAA,CAAA5D,cAAA,GAAAS,CAAA,WAAkB;MACzD;IAAA;IAEA;IACA,IAAIoD,YAAA;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAsB,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAC5B;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAE,aAAA;IAAA;IAAA,CAAAX,cAAA,GAAAS,CAAA,WAAiBD,QAAA,KAAa,SAAQ;MAAA;MAAAR,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACxC,IAAI;QACF,MAAM4D,kBAAA;QAAA;QAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAqB,MAAM,IAAA+B,SAAA,CAAAC,iBAAiB,EAAC;UAAA;UAAAlC,cAAA,GAAAC,CAAA;UAAAD,cAAA,GAAAE,CAAA;UACjD,OAAO,MAAM,IAAAiC,YAAA,CAAAC,qBAAqB,EAAC;YAAA;YAAApC,cAAA,GAAAC,CAAA;YAAAD,cAAA,GAAAE,CAAA;YACjC,OAAO,MAAMgB,YAAA,CAAcmB,KAAK,CAAC0B,MAAM,CAACxB,IAAI,CAAC;cAC3CE,MAAA,EAAQ;cACRE,QAAA,EAAU;YACZ;UACF;QACF;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QAEA2D,YAAA,GAAe;QAAC;QAAA,CAAA7D,cAAA,GAAAS,CAAA,WAAAqD,kBAAA,CAAmBhB,IAAI,CAACiB,MAAM;QAAA;QAAA,CAAA/D,cAAA,GAAAS,CAAA,WAAI,EAAE,GAAEuC,GAAG,CAAEX,KAAA,IAAgB;UAAA;UAAArC,cAAA,GAAAC,CAAA;UAAAD,cAAA,GAAAE,CAAA;UAAA;YACzEgD,EAAA,EAAIb,KAAA,CAAMa,EAAE;YACZC,IAAA,EAAM,MAAMd,KAAA,CAAMc,IAAI,iBAAiB;YACvCC,QAAA,EAAU;YACVE,IAAA,EAAM;YACNI,OAAA;YAAS;YAAA,CAAA1D,cAAA,GAAAS,CAAA,WAAA4B,KAAA,CAAMsB,YAAY,EAAEC,cAAA;YAAA;YAAA,CAAA5D,cAAA,GAAAS,CAAA,WAAkB;YAC/CmD,cAAA;YAAgB;YAAA,CAAA5D,cAAA,GAAAS,CAAA,WAAA4B,KAAA,CAAMsB,YAAY,EAAEC,cAAA;YAAA;YAAA,CAAA5D,cAAA,GAAAS,CAAA,WAAkB;UACxD;QAAA;MACF,EAAE,OAAOuD,KAAA,EAAO;QAAA;QAAAhE,cAAA,GAAAE,CAAA;QACd+D,OAAA,CAAQC,IAAI,CAAC,kCAAkCF,KAAA;MACjD;IACF;IAAA;IAAA;MAAAhE,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM0D,UAAA;IAAA;IAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAa,C,GAAI6C,gBAAA,E,GAAqBc,YAAA,CAAa;IAEzD;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IACAqB,MAAA,CAAAC,UAAU,CAAC4C,GAAG,CAAC9C,QAAA,EAAU;MAAES,OAAA,EAASoC;IAAW,GAAG,GAAG;IAAA;;;IAErD,OAAOvC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBf,OAAA,EAAS;MACTgB,OAAA,EAASoC,UAAA;MACTE,KAAA,EAAOF,UAAA,CAAWG,MAAM;MACxB9D,QAAA;MACAmB,MAAA,EAAQ;IACV;EACF,EAAE,OAAOqC,KAAA,EAAO;IAAA;IAAAhE,cAAA,GAAAE,CAAA;IACd;IACA,OAAO,IAAAW,SAAA,CAAA0D,cAAc,EAACP,KAAA;EACxB;AACF;AAMO,eAAe7D,KAAKC,OAAoB;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAMsE,IAAA;IAAA;IAAA,CAAAxE,cAAA,GAAAE,CAAA,QAAO,MAAME,OAAA,CAAQ0B,IAAI;IAC/B,MAAM;MAAEqB,IAAI;MAAE3C,QAAA;MAAA;MAAA,CAAAR,cAAA,GAAAS,CAAA,WAAW,MAAM;IAAA,CAAE;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAGsE,IAAA;IAAA;IAAAxE,cAAA,GAAAE,CAAA;IAEpC,IAAI,CAACiD,IAAA,EAAM;MAAA;MAAAnD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACT,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEf,OAAA,EAAS;QAAOiD,KAAA,EAAO;MAA0B,GAAG;QAAES,MAAA,EAAQ;MAAI;IAC/F;IAAA;IAAA;MAAAzE,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAMG,UAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAAW,SAAA,CAAAC,gBAAgB;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACzC,IAAI,CAACU,UAAA,CAAWG,OAAO,EAAE;MAAA;MAAAf,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACvB,OAAOU,UAAA,CAAWI,QAAQ;IAC5B;IAAA;IAAA;MAAAhB,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM;MAAEQ,OAAO;MAAEC;IAAY,CAAE;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAGU,UAAA;IAClC,MAAMO,MAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA;IAAS;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAQ,OAAA,CAAQG,IAAI,EAAEC,KAAA;IAAA;IAAA,CAAArB,cAAA,GAAAS,CAAA,WAAS;IAEtC;IACA,MAAMiE,YAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAE,CAAA,QAAe,MAAM,IAAA+B,SAAA,CAAAC,iBAAiB,EAAC;MAAA;MAAAlC,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAC3C,OAAO,MAAM,IAAAiC,YAAA,CAAAC,qBAAqB,EAAC;QAAA;QAAApC,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACjC,OAAO,MAAMgB,YAAA,CAAcmB,KAAK,CAACC,KAAK,CAACqC,MAAM,CAAC;UAC5CC,WAAA,EAAa;YACXzB,IAAA,EAAMA,IAAA,CAAK0B,IAAI;YACfC,QAAA,EAAU;YACVvB,OAAA,EAAS/C,QAAA,KAAa;YAAA;YAAA,CAAAR,cAAA,GAAAS,CAAA,WAAS,CAAC,OAAO;YAAA;YAAA,CAAAT,cAAA,GAAAS,CAAA,WAAG,CAACD,QAAA,CAAS;UACtD;UACAiC,MAAA,EAAQ;QACV;MACF;IACF;IAEA,MAAMQ,MAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAASwE,YAAA,CAAa5B,IAAI;IAEhC;IAAA;IAAA9C,cAAA,GAAAE,CAAA;IACAqB,MAAA,CAAAC,UAAU,CAACuD,gBAAgB,CAAC5D,MAAA,EAAQX,QAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IACpCqB,MAAA,CAAAC,UAAU,CAACwD,cAAc,CAAC7D,MAAA,EAAQ;IAAA;;;IAElC,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBf,OAAA,EAAS;MACTkC,MAAA,EAAQ;QACNC,EAAA,EAAID,MAAA,CAAOC,EAAE;QACbC,IAAA,EAAMF,MAAA,CAAOE,IAAI;QACjB3C,QAAA;QAAU;QAAA,CAAAR,cAAA,GAAAS,CAAA,WAAAwC,MAAA,CAAOM,OAAO,GAAG,EAAE;QAAA;QAAA,CAAAvD,cAAA,GAAAS,CAAA,WAAI;QACjC+C,WAAA,EAAaP,MAAA,CAAOO,WAAW;QAC/ByB,WAAA,EAAahC,MAAA,CAAOgC;MACtB;MACAC,OAAA,EAAS,WAAW/B,IAAA;IACtB;EACF,EAAE,OAAOa,KAAA,EAAO;IAAA;IAAAhE,cAAA,GAAAE,CAAA;IACd;IACA,OAAO,IAAAW,SAAA,CAAA0D,cAAc,EAACP,KAAA;EACxB;AACF","ignoreList":[]}