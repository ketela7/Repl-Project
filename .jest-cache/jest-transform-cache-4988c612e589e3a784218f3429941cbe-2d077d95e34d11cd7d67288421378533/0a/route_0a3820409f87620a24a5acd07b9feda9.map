{"version":3,"sources":["/home/runner/workspace/src/app/api/drive/files/move/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, targetFolderId, items } = body\n\n    if (!targetFolderId) {\n      return NextResponse.json({ error: 'Target folder ID is required' }, { status: 400 })\n    }\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        const result = await driveService.moveFile(id, targetFolderId)\n        results.push({ fileId: id, success: true, result })\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Move failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'move',\n      targetFolderId,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],"names":["POST","request","authResult","initDriveService","success","response","driveService","body","json","fileId","targetFolderId","items","NextResponse","error","status","fileIds","length","map","item","id","isBulkOperation","results","errors","result","moveFile","push","message","processed","failed","type","operation","undefined","handleApiError"],"mappings":";;;;+BAIsBA;;;eAAAA;;;wBAJoB;0BAEO;AAE1C,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,0BAAgB;QACzC,IAAI,CAACD,WAAWE,OAAO,EAAE;YACvB,OAAOF,WAAWG,QAAQ;QAC5B;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAGJ;QACzB,MAAMK,OAAO,MAAMN,QAAQO,IAAI;QAE/B,yCAAyC;QACzC,MAAM,EAAEC,MAAM,EAAEC,cAAc,EAAEC,KAAK,EAAE,GAAGJ;QAE1C,IAAI,CAACG,gBAAgB;YACnB,OAAOE,oBAAY,CAACJ,IAAI,CAAC;gBAAEK,OAAO;YAA+B,GAAG;gBAAEC,QAAQ;YAAI;QACpF;QAEA,iEAAiE;QACjE,MAAMC,UAAUJ,SAASA,MAAMK,MAAM,GAAG,IAAIL,MAAMM,GAAG,CAAC,CAACC,OAAcA,KAAKC,EAAE,IAAI;YAACV;SAAO;QACxF,MAAMW,kBAAkBT,SAASA,MAAMK,MAAM,GAAG;QAEhD,IAAI,CAACD,WAAWA,QAAQC,MAAM,KAAK,GAAG;YACpC,OAAOJ,oBAAY,CAACJ,IAAI,CAAC;gBAAEK,OAAO;YAAwB,GAAG;gBAAEC,QAAQ;YAAI;QAC7E;QAEA,MAAMO,UAAU,EAAE;QAClB,MAAMC,SAAS,EAAE;QAEjB,KAAK,MAAMH,MAAMJ,QAAS;YACxB,IAAI;gBACF,MAAMQ,SAAS,MAAMjB,aAAakB,QAAQ,CAACL,IAAIT;gBAC/CW,QAAQI,IAAI,CAAC;oBAAEhB,QAAQU;oBAAIf,SAAS;oBAAMmB;gBAAO;YACnD,EAAE,OAAOV,OAAY;gBACnBS,OAAOG,IAAI,CAAC;oBACVhB,QAAQU;oBACRf,SAAS;oBACTS,OAAOA,MAAMa,OAAO,IAAI;gBAC1B;YACF;QACF;QAEA,MAAMrB,WAAW;YACfD,SAASkB,OAAON,MAAM,KAAK;YAC3BW,WAAWN,QAAQL,MAAM;YACzBY,QAAQN,OAAON,MAAM;YACrBa,MAAMT,kBAAkB,SAAS;YACjCU,WAAW;YACXpB;YACAW;YACAC,QAAQA,OAAON,MAAM,GAAG,IAAIM,SAASS;QACvC;QAEA,OAAOnB,oBAAY,CAACJ,IAAI,CAACH,UAAU;YACjCS,QAAQQ,OAAON,MAAM,KAAK,IAAI,MAAM;QACtC;IACF,EAAE,OAAOH,OAAY;QACnB,OAAOmB,IAAAA,wBAAc,EAACnB;IACxB;AACF"}