6a5627b1d607b6ec327e0b5cfcb08927
/**
 * Jest Tests for New Static API Endpoints
 * Testing all refactored API endpoints from /api/drive/files/[fileId]/* to /api/drive/files/*
 */ "use strict";
// Mock NextAuth
jest.mock('next-auth', ()=>({
        default: jest.fn(()=>({
                handlers: {
                    GET: jest.fn(),
                    POST: jest.fn()
                },
                auth: jest.fn(),
                signIn: jest.fn(),
                signOut: jest.fn()
            }))
    }));
// Mock Google Drive Service
jest.mock('@/lib/google-drive/service', ()=>({
        GoogleDriveService: jest.fn().mockImplementation(()=>({
                getFileDetails: jest.fn().mockResolvedValue({
                    id: 'test-file-id',
                    name: 'test-file.txt',
                    mimeType: 'text/plain',
                    size: '1024',
                    createdTime: '2025-01-01T00:00:00Z',
                    modifiedTime: '2025-01-01T00:00:00Z'
                }),
                getFileMetadata: jest.fn().mockResolvedValue({
                    id: 'test-file-id',
                    name: 'test-file.txt',
                    mimeType: 'text/plain',
                    size: '1024'
                }),
                moveFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                copyFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                renameFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                moveToTrash: jest.fn().mockResolvedValue({
                    success: true
                }),
                untrashFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                deleteFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                shareFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                exportFile: jest.fn().mockResolvedValue(new ArrayBuffer(8)),
                downloadFile: jest.fn().mockResolvedValue('file-content')
            }))
    }));
// Mock API Utils
jest.mock('@/lib/api-utils', ()=>({
        initDriveService: jest.fn().mockResolvedValue({
            success: true,
            driveService: {
                getFileDetails: jest.fn().mockResolvedValue({
                    id: 'test-file-id',
                    name: 'test-file.txt'
                }),
                getFileMetadata: jest.fn().mockResolvedValue({
                    id: 'test-file-id',
                    name: 'test-file.txt'
                }),
                moveFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                copyFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                renameFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                moveToTrash: jest.fn().mockResolvedValue({
                    success: true
                }),
                untrashFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                deleteFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                shareFile: jest.fn().mockResolvedValue({
                    success: true
                }),
                exportFile: jest.fn().mockResolvedValue(new ArrayBuffer(8)),
                downloadFile: jest.fn().mockResolvedValue('file-content')
            }
        }),
        handleApiError: jest.fn().mockReturnValue(new Response('Error', {
            status: 500
        })),
        validateShareRequest: jest.fn().mockReturnValue(true),
        validateOperationsRequest: jest.fn().mockReturnValue(true)
    }));
// Mock throttle and retry
jest.mock('@/lib/api-throttle', ()=>({
        throttledDriveRequest: jest.fn().mockImplementation((fn)=>fn())
    }));
jest.mock('@/lib/api-retry', ()=>({
        retryDriveApiCall: jest.fn().mockImplementation((fn)=>fn())
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../src/app/api/drive/files/details/route");
const _route1 = require("../../src/app/api/drive/files/download/route");
const _route2 = require("../../src/app/api/drive/files/move/route");
const _route3 = require("../../src/app/api/drive/files/copy/route");
const _route4 = require("../../src/app/api/drive/files/rename/route");
const _route5 = require("../../src/app/api/drive/files/trash/route");
const _route6 = require("../../src/app/api/drive/files/untrash/route");
const _route7 = require("../../src/app/api/drive/files/delete/route");
const _route8 = require("../../src/app/api/drive/files/share/route");
const _route9 = require("../../src/app/api/drive/files/export/route");
const _route10 = require("../../src/app/api/drive/files/essential/route");
const _route11 = require("../../src/app/api/drive/files/extended/route");
describe('API Endpoints - New Static Routing', ()=>{
    let mockRequest;
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    const createMockRequest = (body)=>{
        return new _server.NextRequest('http://localhost:3000/test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });
    };
    describe('/api/drive/files/details', ()=>{
        it('should handle single file details request', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('details');
            expect(data.fileDetails).toBeDefined();
        });
        it('should return 400 for missing fileId', async ()=>{
            mockRequest = createMockRequest({});
            const response = await (0, _route.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error).toBe('File ID is required');
        });
    });
    describe('/api/drive/files/essential', ()=>{
        it('should return essential metadata', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route10.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('essential');
            expect(data.fileMetadata).toBeDefined();
        });
    });
    describe('/api/drive/files/extended', ()=>{
        it('should return extended metadata', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route11.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('extended');
            expect(data.fileMetadata).toBeDefined();
        });
    });
    describe('/api/drive/files/move', ()=>{
        it('should handle single file move', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id',
                targetFolderId: 'target-folder-id'
            });
            const response = await (0, _route2.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('move');
            expect(data.type).toBe('single');
        });
        it('should handle bulk file move', async ()=>{
            mockRequest = createMockRequest({
                items: [
                    {
                        id: 'file1',
                        name: 'file1.txt',
                        isFolder: false
                    },
                    {
                        id: 'file2',
                        name: 'file2.txt',
                        isFolder: false
                    }
                ],
                targetFolderId: 'target-folder-id'
            });
            const response = await (0, _route2.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('move');
            expect(data.type).toBe('bulk');
            expect(data.processed).toBe(2);
        });
        it('should return 400 for missing targetFolderId', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route2.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error).toBe('Target folder ID is required');
        });
    });
    describe('/api/drive/files/copy', ()=>{
        it('should handle file copy operation', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id',
                targetFolderId: 'target-folder-id'
            });
            const response = await (0, _route3.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('copy');
            expect(data.targetFolderId).toBe('target-folder-id');
        });
        it('should handle bulk copy with name prefix', async ()=>{
            mockRequest = createMockRequest({
                items: [
                    {
                        id: 'file1',
                        name: 'file1.txt',
                        isFolder: false
                    }
                ],
                targetFolderId: 'target-folder-id',
                namePrefix: 'Copy_'
            });
            const response = await (0, _route3.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.namePrefix).toBe('Copy_');
        });
    });
    describe('/api/drive/files/rename', ()=>{
        it('should handle single file rename', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id',
                newName: 'new-file-name.txt'
            });
            const response = await (0, _route4.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('rename');
        });
        it('should handle bulk rename with prefix', async ()=>{
            mockRequest = createMockRequest({
                items: [
                    {
                        id: 'file1',
                        name: 'file1.txt',
                        isFolder: false
                    },
                    {
                        id: 'file2',
                        name: 'file2.txt',
                        isFolder: false
                    }
                ],
                namePrefix: 'Bulk_'
            });
            const response = await (0, _route4.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.type).toBe('bulk');
        });
    });
    describe('/api/drive/files/trash', ()=>{
        it('should handle trash operation', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route5.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('trash');
        });
    });
    describe('/api/drive/files/untrash', ()=>{
        it('should handle untrash operation', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route6.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('untrash');
        });
    });
    describe('/api/drive/files/delete', ()=>{
        it('should handle permanent delete operation', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id'
            });
            const response = await (0, _route7.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('delete');
        });
    });
    describe('/api/drive/files/share', ()=>{
        it('should handle share operation', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id',
                permissions: [
                    {
                        type: 'user',
                        role: 'reader',
                        emailAddress: 'test@example.com'
                    }
                ],
                notifyUsers: false
            });
            const response = await (0, _route8.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('share');
        });
    });
    describe('/api/drive/files/export', ()=>{
        it('should handle export operation', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id',
                exportFormat: 'pdf'
            });
            const response = await (0, _route9.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
            expect(data.operation).toBe('export');
            expect(data.exportFormat).toBe('pdf');
        });
    });
    describe('/api/drive/files/download', ()=>{
        it('should handle single file download', async ()=>{
            mockRequest = createMockRequest({
                fileId: 'test-file-id',
                downloadMode: 'exportLinks'
            });
            const response = await (0, _route1.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
            expect(data.success).toBe(true);
        });
        it('should handle bulk download', async ()=>{
            mockRequest = createMockRequest({
                items: [
                    {
                        id: 'file1',
                        name: 'file1.txt',
                        isFolder: false
                    }
                ],
                downloadMode: 'exportLinks'
            });
            const response = await (0, _route1.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(200);
        });
        it('should return error for missing fileId in single mode', async ()=>{
            mockRequest = createMockRequest({
                downloadMode: 'oneByOne'
            });
            const response = await (0, _route1.POST)(mockRequest);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error).toBe('fileId is required for single file download');
        });
    });
});
describe('API Endpoints - Error Handling', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should handle authentication failure', async ()=>{
        // Mock authentication failure
        const { initDriveService } = require('@/lib/api-utils');
        initDriveService.mockResolvedValueOnce({
            success: false,
            response: new Response('Unauthorized', {
                status: 401
            })
        });
        const mockRequest = new _server.NextRequest('http://localhost:3000/test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fileId: 'test-file-id'
            })
        });
        const response = await (0, _route.POST)(mockRequest);
        expect(response.status).toBe(401);
    });
    it('should handle service errors gracefully', async ()=>{
        // Mock service error
        const { initDriveService } = require('@/lib/api-utils');
        initDriveService.mockResolvedValueOnce({
            success: true,
            driveService: {
                getFileDetails: jest.fn().mockRejectedValue(new Error('Service error'))
            }
        });
        const mockRequest = new _server.NextRequest('http://localhost:3000/test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fileId: 'test-file-id'
            })
        });
        const response = await (0, _route.POST)(mockRequest);
        expect(response.status).toBe(500);
    });
});
describe('API Endpoints - Request Validation', ()=>{
    const createMockRequest = (body)=>{
        return new _server.NextRequest('http://localhost:3000/test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });
    };
    it('should validate required fields for each endpoint', async ()=>{
        // Test missing fileId for details endpoint
        const detailsRequest = createMockRequest({});
        const detailsResponse = await (0, _route.POST)(detailsRequest);
        expect(detailsResponse.status).toBe(400);
        // Test missing targetFolderId for move endpoint
        const moveRequest = createMockRequest({
            fileId: 'test'
        });
        const moveResponse = await (0, _route2.POST)(moveRequest);
        expect(moveResponse.status).toBe(400);
    });
    it('should handle malformed JSON', async ()=>{
        const malformedRequest = new _server.NextRequest('http://localhost:3000/test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: 'invalid-json'
        });
        try {
            await (0, _route.POST)(malformedRequest);
        } catch (error) {
            expect(error).toBeInstanceOf(Error);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,