{"version":3,"names":["cov_ocmpiggmd","actualCoverage","s","GET","f","driveService","response","_apiutils","initDriveService","b","Error","aboutResponse","drive","about","get","fields","data","storageQuota","user","allFilesResponse","sharedResponse","starredResponse","Promise","all","files","list","q","pageSize","allFiles","totalUsedBytes","largestFiles","filesByType","documents","spreadsheets","presentations","images","videos","pdfs","other","fileSizesByType","forEach","file","size","parseInt","mimeType","push","name","startsWith","sort","a","slice","quotaLimit","limit","quotaUsage","usage","quotaUsageInDrive","usageInDrive","storageAnalytics","quota","used","usedInDrive","usedInDriveTrash","usageInDriveTrash","available","usagePercentage","Math","round","hasUnlimitedStorage","fileStats","totalFiles","length","totalSizeBytes","sharedFiles","starredFiles","systemCapabilities","maxUploadSize","canCreateDrives","maxImportSizes","importFormats","exportFormats","folderColorPalette","driveThemes","displayName","emailAddress","photoLink","lastUpdated","Date","toISOString","_server","NextResponse","json","success","error","console","handleApiError"],"sources":["/home/runner/workspace/src/app/api/drive/storage/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function GET() {\n  try {\n    const { driveService, response } = await initDriveService()\n    if (response) return response\n    if (!driveService) throw new Error('Drive service not available')\n\n    // Get comprehensive about information including storage quota and system capabilities\n    const aboutResponse = await driveService.drive.about.get({\n      fields:\n        'storageQuota,user,maxUploadSize,maxImportSizes,importFormats,exportFormats,canCreateDrives,folderColorPalette,driveThemes',\n    })\n\n    const about = aboutResponse.data\n    const storageQuota = about.storageQuota\n    const user = about.user\n\n    // Get file statistics by querying files with specific criteria\n    const [\n      allFilesResponse,\n      ,\n      ,\n      ,\n      ,\n      ,\n      ,\n      sharedResponse,\n      starredResponse,\n    ] = await Promise.all([\n      // All files count and basic stats\n      driveService.drive.files.list({\n        q: 'trashed=false',\n        fields: 'files(id,name,size,mimeType,createdTime,modifiedTime,shared,starred)',\n        pageSize: 1000,\n      }),\n      // Google Docs\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/vnd.google-apps.document'\",\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Google Sheets\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/vnd.google-apps.spreadsheet'\",\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Google Slides\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/vnd.google-apps.presentation'\",\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Images\n      driveService.drive.files.list({\n        q: \"trashed=false and (mimeType contains 'image/')\",\n        fields: 'files(id,size)',\n        pageSize: 1000,\n      }),\n      // Videos\n      driveService.drive.files.list({\n        q: \"trashed=false and (mimeType contains 'video/')\",\n        fields: 'files(id,size)',\n        pageSize: 1000,\n      }),\n      // PDFs\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/pdf'\",\n        fields: 'files(id,size)',\n        pageSize: 1000,\n      }),\n      // Shared files\n      driveService.drive.files.list({\n        q: 'trashed=false and sharedWithMe=true',\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Starred files\n      driveService.drive.files.list({\n        q: 'trashed=false and starred=true',\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n    ])\n\n    const allFiles = allFilesResponse.data.files || []\n\n    // Calculate total size of files (excluding Google Workspace files which don't count toward quota)\n    let totalUsedBytes = 0\n    let largestFiles: Array<{ name: string; size: number; mimeType: string }> = []\n\n    const filesByType = {\n      documents: 0,\n      spreadsheets: 0,\n      presentations: 0,\n      images: 0,\n      videos: 0,\n      pdfs: 0,\n      other: 0,\n    }\n\n    const fileSizesByType = {\n      images: 0,\n      videos: 0,\n      pdfs: 0,\n      other: 0,\n    }\n\n    allFiles.forEach(file => {\n      const size = file.size ? parseInt(file.size) : 0\n      const mimeType = file.mimeType || ''\n\n      // Only count files with actual storage size toward quota\n      if (size > 0) {\n        totalUsedBytes += size\n\n        // Track largest files\n        largestFiles.push({\n          name: file.name || 'Unnamed',\n          size,\n          mimeType,\n        })\n      }\n\n      // Categorize files\n      if (mimeType === 'application/vnd.google-apps.document') {\n        filesByType.documents++\n      } else if (mimeType === 'application/vnd.google-apps.spreadsheet') {\n        filesByType.spreadsheets++\n      } else if (mimeType === 'application/vnd.google-apps.presentation') {\n        filesByType.presentations++\n      } else if (mimeType.startsWith('image/')) {\n        filesByType.images++\n        fileSizesByType.images += size\n      } else if (mimeType.startsWith('video/')) {\n        filesByType.videos++\n        fileSizesByType.videos += size\n      } else if (mimeType === 'application/pdf') {\n        filesByType.pdfs++\n        fileSizesByType.pdfs += size\n      } else {\n        filesByType.other++\n        fileSizesByType.other += size\n      }\n    })\n\n    // Sort largest files by size\n    largestFiles.sort((a, b) => b.size - a.size)\n    largestFiles = largestFiles.slice(0, 10) // Top 10 largest files\n\n    // Parse storage quota information\n    const quotaLimit = storageQuota?.limit ? parseInt(storageQuota.limit) : null\n    const quotaUsage = storageQuota?.usage ? parseInt(storageQuota.usage) : totalUsedBytes\n    const quotaUsageInDrive = storageQuota?.usageInDrive ? parseInt(storageQuota.usageInDrive) : totalUsedBytes\n\n    // Calculate comprehensive storage analytics with all Google Drive API statistics\n    const storageAnalytics = {\n      quota: {\n        limit: quotaLimit,\n        used: quotaUsage,\n        usedInDrive: quotaUsageInDrive,\n        usedInDriveTrash: storageQuota?.usageInDriveTrash ? parseInt(storageQuota.usageInDriveTrash) : 0,\n        available: quotaLimit ? quotaLimit - quotaUsage : null,\n        usagePercentage: quotaLimit ? Math.round((quotaUsage / quotaLimit) * 100) : null,\n        hasUnlimitedStorage: !quotaLimit,\n      },\n      fileStats: {\n        totalFiles: allFiles.length,\n        totalSizeBytes: totalUsedBytes,\n        filesByType,\n        fileSizesByType,\n        sharedFiles: sharedResponse.data.files?.length || 0,\n        starredFiles: starredResponse.data.files?.length || 0,\n      },\n      largestFiles,\n      systemCapabilities: {\n        maxUploadSize: about.maxUploadSize ? parseInt(about.maxUploadSize) : null,\n        canCreateDrives: about.canCreateDrives || false,\n        maxImportSizes: about.maxImportSizes || {},\n        importFormats: about.importFormats || {},\n        exportFormats: about.exportFormats || {},\n        folderColorPalette: about.folderColorPalette || [],\n        driveThemes: about.driveThemes || [],\n      },\n      user: {\n        displayName: user?.displayName,\n        emailAddress: user?.emailAddress,\n        photoLink: user?.photoLink,\n      },\n      lastUpdated: new Date().toISOString(),\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: storageAnalytics,\n    })\n  } catch (error) {\n    console.error('Storage analytics error:', error)\n    return handleApiError(error)\n  }\n}\n"],"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","ignoreList":[]}