21ea0e83c32f1993e607e947d3a382c4
"use strict";

/* istanbul ignore next */
function cov_ocmpiggmd() {
  var path = "/home/runner/workspace/src/app/api/drive/storage/route.ts";
  var hash = "c11c866fe68d25409681b9c743d3c049bfcfe967";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/storage/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 54
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 43
        },
        end: {
          line: 15,
          column: 82
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "8": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 74
        }
      },
      "10": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 74
        }
      },
      "11": {
        start: {
          line: 19,
          column: 30
        },
        end: {
          line: 21,
          column: 10
        }
      },
      "12": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "13": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "14": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "15": {
        start: {
          line: 26,
          column: 80
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "16": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "17": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 30
        }
      },
      "18": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 85,
          column: 29
        }
      },
      "19": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "20": {
        start: {
          line: 95,
          column: 32
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "21": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "22": {
        start: {
          line: 102,
          column: 25
        },
        end: {
          line: 102,
          column: 60
        }
      },
      "23": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 103,
          column: 48
        }
      },
      "24": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "25": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 39
        }
      },
      "26": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 112,
          column: 19
        }
      },
      "27": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "28": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 40
        }
      },
      "29": {
        start: {
          line: 117,
          column: 19
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "30": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 43
        }
      },
      "31": {
        start: {
          line: 119,
          column: 19
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "32": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 44
        }
      },
      "33": {
        start: {
          line: 121,
          column: 19
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "34": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 37
        }
      },
      "35": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 47
        }
      },
      "36": {
        start: {
          line: 124,
          column: 19
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "37": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 37
        }
      },
      "38": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 47
        }
      },
      "39": {
        start: {
          line: 127,
          column: 19
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "40": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 35
        }
      },
      "41": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 45
        }
      },
      "42": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 36
        }
      },
      "43": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 46
        }
      },
      "44": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 51
        }
      },
      "45": {
        start: {
          line: 136,
          column: 34
        },
        end: {
          line: 136,
          column: 49
        }
      },
      "46": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "47": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 84
        }
      },
      "48": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 94
        }
      },
      "49": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 142,
          column: 115
        }
      },
      "50": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "51": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      },
      "52": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 57
        }
      },
      "53": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 101,
            column: 25
          },
          end: {
            line: 101,
            column: 26
          }
        },
        loc: {
          start: {
            line: 101,
            column: 33
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 101
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 136,
            column: 26
          },
          end: {
            line: 136,
            column: 27
          }
        },
        loc: {
          start: {
            line: 136,
            column: 34
          },
          end: {
            line: 136,
            column: 49
          }
        },
        line: 136
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 74
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 74
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 25
          },
          end: {
            line: 82,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 25
          },
          end: {
            line: 82,
            column: 52
          }
        }, {
          start: {
            line: 82,
            column: 56
          },
          end: {
            line: 82,
            column: 58
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 102,
            column: 25
          },
          end: {
            line: 102,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 37
          },
          end: {
            line: 102,
            column: 56
          }
        }, {
          start: {
            line: 102,
            column: 59
          },
          end: {
            line: 102,
            column: 60
          }
        }],
        line: 102
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 29
          },
          end: {
            line: 103,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 29
          },
          end: {
            line: 103,
            column: 42
          }
        }, {
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 103,
            column: 48
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 26
          },
          end: {
            line: 109,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 26
          },
          end: {
            line: 109,
            column: 35
          }
        }, {
          start: {
            line: 109,
            column: 39
          },
          end: {
            line: 109,
            column: 48
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: 117,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }],
        line: 115
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: 119,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: 124,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: 127,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 127,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 133,
            column: 13
          }
        }],
        line: 127
      },
      "13": {
        loc: {
          start: {
            line: 140,
            column: 27
          },
          end: {
            line: 140,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 49
          },
          end: {
            line: 140,
            column: 77
          }
        }, {
          start: {
            line: 140,
            column: 80
          },
          end: {
            line: 140,
            column: 84
          }
        }],
        line: 140
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 27
          },
          end: {
            line: 141,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 49
          },
          end: {
            line: 141,
            column: 77
          }
        }, {
          start: {
            line: 141,
            column: 80
          },
          end: {
            line: 141,
            column: 94
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 142,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 63
          },
          end: {
            line: 142,
            column: 98
          }
        }, {
          start: {
            line: 142,
            column: 101
          },
          end: {
            line: 142,
            column: 115
          }
        }],
        line: 142
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 34
          },
          end: {
            line: 149,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 68
          },
          end: {
            line: 149,
            column: 108
          }
        }, {
          start: {
            line: 149,
            column: 111
          },
          end: {
            line: 149,
            column: 112
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 150,
            column: 27
          },
          end: {
            line: 150,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 40
          },
          end: {
            line: 150,
            column: 63
          }
        }, {
          start: {
            line: 150,
            column: 66
          },
          end: {
            line: 150,
            column: 70
          }
        }],
        line: 150
      },
      "18": {
        loc: {
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 151,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 46
          },
          end: {
            line: 151,
            column: 87
          }
        }, {
          start: {
            line: 151,
            column: 90
          },
          end: {
            line: 151,
            column: 94
          }
        }],
        line: 151
      },
      "19": {
        loc: {
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 159,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 159,
            column: 62
          }
        }, {
          start: {
            line: 159,
            column: 66
          },
          end: {
            line: 159,
            column: 67
          }
        }],
        line: 159
      },
      "20": {
        loc: {
          start: {
            line: 160,
            column: 30
          },
          end: {
            line: 160,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 30
          },
          end: {
            line: 160,
            column: 64
          }
        }, {
          start: {
            line: 160,
            column: 68
          },
          end: {
            line: 160,
            column: 69
          }
        }],
        line: 160
      },
      "21": {
        loc: {
          start: {
            line: 164,
            column: 31
          },
          end: {
            line: 164,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 53
          },
          end: {
            line: 164,
            column: 82
          }
        }, {
          start: {
            line: 164,
            column: 85
          },
          end: {
            line: 164,
            column: 89
          }
        }],
        line: 164
      },
      "22": {
        loc: {
          start: {
            line: 165,
            column: 33
          },
          end: {
            line: 165,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 33
          },
          end: {
            line: 165,
            column: 54
          }
        }, {
          start: {
            line: 165,
            column: 58
          },
          end: {
            line: 165,
            column: 63
          }
        }],
        line: 165
      },
      "23": {
        loc: {
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 52
          }
        }, {
          start: {
            line: 166,
            column: 56
          },
          end: {
            line: 166,
            column: 58
          }
        }],
        line: 166
      },
      "24": {
        loc: {
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 167,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 167,
            column: 50
          }
        }, {
          start: {
            line: 167,
            column: 54
          },
          end: {
            line: 167,
            column: 56
          }
        }],
        line: 167
      },
      "25": {
        loc: {
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 168,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 168,
            column: 50
          }
        }, {
          start: {
            line: 168,
            column: 54
          },
          end: {
            line: 168,
            column: 56
          }
        }],
        line: 168
      },
      "26": {
        loc: {
          start: {
            line: 169,
            column: 36
          },
          end: {
            line: 169,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 36
          },
          end: {
            line: 169,
            column: 60
          }
        }, {
          start: {
            line: 169,
            column: 64
          },
          end: {
            line: 169,
            column: 66
          }
        }],
        line: 169
      },
      "27": {
        loc: {
          start: {
            line: 170,
            column: 29
          },
          end: {
            line: 170,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 29
          },
          end: {
            line: 170,
            column: 46
          }
        }, {
          start: {
            line: 170,
            column: 50
          },
          end: {
            line: 170,
            column: 52
          }
        }],
        line: 170
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/storage/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server'\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function GET() {\n  try {\n    const { driveService, response } = await initDriveService()\n    if (response) return response\n    if (!driveService) throw new Error('Drive service not available')\n\n    // Get comprehensive about information including storage quota and system capabilities\n    const aboutResponse = await driveService.drive.about.get({\n      fields:\n        'storageQuota,user,maxUploadSize,maxImportSizes,importFormats,exportFormats,canCreateDrives,folderColorPalette,driveThemes',\n    })\n\n    const about = aboutResponse.data\n    const storageQuota = about.storageQuota\n    const user = about.user\n\n    // Get file statistics by querying files with specific criteria\n    const [\n      allFilesResponse,\n      ,\n      ,\n      ,\n      ,\n      ,\n      ,\n      sharedResponse,\n      starredResponse,\n    ] = await Promise.all([\n      // All files count and basic stats\n      driveService.drive.files.list({\n        q: 'trashed=false',\n        fields: 'files(id,name,size,mimeType,createdTime,modifiedTime,shared,starred)',\n        pageSize: 1000,\n      }),\n      // Google Docs\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/vnd.google-apps.document'\",\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Google Sheets\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/vnd.google-apps.spreadsheet'\",\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Google Slides\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/vnd.google-apps.presentation'\",\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Images\n      driveService.drive.files.list({\n        q: \"trashed=false and (mimeType contains 'image/')\",\n        fields: 'files(id,size)',\n        pageSize: 1000,\n      }),\n      // Videos\n      driveService.drive.files.list({\n        q: \"trashed=false and (mimeType contains 'video/')\",\n        fields: 'files(id,size)',\n        pageSize: 1000,\n      }),\n      // PDFs\n      driveService.drive.files.list({\n        q: \"trashed=false and mimeType='application/pdf'\",\n        fields: 'files(id,size)',\n        pageSize: 1000,\n      }),\n      // Shared files\n      driveService.drive.files.list({\n        q: 'trashed=false and sharedWithMe=true',\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n      // Starred files\n      driveService.drive.files.list({\n        q: 'trashed=false and starred=true',\n        fields: 'files(id)',\n        pageSize: 1000,\n      }),\n    ])\n\n    const allFiles = allFilesResponse.data.files || []\n\n    // Calculate total size of files (excluding Google Workspace files which don't count toward quota)\n    let totalUsedBytes = 0\n    let largestFiles: Array<{ name: string; size: number; mimeType: string }> = []\n\n    const filesByType = {\n      documents: 0,\n      spreadsheets: 0,\n      presentations: 0,\n      images: 0,\n      videos: 0,\n      pdfs: 0,\n      other: 0,\n    }\n\n    const fileSizesByType = {\n      images: 0,\n      videos: 0,\n      pdfs: 0,\n      other: 0,\n    }\n\n    allFiles.forEach(file => {\n      const size = file.size ? parseInt(file.size) : 0\n      const mimeType = file.mimeType || ''\n\n      // Only count files with actual storage size toward quota\n      if (size > 0) {\n        totalUsedBytes += size\n\n        // Track largest files\n        largestFiles.push({\n          name: file.name || 'Unnamed',\n          size,\n          mimeType,\n        })\n      }\n\n      // Categorize files\n      if (mimeType === 'application/vnd.google-apps.document') {\n        filesByType.documents++\n      } else if (mimeType === 'application/vnd.google-apps.spreadsheet') {\n        filesByType.spreadsheets++\n      } else if (mimeType === 'application/vnd.google-apps.presentation') {\n        filesByType.presentations++\n      } else if (mimeType.startsWith('image/')) {\n        filesByType.images++\n        fileSizesByType.images += size\n      } else if (mimeType.startsWith('video/')) {\n        filesByType.videos++\n        fileSizesByType.videos += size\n      } else if (mimeType === 'application/pdf') {\n        filesByType.pdfs++\n        fileSizesByType.pdfs += size\n      } else {\n        filesByType.other++\n        fileSizesByType.other += size\n      }\n    })\n\n    // Sort largest files by size\n    largestFiles.sort((a, b) => b.size - a.size)\n    largestFiles = largestFiles.slice(0, 10) // Top 10 largest files\n\n    // Parse storage quota information\n    const quotaLimit = storageQuota?.limit ? parseInt(storageQuota.limit) : null\n    const quotaUsage = storageQuota?.usage ? parseInt(storageQuota.usage) : totalUsedBytes\n    const quotaUsageInDrive = storageQuota?.usageInDrive ? parseInt(storageQuota.usageInDrive) : totalUsedBytes\n\n    // Calculate comprehensive storage analytics with all Google Drive API statistics\n    const storageAnalytics = {\n      quota: {\n        limit: quotaLimit,\n        used: quotaUsage,\n        usedInDrive: quotaUsageInDrive,\n        usedInDriveTrash: storageQuota?.usageInDriveTrash ? parseInt(storageQuota.usageInDriveTrash) : 0,\n        available: quotaLimit ? quotaLimit - quotaUsage : null,\n        usagePercentage: quotaLimit ? Math.round((quotaUsage / quotaLimit) * 100) : null,\n        hasUnlimitedStorage: !quotaLimit,\n      },\n      fileStats: {\n        totalFiles: allFiles.length,\n        totalSizeBytes: totalUsedBytes,\n        filesByType,\n        fileSizesByType,\n        sharedFiles: sharedResponse.data.files?.length || 0,\n        starredFiles: starredResponse.data.files?.length || 0,\n      },\n      largestFiles,\n      systemCapabilities: {\n        maxUploadSize: about.maxUploadSize ? parseInt(about.maxUploadSize) : null,\n        canCreateDrives: about.canCreateDrives || false,\n        maxImportSizes: about.maxImportSizes || {},\n        importFormats: about.importFormats || {},\n        exportFormats: about.exportFormats || {},\n        folderColorPalette: about.folderColorPalette || [],\n        driveThemes: about.driveThemes || [],\n      },\n      user: {\n        displayName: user?.displayName,\n        emailAddress: user?.emailAddress,\n        photoLink: user?.photoLink,\n      },\n      lastUpdated: new Date().toISOString(),\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: storageAnalytics,\n    })\n  } catch (error) {\n    console.error('Storage analytics error:', error)\n    return handleApiError(error)\n  }\n}\n"],
      names: ["GET", "driveService", "response", "initDriveService", "Error", "aboutResponse", "drive", "about", "get", "fields", "data", "storageQuota", "user", "allFilesResponse", "sharedResponse", "starredResponse", "Promise", "all", "files", "list", "q", "pageSize", "allFiles", "totalUsedBytes", "largestFiles", "filesByType", "documents", "spreadsheets", "presentations", "images", "videos", "pdfs", "other", "fileSizesByType", "forEach", "file", "size", "parseInt", "mimeType", "push", "name", "startsWith", "sort", "a", "b", "slice", "quotaLimit", "limit", "quotaUsage", "usage", "quotaUsageInDrive", "usageInDrive", "storageAnalytics", "quota", "used", "usedInDrive", "usedInDriveTrash", "usageInDriveTrash", "available", "usagePercentage", "Math", "round", "hasUnlimitedStorage", "fileStats", "totalFiles", "length", "totalSizeBytes", "sharedFiles", "starredFiles", "systemCapabilities", "maxUploadSize", "canCreateDrives", "maxImportSizes", "importFormats", "exportFormats", "folderColorPalette", "driveThemes", "displayName", "emailAddress", "photoLink", "lastUpdated", "Date", "toISOString", "NextResponse", "json", "success", "error", "console", "handleApiError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c11c866fe68d25409681b9c743d3c049bfcfe967"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ocmpiggmd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ocmpiggmd();
cov_ocmpiggmd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ocmpiggmd().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_ocmpiggmd().f[0]++;
    cov_ocmpiggmd().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_ocmpiggmd().s[3]++, require("next/server"));
const _apiutils =
/* istanbul ignore next */
(cov_ocmpiggmd().s[4]++, require("../../../../lib/api-utils"));
async function GET() {
  /* istanbul ignore next */
  cov_ocmpiggmd().f[1]++;
  cov_ocmpiggmd().s[5]++;
  try {
    const {
      driveService,
      response
    } =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[6]++, await (0, _apiutils.initDriveService)());
    /* istanbul ignore next */
    cov_ocmpiggmd().s[7]++;
    if (response) {
      /* istanbul ignore next */
      cov_ocmpiggmd().b[0][0]++;
      cov_ocmpiggmd().s[8]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_ocmpiggmd().b[0][1]++;
    }
    cov_ocmpiggmd().s[9]++;
    if (!driveService) {
      /* istanbul ignore next */
      cov_ocmpiggmd().b[1][0]++;
      cov_ocmpiggmd().s[10]++;
      throw new Error('Drive service not available');
    } else
    /* istanbul ignore next */
    {
      cov_ocmpiggmd().b[1][1]++;
    }
    // Get comprehensive about information including storage quota and system capabilities
    const aboutResponse =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[11]++, await driveService.drive.about.get({
      fields: 'storageQuota,user,maxUploadSize,maxImportSizes,importFormats,exportFormats,canCreateDrives,folderColorPalette,driveThemes'
    }));
    const about =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[12]++, aboutResponse.data);
    const storageQuota =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[13]++, about.storageQuota);
    const user =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[14]++, about.user);
    // Get file statistics by querying files with specific criteria
    const [allFilesResponse,,,,,,, sharedResponse, starredResponse] =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[15]++, await Promise.all([
    // All files count and basic stats
    driveService.drive.files.list({
      q: 'trashed=false',
      fields: 'files(id,name,size,mimeType,createdTime,modifiedTime,shared,starred)',
      pageSize: 1000
    }),
    // Google Docs
    driveService.drive.files.list({
      q: "trashed=false and mimeType='application/vnd.google-apps.document'",
      fields: 'files(id)',
      pageSize: 1000
    }),
    // Google Sheets
    driveService.drive.files.list({
      q: "trashed=false and mimeType='application/vnd.google-apps.spreadsheet'",
      fields: 'files(id)',
      pageSize: 1000
    }),
    // Google Slides
    driveService.drive.files.list({
      q: "trashed=false and mimeType='application/vnd.google-apps.presentation'",
      fields: 'files(id)',
      pageSize: 1000
    }),
    // Images
    driveService.drive.files.list({
      q: "trashed=false and (mimeType contains 'image/')",
      fields: 'files(id,size)',
      pageSize: 1000
    }),
    // Videos
    driveService.drive.files.list({
      q: "trashed=false and (mimeType contains 'video/')",
      fields: 'files(id,size)',
      pageSize: 1000
    }),
    // PDFs
    driveService.drive.files.list({
      q: "trashed=false and mimeType='application/pdf'",
      fields: 'files(id,size)',
      pageSize: 1000
    }),
    // Shared files
    driveService.drive.files.list({
      q: 'trashed=false and sharedWithMe=true',
      fields: 'files(id)',
      pageSize: 1000
    }),
    // Starred files
    driveService.drive.files.list({
      q: 'trashed=false and starred=true',
      fields: 'files(id)',
      pageSize: 1000
    })]));
    const allFiles =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[16]++,
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[2][0]++, allFilesResponse.data.files) ||
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[2][1]++, []));
    // Calculate total size of files (excluding Google Workspace files which don't count toward quota)
    let totalUsedBytes =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[17]++, 0);
    let largestFiles =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[18]++, []);
    const filesByType =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[19]++, {
      documents: 0,
      spreadsheets: 0,
      presentations: 0,
      images: 0,
      videos: 0,
      pdfs: 0,
      other: 0
    });
    const fileSizesByType =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[20]++, {
      images: 0,
      videos: 0,
      pdfs: 0,
      other: 0
    });
    /* istanbul ignore next */
    cov_ocmpiggmd().s[21]++;
    allFiles.forEach(file => {
      /* istanbul ignore next */
      cov_ocmpiggmd().f[2]++;
      const size =
      /* istanbul ignore next */
      (cov_ocmpiggmd().s[22]++, file.size ?
      /* istanbul ignore next */
      (cov_ocmpiggmd().b[3][0]++, parseInt(file.size)) :
      /* istanbul ignore next */
      (cov_ocmpiggmd().b[3][1]++, 0));
      const mimeType =
      /* istanbul ignore next */
      (cov_ocmpiggmd().s[23]++,
      /* istanbul ignore next */
      (cov_ocmpiggmd().b[4][0]++, file.mimeType) ||
      /* istanbul ignore next */
      (cov_ocmpiggmd().b[4][1]++, ''));
      // Only count files with actual storage size toward quota
      /* istanbul ignore next */
      cov_ocmpiggmd().s[24]++;
      if (size > 0) {
        /* istanbul ignore next */
        cov_ocmpiggmd().b[5][0]++;
        cov_ocmpiggmd().s[25]++;
        totalUsedBytes += size;
        // Track largest files
        /* istanbul ignore next */
        cov_ocmpiggmd().s[26]++;
        largestFiles.push({
          name:
          /* istanbul ignore next */
          (cov_ocmpiggmd().b[6][0]++, file.name) ||
          /* istanbul ignore next */
          (cov_ocmpiggmd().b[6][1]++, 'Unnamed'),
          size,
          mimeType
        });
      } else
      /* istanbul ignore next */
      {
        cov_ocmpiggmd().b[5][1]++;
      }
      // Categorize files
      cov_ocmpiggmd().s[27]++;
      if (mimeType === 'application/vnd.google-apps.document') {
        /* istanbul ignore next */
        cov_ocmpiggmd().b[7][0]++;
        cov_ocmpiggmd().s[28]++;
        filesByType.documents++;
      } else {
        /* istanbul ignore next */
        cov_ocmpiggmd().b[7][1]++;
        cov_ocmpiggmd().s[29]++;
        if (mimeType === 'application/vnd.google-apps.spreadsheet') {
          /* istanbul ignore next */
          cov_ocmpiggmd().b[8][0]++;
          cov_ocmpiggmd().s[30]++;
          filesByType.spreadsheets++;
        } else {
          /* istanbul ignore next */
          cov_ocmpiggmd().b[8][1]++;
          cov_ocmpiggmd().s[31]++;
          if (mimeType === 'application/vnd.google-apps.presentation') {
            /* istanbul ignore next */
            cov_ocmpiggmd().b[9][0]++;
            cov_ocmpiggmd().s[32]++;
            filesByType.presentations++;
          } else {
            /* istanbul ignore next */
            cov_ocmpiggmd().b[9][1]++;
            cov_ocmpiggmd().s[33]++;
            if (mimeType.startsWith('image/')) {
              /* istanbul ignore next */
              cov_ocmpiggmd().b[10][0]++;
              cov_ocmpiggmd().s[34]++;
              filesByType.images++;
              /* istanbul ignore next */
              cov_ocmpiggmd().s[35]++;
              fileSizesByType.images += size;
            } else {
              /* istanbul ignore next */
              cov_ocmpiggmd().b[10][1]++;
              cov_ocmpiggmd().s[36]++;
              if (mimeType.startsWith('video/')) {
                /* istanbul ignore next */
                cov_ocmpiggmd().b[11][0]++;
                cov_ocmpiggmd().s[37]++;
                filesByType.videos++;
                /* istanbul ignore next */
                cov_ocmpiggmd().s[38]++;
                fileSizesByType.videos += size;
              } else {
                /* istanbul ignore next */
                cov_ocmpiggmd().b[11][1]++;
                cov_ocmpiggmd().s[39]++;
                if (mimeType === 'application/pdf') {
                  /* istanbul ignore next */
                  cov_ocmpiggmd().b[12][0]++;
                  cov_ocmpiggmd().s[40]++;
                  filesByType.pdfs++;
                  /* istanbul ignore next */
                  cov_ocmpiggmd().s[41]++;
                  fileSizesByType.pdfs += size;
                } else {
                  /* istanbul ignore next */
                  cov_ocmpiggmd().b[12][1]++;
                  cov_ocmpiggmd().s[42]++;
                  filesByType.other++;
                  /* istanbul ignore next */
                  cov_ocmpiggmd().s[43]++;
                  fileSizesByType.other += size;
                }
              }
            }
          }
        }
      }
    });
    // Sort largest files by size
    /* istanbul ignore next */
    cov_ocmpiggmd().s[44]++;
    largestFiles.sort((a, b) => {
      /* istanbul ignore next */
      cov_ocmpiggmd().f[3]++;
      cov_ocmpiggmd().s[45]++;
      return b.size - a.size;
    });
    /* istanbul ignore next */
    cov_ocmpiggmd().s[46]++;
    largestFiles = largestFiles.slice(0, 10) // Top 10 largest files
    ;
    // Parse storage quota information
    const quotaLimit =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[47]++, storageQuota?.limit ?
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[13][0]++, parseInt(storageQuota.limit)) :
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[13][1]++, null));
    const quotaUsage =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[48]++, storageQuota?.usage ?
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[14][0]++, parseInt(storageQuota.usage)) :
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[14][1]++, totalUsedBytes));
    const quotaUsageInDrive =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[49]++, storageQuota?.usageInDrive ?
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[15][0]++, parseInt(storageQuota.usageInDrive)) :
    /* istanbul ignore next */
    (cov_ocmpiggmd().b[15][1]++, totalUsedBytes));
    // Calculate comprehensive storage analytics with all Google Drive API statistics
    const storageAnalytics =
    /* istanbul ignore next */
    (cov_ocmpiggmd().s[50]++, {
      quota: {
        limit: quotaLimit,
        used: quotaUsage,
        usedInDrive: quotaUsageInDrive,
        usedInDriveTrash: storageQuota?.usageInDriveTrash ?
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[16][0]++, parseInt(storageQuota.usageInDriveTrash)) :
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[16][1]++, 0),
        available: quotaLimit ?
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[17][0]++, quotaLimit - quotaUsage) :
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[17][1]++, null),
        usagePercentage: quotaLimit ?
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[18][0]++, Math.round(quotaUsage / quotaLimit * 100)) :
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[18][1]++, null),
        hasUnlimitedStorage: !quotaLimit
      },
      fileStats: {
        totalFiles: allFiles.length,
        totalSizeBytes: totalUsedBytes,
        filesByType,
        fileSizesByType,
        sharedFiles:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[19][0]++, sharedResponse.data.files?.length) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[19][1]++, 0),
        starredFiles:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[20][0]++, starredResponse.data.files?.length) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[20][1]++, 0)
      },
      largestFiles,
      systemCapabilities: {
        maxUploadSize: about.maxUploadSize ?
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[21][0]++, parseInt(about.maxUploadSize)) :
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[21][1]++, null),
        canCreateDrives:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[22][0]++, about.canCreateDrives) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[22][1]++, false),
        maxImportSizes:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[23][0]++, about.maxImportSizes) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[23][1]++, {}),
        importFormats:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[24][0]++, about.importFormats) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[24][1]++, {}),
        exportFormats:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[25][0]++, about.exportFormats) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[25][1]++, {}),
        folderColorPalette:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[26][0]++, about.folderColorPalette) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[26][1]++, []),
        driveThemes:
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[27][0]++, about.driveThemes) ||
        /* istanbul ignore next */
        (cov_ocmpiggmd().b[27][1]++, [])
      },
      user: {
        displayName: user?.displayName,
        emailAddress: user?.emailAddress,
        photoLink: user?.photoLink
      },
      lastUpdated: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_ocmpiggmd().s[51]++;
    return _server.NextResponse.json({
      success: true,
      data: storageAnalytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ocmpiggmd().s[52]++;
    console.error('Storage analytics error:', error);
    /* istanbul ignore next */
    cov_ocmpiggmd().s[53]++;
    return (0, _apiutils.handleApiError)(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,