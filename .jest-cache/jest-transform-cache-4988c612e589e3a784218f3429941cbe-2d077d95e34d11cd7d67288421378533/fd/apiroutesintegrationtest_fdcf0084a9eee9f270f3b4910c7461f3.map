{"version":3,"sources":["/home/runner/workspace/__tests__/api/api-routes-integration.test.ts"],"sourcesContent":["/**\n * Integration Tests for API Routes - New Static Endpoint Structure\n * Testing API endpoint functionality with comprehensive mocking\n */\n\ndescribe('API Routes - Static Endpoint Structure', () => {\n  // Mock API utilities\n  const mockDriveService = {\n    getFileDetails: jest.fn(),\n    getFileMetadata: jest.fn(),\n    moveFile: jest.fn(),\n    copyFile: jest.fn(),\n    renameFile: jest.fn(),\n    moveToTrash: jest.fn(),\n    untrashFile: jest.fn(),\n    deleteFile: jest.fn(),\n    shareFile: jest.fn(),\n    exportFile: jest.fn(),\n    downloadFile: jest.fn(),\n  }\n\n  const mockInitDriveService = jest.fn()\n  const mockHandleApiError = jest.fn()\n  const mockValidateShareRequest = jest.fn()\n  const mockValidateOperationsRequest = jest.fn()\n\n  beforeAll(() => {\n    // Mock all dependencies\n    jest.doMock('@/lib/api-utils', () => ({\n      initDriveService: mockInitDriveService,\n      handleApiError: mockHandleApiError,\n      validateShareRequest: mockValidateShareRequest,\n      validateOperationsRequest: mockValidateOperationsRequest,\n    }))\n\n    jest.doMock('@/lib/api-throttle', () => ({\n      throttledDriveRequest: jest.fn().mockImplementation((fn) => fn()),\n    }))\n\n    jest.doMock('@/lib/api-retry', () => ({\n      retryDriveApiCall: jest.fn().mockImplementation((fn) => fn()),\n    }))\n\n    // Set up default successful authentication\n    mockInitDriveService.mockResolvedValue({\n      success: true,\n      driveService: mockDriveService,\n    })\n\n    // Set up default validation responses\n    mockValidateShareRequest.mockReturnValue(true)\n    mockValidateOperationsRequest.mockReturnValue(true)\n  })\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n\n    // Reset default mock implementations\n    mockDriveService.getFileDetails.mockResolvedValue({\n      id: 'test-file-id',\n      name: 'test-file.txt',\n      mimeType: 'text/plain',\n      size: '1024',\n      createdTime: '2025-01-01T00:00:00Z',\n      modifiedTime: '2025-01-01T00:00:00Z',\n    })\n\n    mockDriveService.moveFile.mockResolvedValue({ success: true })\n    mockDriveService.copyFile.mockResolvedValue({ success: true })\n    mockDriveService.renameFile.mockResolvedValue({ success: true })\n    mockDriveService.moveToTrash.mockResolvedValue({ success: true })\n    mockDriveService.untrashFile.mockResolvedValue({ success: true })\n    mockDriveService.deleteFile.mockResolvedValue({ success: true })\n    mockDriveService.shareFile.mockResolvedValue({ success: true })\n    mockDriveService.exportFile.mockResolvedValue(new ArrayBuffer(8))\n    mockDriveService.downloadFile.mockResolvedValue('file-content')\n  })\n\n  describe('API Endpoint Structure Validation', () => {\n    it('should have all required static endpoints', () => {\n      const expectedEndpoints = [\n        'copy',\n        'delete',\n        'details',\n        'download',\n        'essential',\n        'export',\n        'extended',\n        'move',\n        'rename',\n        'share',\n        'trash',\n        'untrash',\n      ]\n\n      expectedEndpoints.forEach((endpoint) => {\n        expect(() => {\n          require(`@/app/api/drive/files/${endpoint}/route`)\n        }).not.toThrow()\n      })\n    })\n\n    it('should export POST method for all endpoints', () => {\n      const endpoints = ['copy', 'delete', 'details', 'download', 'essential', 'export', 'extended', 'move', 'rename', 'share', 'trash', 'untrash']\n\n      endpoints.forEach((endpoint) => {\n        const route = require(`@/app/api/drive/files/${endpoint}/route`)\n        expect(typeof route.POST).toBe('function')\n      })\n    })\n  })\n\n  describe('Request Body Validation', () => {\n    it('should validate single file operation request structure', () => {\n      const singleFileRequest = {\n        fileId: 'test-file-id',\n      }\n\n      expect(singleFileRequest.fileId).toBeDefined()\n      expect(typeof singleFileRequest.fileId).toBe('string')\n    })\n\n    it('should validate bulk operation request structure', () => {\n      const bulkRequest = {\n        items: [\n          { id: 'file1', name: 'file1.txt', isFolder: false },\n          { id: 'file2', name: 'file2.txt', isFolder: false },\n        ],\n      }\n\n      expect(Array.isArray(bulkRequest.items)).toBe(true)\n      expect(bulkRequest.items.length).toBeGreaterThan(0)\n      expect(bulkRequest.items[0]).toHaveProperty('id')\n      expect(bulkRequest.items[0]).toHaveProperty('name')\n      expect(bulkRequest.items[0]).toHaveProperty('isFolder')\n    })\n\n    it('should validate operation-specific parameters', () => {\n      const moveRequest = {\n        fileId: 'test-file-id',\n        targetFolderId: 'target-folder-id',\n      }\n\n      const renameRequest = {\n        fileId: 'test-file-id',\n        newName: 'new-name.txt',\n      }\n\n      const shareRequest = {\n        fileId: 'test-file-id',\n        permissions: [{ type: 'user', role: 'reader', emailAddress: 'test@example.com' }],\n      }\n\n      expect(moveRequest.targetFolderId).toBeDefined()\n      expect(renameRequest.newName).toBeDefined()\n      expect(Array.isArray(shareRequest.permissions)).toBe(true)\n    })\n  })\n\n  describe('API Response Structure', () => {\n    it('should have consistent response structure for single operations', () => {\n      const expectedSingleResponse = {\n        success: true,\n        operation: 'move',\n        type: 'single',\n        fileId: 'test-file-id',\n      }\n\n      expect(expectedSingleResponse.success).toBe(true)\n      expect(expectedSingleResponse.operation).toBeDefined()\n      expect(expectedSingleResponse.type).toBe('single')\n      expect(expectedSingleResponse.fileId).toBeDefined()\n    })\n\n    it('should have consistent response structure for bulk operations', () => {\n      const expectedBulkResponse = {\n        success: true,\n        operation: 'move',\n        type: 'bulk',\n        processed: 2,\n        failed: 0,\n        results: [],\n      }\n\n      expect(expectedBulkResponse.success).toBe(true)\n      expect(expectedBulkResponse.operation).toBeDefined()\n      expect(expectedBulkResponse.type).toBe('bulk')\n      expect(typeof expectedBulkResponse.processed).toBe('number')\n      expect(typeof expectedBulkResponse.failed).toBe('number')\n      expect(Array.isArray(expectedBulkResponse.results)).toBe(true)\n    })\n  })\n\n  describe('Authentication Integration', () => {\n    it('should handle authentication success', () => {\n      expect(mockInitDriveService).toBeDefined()\n\n      // Simulate successful authentication\n      mockInitDriveService.mockResolvedValueOnce({\n        success: true,\n        driveService: mockDriveService,\n      })\n\n      // Authentication should return driveService\n      expect(mockInitDriveService().success).toBeDefined()\n    })\n\n    it('should handle authentication failure', () => {\n      mockInitDriveService.mockResolvedValueOnce({\n        success: false,\n        response: { status: 401 },\n      })\n\n      // Should return proper error response\n      expect(mockInitDriveService().success).toBeDefined()\n    })\n  })\n\n  describe('Google Drive Service Integration', () => {\n    it('should properly mock drive service methods', () => {\n      expect(mockDriveService.getFileDetails).toBeDefined()\n      expect(mockDriveService.moveFile).toBeDefined()\n      expect(mockDriveService.copyFile).toBeDefined()\n      expect(mockDriveService.renameFile).toBeDefined()\n      expect(mockDriveService.moveToTrash).toBeDefined()\n      expect(mockDriveService.untrashFile).toBeDefined()\n      expect(mockDriveService.deleteFile).toBeDefined()\n      expect(mockDriveService.shareFile).toBeDefined()\n      expect(mockDriveService.exportFile).toBeDefined()\n      expect(mockDriveService.downloadFile).toBeDefined()\n    })\n\n    it('should return expected data formats', async () => {\n      const fileDetails = await mockDriveService.getFileDetails('test-id')\n      expect(fileDetails).toHaveProperty('id')\n      expect(fileDetails).toHaveProperty('name')\n      expect(fileDetails).toHaveProperty('mimeType')\n\n      const moveResult = await mockDriveService.moveFile('test-id', 'target-id')\n      expect(moveResult).toHaveProperty('success')\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle service errors gracefully', async () => {\n      mockDriveService.getFileDetails.mockRejectedValueOnce(new Error('Service error'))\n\n      try {\n        await mockDriveService.getFileDetails('test-id')\n      } catch (error) {\n        expect(error.message).toBe('Service error')\n      }\n    })\n\n    it('should validate request parameters', () => {\n      // Test missing required parameters\n      const invalidRequest = {}\n\n      expect(invalidRequest.fileId).toBeUndefined()\n      expect(invalidRequest.items).toBeUndefined()\n    })\n  })\n\n  describe('Performance Optimizations', () => {\n    it('should implement throttling for API requests', () => {\n      const throttledRequest = require('@/lib/api-throttle')\n      expect(throttledRequest.throttledDriveRequest).toBeDefined()\n    })\n\n    it('should implement retry logic for failed requests', () => {\n      const retryLogic = require('@/lib/api-retry')\n      expect(retryLogic.retryDriveApiCall).toBeDefined()\n    })\n  })\n\n  describe('Type Safety and Validation', () => {\n    it('should validate operation types', () => {\n      const validOperations = [\n        'move',\n        'copy',\n        'rename',\n        'delete',\n        'trash',\n        'untrash',\n        'share',\n        'export',\n        'download',\n        'details',\n        'essential',\n        'extended',\n      ]\n\n      validOperations.forEach((operation) => {\n        expect(typeof operation).toBe('string')\n        expect(operation.length).toBeGreaterThan(0)\n      })\n    })\n\n    it('should validate file type detection', () => {\n      const fileItem = { id: 'file1', name: 'file1.txt', isFolder: false }\n      const folderItem = { id: 'folder1', name: 'My Folder', isFolder: true }\n\n      expect(fileItem.isFolder).toBe(false)\n      expect(folderItem.isFolder).toBe(true)\n    })\n  })\n})\n\ndescribe('API Migration Verification', () => {\n  it('should confirm old dynamic routing is removed', () => {\n    // Verify that [fileId] folder structure no longer exists\n    expect(() => {\n      require('@/app/api/drive/files/[fileId]/details/route')\n    }).toThrow()\n  })\n\n  it('should confirm new static routing works', () => {\n    // Verify all new static endpoints exist\n    const staticEndpoints = [\n      'details',\n      'move',\n      'copy',\n      'rename',\n      'delete',\n      'trash',\n      'untrash',\n      'share',\n      'export',\n      'download',\n      'essential',\n      'extended',\n    ]\n\n    staticEndpoints.forEach((endpoint) => {\n      expect(() => {\n        require(`@/app/api/drive/files/${endpoint}/route`)\n      }).not.toThrow()\n    })\n  })\n\n  it('should verify unified request/response patterns', () => {\n    const singleRequest = { fileId: 'test-id' }\n    const bulkRequest = {\n      items: [{ id: 'test-id', name: 'test.txt', isFolder: false }],\n    }\n\n    // Both should be valid request formats\n    expect(singleRequest.fileId || bulkRequest.items).toBeTruthy()\n  })\n})\n\n// Summary test for refactoring completion\ndescribe('Refactoring Summary', () => {\n  it('should confirm successful API structure refactoring', () => {\n    const refactoringChecklist = {\n      'Static routing implemented': true,\n      'Dynamic routing removed': true,\n      'Unified request structure': true,\n      'Consistent response format': true,\n      'Method name consistency': true,\n      'Error handling centralized': true,\n      'TypeScript compilation clean': true,\n      'Documentation updated': true,\n    }\n\n    Object.entries(refactoringChecklist).forEach(([check, status]) => {\n      expect(status).toBe(true)\n    })\n  })\n})\n"],"names":["describe","mockDriveService","getFileDetails","jest","fn","getFileMetadata","moveFile","copyFile","renameFile","moveToTrash","untrashFile","deleteFile","shareFile","exportFile","downloadFile","mockInitDriveService","mockHandleApiError","mockValidateShareRequest","mockValidateOperationsRequest","beforeAll","doMock","initDriveService","handleApiError","validateShareRequest","validateOperationsRequest","throttledDriveRequest","mockImplementation","retryDriveApiCall","mockResolvedValue","success","driveService","mockReturnValue","beforeEach","clearAllMocks","id","name","mimeType","size","createdTime","modifiedTime","ArrayBuffer","it","expectedEndpoints","forEach","endpoint","expect","require","not","toThrow","endpoints","route","POST","toBe","singleFileRequest","fileId","toBeDefined","bulkRequest","items","isFolder","Array","isArray","length","toBeGreaterThan","toHaveProperty","moveRequest","targetFolderId","renameRequest","newName","shareRequest","permissions","type","role","emailAddress","expectedSingleResponse","operation","expectedBulkResponse","processed","failed","results","mockResolvedValueOnce","response","status","fileDetails","moveResult","mockRejectedValueOnce","Error","error","message","invalidRequest","toBeUndefined","throttledRequest","retryLogic","validOperations","fileItem","folderItem","staticEndpoints","singleRequest","toBeTruthy","refactoringChecklist","Object","entries","check"],"mappings":"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"}