{"version":3,"names":["GoogleDriveService","constructor","accessToken","cov_17a1zyeo6z","f","s","drive","_config","createDriveClient","getUserInfo","aboutResponse","about","get","fields","data","user","b","Error","id","permissionId","name","displayName","email","emailAddress","photoLink","picture","storageQuota","limit","usage","usageInDrive","usageInDriveTrash","listFiles","options","query","parentId","mimeType","pageSize","pageToken","orderBy","includeTeamDriveItems","validationParams","validPageSize","validPageToken","searchQuery","operationType","_validationutils","validateListFilesOptions","operation","baseParams","q","includeItemsFromAllDrives","supportsAllDrives","optimizedFields","_fieldoptimization","getOptimizedFields","requestParams","_performance","getOptimizedRequestParams","process","env","NODE_ENV","console","info","dedupKey","requestDeduplicator","generateKey","response","performanceMonitor","trackRequest","deduplicate","files","list","map","_utils","convertGoogleDriveFile","length","nextPageToken","incompleteSearch","error","code","status","authError","needsReauth","permissionError","message","includes","retryParams","retryResponse","retryFiles","getFile","fileId","result","getFileDetails","startTime","Date","now","responseTime","fieldOptimizationMonitor","split","file","responseData","lastModifyingUser","_filedetailmappers","mapUserInfo","sharingUser","mapBasicProperties","mapChecksums","mapBooleanProperties","mapCollectionProperties","imageMediaMetadata","mapImageMetadata","videoMediaMetadata","mapVideoMetadata","shortcutDetails","mapShortcutDetails","contentRestrictions","mapContentRestrictions","linkShareMetadata","mapLinkShareMetadata","labelInfo","mapLabelInfo","getFolders","buildSearchQuery","trashed","convertGoogleDriveFolder","createFolder","metadata","createdTime","toISOString","modifiedTime","parents","create","requestBody","uploadFile","fileMetadata","description","arrayBuffer","buffer","Buffer","from","stream","_stream","Readable","media","type","getMimeTypeFromFileName","body","uploadType","downloadFile","alt","responseType","getFileMetadata","join","shared","webViewLink","webContentLink","thumbnailLink","iconLink","starred","explicitlyTrashed","exportLinks","deleteFile","delete","exportFile","export","deleteFolder","folderId","moveToTrash","update","moveFolderToTrash","untrashFile","restoreFolderFromTrash","renameFile","newName","_filevalidation","validateFileName","trim","handleDriveApiError","renameFolder","moveFile","newParentId","currentParentId","fileInfo","updateParams","addParents","removeParents","moveFolder","copyFile","originalFile","copyFolder","copy","originalFolder","newFolder","removeFolderPermission","removeFilePermission","shareFile","permission","permissionRequest","role","domain","allowFileDiscovery","permissions","sendNotificationEmail","emailMessage","shareFolder","getFilePermissions","createPermission","permissionData","deletePermission","emailData","log"],"sources":["/home/runner/workspace/src/lib/google-drive/service.ts"],"sourcesContent":["import { Readable } from 'stream'\n\nimport { drive_v3 } from 'googleapis'\n\nimport { createDriveClient } from './config'\nimport {\n  DriveFile,\n  DriveFolder,\n  DriveSearchOptions,\n  DriveSearchResult,\n  DriveUploadOptions,\n  DrivePermission,\n  DriveUserInfo,\n  DriveFileMetadata,\n} from './types'\nimport { DetailedDriveFile } from './detailed-file-types'\nimport {\n  mapUserInfo,\n  mapImageMetadata,\n  mapVideoMetadata,\n  mapShortcutDetails,\n  mapContentRestrictions,\n  mapLinkShareMetadata,\n  mapLabelInfo,\n  mapBasicProperties,\n  mapChecksums,\n  mapBooleanProperties,\n  mapCollectionProperties,\n} from './file-detail-mappers'\nimport { validateListFilesOptions } from './validation-utils'\nimport { validateFileName, handleDriveApiError } from './file-validation'\nimport { getOptimizedFields, fieldOptimizationMonitor } from './field-optimization'\nimport { convertGoogleDriveFile, convertGoogleDriveFolder, buildSearchQuery, getMimeTypeFromFileName } from './utils'\nimport { getOptimizedRequestParams, performanceMonitor, requestDeduplicator } from './performance'\n\nexport class GoogleDriveService {\n  public drive: drive_v3.Drive\n\n  constructor(accessToken: string) {\n    this.drive = createDriveClient(accessToken)\n  }\n\n  async getUserInfo(): Promise<DriveUserInfo> {\n    // Use Drive API about endpoint for user info instead of OAuth2 userinfo API\n    // This is the recommended approach according to Google Drive API documentation\n    const aboutResponse = await this.drive.about.get({\n      fields: 'user,storageQuota',\n    })\n\n    const about = aboutResponse.data\n    const user = about.user\n\n    if (!user) {\n      throw new Error('Unable to fetch user information from Drive API')\n    }\n\n    return {\n      id: user.permissionId ?? 'unknown',\n      name: user.displayName ?? 'Unknown User',\n      email: user.emailAddress ?? '',\n      ...(user.photoLink && { picture: user.photoLink }),\n      ...(about.storageQuota && {\n        storageQuota: {\n          limit: about.storageQuota.limit!,\n          usage: about.storageQuota.usage!,\n          usageInDrive: about.storageQuota.usageInDrive!,\n          usageInDriveTrash: about.storageQuota.usageInDriveTrash!,\n        },\n      }),\n    }\n  }\n\n  async listFiles(options: DriveSearchOptions = {}): Promise<DriveSearchResult> {\n    const {\n      query,\n      parentId,\n      mimeType,\n      pageSize = 50,\n      pageToken,\n      orderBy = 'modifiedTime desc',\n      includeTeamDriveItems = true,\n    } = options\n\n    // Validate and process all options using helper functions\n    const validationParams: any = {\n      pageSize,\n      query,\n      parentId,\n      mimeType,\n    }\n    \n    if (pageToken) {\n      validationParams.pageToken = pageToken\n    }\n    \n    const { validPageSize, validPageToken, searchQuery, operationType } = validateListFilesOptions(validationParams)\n\n    // Use operation type from validation\n    const operation = operationType\n    const baseParams = {\n      q: searchQuery,\n      pageSize: validPageSize,\n      orderBy,\n      includeItemsFromAllDrives: includeTeamDriveItems,\n      supportsAllDrives: includeTeamDriveItems,\n    }\n\n    // Use optimized fields based on operation type\n    const optimizedFields = getOptimizedFields('LIST_STANDARD')\n    const requestParams = {\n      ...getOptimizedRequestParams(operation, baseParams),\n      fields: `nextPageToken,incompleteSearch,files(${optimizedFields})`,\n    }\n    // Log query for debugging in development only\n    if (process.env.NODE_ENV === 'development') {\n      console.info('[Drive API] - Query:', searchQuery)\n    }\n\n    // Only add pageToken if it's valid\n    if (validPageToken) {\n      requestParams.pageToken = validPageToken\n    }\n\n    try {\n      // Generate deduplication key for identical requests\n      const dedupKey = requestDeduplicator.generateKey('listFiles', requestParams)\n\n      // Use performance monitoring and request deduplication\n      const response = await performanceMonitor.trackRequest('listFiles', async () => {\n        return await requestDeduplicator.deduplicate(dedupKey, async () => {\n          return await this.drive.files.list(requestParams)\n        })\n      })\n\n      const files = response.data.files?.map(convertGoogleDriveFile) ?? []\n\n      console.info(`[Drive API] - Result: ${files.length} items`)\n\n      return {\n        files,\n        ...(response.data.nextPageToken && { nextPageToken: response.data.nextPageToken }),\n        incompleteSearch: response.data.incompleteSearch || false,\n      }\n    } catch (error: any) {\n      // Handle authentication errors\n      if (error.code === 401 || error.status === 401) {\n        const authError = new Error('Authentication required')\n        authError.name = 'AuthenticationError'\n        ;(authError as any).code = 401\n        ;(authError as any).needsReauth = true\n        throw authError\n      }\n\n      // Handle insufficient permissions\n      if (error.code === 403 || error.status === 403) {\n        const permissionError = new Error('Insufficient permissions')\n        permissionError.name = 'PermissionError'\n        ;(permissionError as any).code = 403\n        ;(permissionError as any).needsReauth = true\n        throw permissionError\n      }\n\n      // Handle specific Google Drive API errors\n      if (error.code === 400 && error.message?.includes('Invalid Value')) {\n        // If pageToken was the issue, retry without it\n        if (validPageToken) {\n          const retryParams = { ...requestParams }\n          delete retryParams.pageToken\n\n          const retryResponse = await this.drive.files.list(retryParams)\n          const retryFiles = retryResponse.data.files?.map(convertGoogleDriveFile) || []\n\n          return {\n            files: retryFiles,\n            ...(retryResponse.data.nextPageToken && {\n              nextPageToken: retryResponse.data.nextPageToken,\n            }),\n            incompleteSearch: retryResponse.data.incompleteSearch || false,\n          }\n        }\n      }\n\n      // Re-throw other errors\n      throw error\n    }\n  }\n\n  async getFile(fileId: string): Promise<DriveFile> {\n    const response = await this.drive.files.get({\n      fileId,\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, shared, trashed, starred, capabilities, owners(displayName,emailAddress,photoLink)',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  async getFileDetails(fileId: string, fields?: string): Promise<DetailedDriveFile> {\n    const startTime = Date.now()\n    const optimizedFields = fields || getOptimizedFields('FILE_DETAILS')\n\n    const response = await this.drive.files.get({\n      fileId,\n      fields: optimizedFields, // Use optimized fields instead of '*'\n    })\n\n    // Track performance improvement\n    const responseTime = Date.now() - startTime\n    fieldOptimizationMonitor.trackRequest('getFileDetails', responseTime, optimizedFields.split(',').length)\n\n    const file = convertGoogleDriveFile(response.data)\n    const responseData = response.data\n\n    return {\n      ...file,\n      // User information\n      lastModifyingUser: mapUserInfo(responseData.lastModifyingUser),\n      sharingUser: mapUserInfo(responseData.sharingUser),\n\n      // Basic file properties\n      ...mapBasicProperties(responseData),\n\n      // Checksums and storage info\n      ...mapChecksums(responseData),\n\n      // Boolean properties with defaults\n      ...mapBooleanProperties(responseData),\n\n      // Array and object properties\n      ...mapCollectionProperties(responseData),\n\n      // Media metadata\n      ...(responseData.imageMediaMetadata && {\n        imageMediaMetadata: mapImageMetadata(responseData.imageMediaMetadata),\n      }),\n      ...(responseData.videoMediaMetadata && {\n        videoMediaMetadata: mapVideoMetadata(responseData.videoMediaMetadata),\n      }),\n\n      // Shortcut details\n      ...(responseData.shortcutDetails && {\n        shortcutDetails: mapShortcutDetails(responseData.shortcutDetails),\n      }),\n\n      // Content restrictions\n      contentRestrictions: mapContentRestrictions(responseData.contentRestrictions || []),\n\n      // Link sharing metadata\n      ...(responseData.linkShareMetadata && {\n        linkShareMetadata: mapLinkShareMetadata(responseData.linkShareMetadata),\n      }),\n\n      // Label information\n      ...(responseData.labelInfo && {\n        labelInfo: mapLabelInfo(responseData.labelInfo),\n      }),\n    }\n  }\n\n  async getFolders(parentId?: string): Promise<DriveFolder[]> {\n    const query = buildSearchQuery({\n      ...(parentId && { parentId }),\n      mimeType: 'application/vnd.google-apps.folder',\n      trashed: false,\n    })\n\n    const response = await this.drive.files.list({\n      q: query,\n      orderBy: 'name',\n      fields: 'files(id, name, createdTime, modifiedTime, parents, shared, trashed)',\n    })\n\n    return response.data.files?.map(convertGoogleDriveFolder) || []\n  }\n\n  async createFolder(name: string, parentId?: string): Promise<DriveFolder> {\n    const metadata: DriveFileMetadata = {\n      name,\n      mimeType: 'application/vnd.google-apps.folder',\n      createdTime: new Date().toISOString(),\n      modifiedTime: new Date().toISOString(),\n    }\n\n    if (parentId) {\n      metadata.parents = [parentId]\n    }\n\n    const response = await this.drive.files.create({\n      requestBody: metadata,\n      fields: 'id, name, createdTime, modifiedTime, parents, shared, trashed',\n    })\n\n    return convertGoogleDriveFolder(response.data)\n  }\n\n  async uploadFile(options: DriveUploadOptions): Promise<DriveFile> {\n    const { file, metadata, parentId } = options\n\n    const fileMetadata: any = {\n      name: metadata.name || file.name,\n      ...(parentId ? { parents: [parentId] } : metadata.parents && { parents: metadata.parents }),\n      ...(metadata.description && { description: metadata.description }),\n      // Don't include mimeType in metadata as it should be in media object\n    }\n\n    // Convert File to readable stream for Google Drive API\n    const arrayBuffer = await file.arrayBuffer()\n    const buffer = Buffer.from(arrayBuffer)\n    const stream = Readable.from(buffer)\n\n    const media = {\n      mimeType: file.type || getMimeTypeFromFileName(file.name),\n      body: stream,\n    }\n\n    // Use uploadType=multipart for proper file upload according to Drive API docs\n    const response = await this.drive.files.create({\n      requestBody: fileMetadata,\n      media,\n      uploadType: 'multipart',\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  async downloadFile(fileId: string): Promise<Readable> {\n    const response = await this.drive.files.get(\n      {\n        fileId,\n        alt: 'media',\n      },\n      { responseType: 'stream' },\n    )\n\n    return response.data as Readable\n  }\n\n  /**\n   * Get file metadata with specific fields\n   */\n  async getFileMetadata(fileId: string, fields: string[]): Promise<DriveFileMetadata & { id: string }> {\n    const response = await this.drive.files.get({\n      fileId,\n      fields: fields.join(','),\n    })\n\n    // // // // // console.log('[Google Drive Service] Raw API response:', response.data)\n    // // // // // console.log('[Google Drive Service] Response ID:', response.data.id)\n\n    return {\n      id: response.data.id || fileId, // Ensure id is always present\n      name: response.data.name!,\n      mimeType: response.data.mimeType!,\n      createdTime: response.data.createdTime!,\n      modifiedTime: response.data.modifiedTime!,\n      parents: response.data.parents || [],\n      shared: response.data.shared || false,\n      trashed: response.data.trashed || false,\n      ...(response.data.webViewLink && { webViewLink: response.data.webViewLink }),\n      ...(response.data.webContentLink && { webContentLink: response.data.webContentLink }),\n      ...(response.data.thumbnailLink && { thumbnailLink: response.data.thumbnailLink }),\n      ...(response.data.iconLink && { iconLink: response.data.iconLink }),\n      ...(response.data.description && { description: response.data.description }),\n      starred: response.data.starred || false,\n      explicitlyTrashed: response.data.explicitlyTrashed || false,\n      exportLinks: response.data.exportLinks || {},\n    }\n  }\n\n  // Unified permanent delete operation for both files and folders\n  async deleteFile(fileId: string): Promise<void> {\n    await this.drive.files.delete({ fileId })\n  }\n\n  async exportFile(fileId: string, mimeType: string): Promise<ArrayBuffer> {\n    const response = await this.drive.files.export(\n      {\n        fileId,\n        mimeType,\n      },\n      {\n        responseType: 'arraybuffer',\n      },\n    )\n    return response.data as ArrayBuffer\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async deleteFolder(folderId: string): Promise<void> {\n    return this.deleteFile(folderId)\n  }\n\n  // Unified move to trash operation for both files and folders\n  async moveToTrash(fileId: string): Promise<DriveFile> {\n    const response = await this.drive.files.update({\n      fileId,\n      requestBody: { trashed: true },\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async moveFolderToTrash(folderId: string): Promise<DriveFile> {\n    return this.moveToTrash(folderId)\n  }\n\n  // Unified restore from trash operation for both files and folders\n  async untrashFile(fileId: string): Promise<DriveFile> {\n    const response = await this.drive.files.update({\n      fileId,\n      requestBody: { trashed: false },\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async restoreFolderFromTrash(folderId: string): Promise<DriveFile> {\n    return this.untrashFile(folderId)\n  }\n\n  // Unified rename operation for both files and folders\n  async renameFile(fileId: string, newName: string): Promise<DriveFile> {\n    try {\n      // Validate filename using helper function\n      validateFileName(newName)\n\n      const optimizedFields = getOptimizedFields('LIST_DETAILED')\n      const response = await this.drive.files.update({\n        fileId,\n        requestBody: { name: newName.trim() },\n        fields: optimizedFields,\n      })\n\n      return convertGoogleDriveFile(response.data)\n    } catch (error: any) {\n      // Handle errors using centralized error handler\n      handleDriveApiError(error)\n    }\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async renameFolder(folderId: string, newName: string): Promise<DriveFile> {\n    return this.renameFile(folderId, newName)\n  }\n\n  // Unified move operation for both files and folders with error recovery\n  async moveFile(fileId: string, newParentId: string, currentParentId?: string): Promise<DriveFile> {\n    try {\n      // According to Drive API docs, we should get current parents if not provided\n      if (!currentParentId) {\n        const fileInfo = await this.getFile(fileId)\n        currentParentId = fileInfo.parents?.[0]\n      }\n\n      const updateParams: any = {\n        fileId,\n        addParents: newParentId,\n        ...(currentParentId && { removeParents: currentParentId }),\n        fields:\n          'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n      }\n\n      const response = await this.drive.files.update(updateParams)\n\n      const result = await response\n      return convertGoogleDriveFile(result.data)\n    } catch (error: any) {\n      // Handle specific Google API errors according to documentation\n      if (error.code === 403) {\n        throw new Error('Insufficient permissions to move this file')\n      } else if (error.code === 404) {\n        throw new Error('File or destination folder not found')\n      } else if (error.code === 429) {\n        throw new Error('Rate limit exceeded. Please try again later')\n      } else if (error.code === 400) {\n        throw new Error('Invalid move operation parameters')\n      }\n\n      // Re-throw with original error for unexpected cases\n      throw error\n    }\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async moveFolder(folderId: string, newParentId: string, currentParentId?: string): Promise<DriveFile> {\n    return this.moveFile(folderId, newParentId, currentParentId)\n  }\n\n  // Copy operation - works for files, folders require special handling\n  async copyFile(fileId: string, metadata: Partial<DriveFileMetadata>): Promise<DriveFile> {\n    // First check if this is a folder\n    const originalFile = await this.getFile(fileId)\n\n    if (originalFile.mimeType === 'application/vnd.google-apps.folder') {\n      // For folders, we need to create a new folder and copy contents\n      return this.copyFolder(fileId, metadata)\n    }\n\n    const response = await this.drive.files.copy({\n      fileId,\n      requestBody: metadata,\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  // Special handling for folder copying\n  async copyFolder(folderId: string, metadata: Partial<DriveFileMetadata>): Promise<DriveFile> {\n    const originalFolder = await this.getFile(folderId)\n\n    // Create new folder with the specified metadata\n    const newFolder = await this.createFolder(metadata.name || `${originalFolder.name} - Copy`, metadata.parents?.[0])\n\n    // Note: For full folder copying with contents, we would need recursive copying\n    // This creates an empty copy of the folder structure\n    return convertGoogleDriveFile({\n      id: newFolder.id!,\n      name: newFolder.name!,\n      mimeType: 'application/vnd.google-apps.folder',\n      createdTime: newFolder.createdTime!,\n      modifiedTime: newFolder.modifiedTime!,\n      ...(newFolder.parents && { parents: newFolder.parents }),\n      ...(newFolder.shared && { shared: newFolder.shared }),\n      ...(newFolder.trashed && { trashed: newFolder.trashed }),\n    })\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async removeFolderPermission(folderId: string, permissionId: string): Promise<void> {\n    return this.removeFilePermission(folderId, permissionId)\n  }\n\n  // Unified share operation for both files and folders\n  async shareFile(fileId: string, permission: DrivePermission): Promise<void> {\n    try {\n      const permissionRequest: any = {\n        role: permission.role,\n        type: permission.type,\n      }\n\n      // Add optional fields only if provided, according to API docs\n      if (permission.emailAddress) {\n        permissionRequest.emailAddress = permission.emailAddress\n      }\n\n      if (permission.domain) {\n        permissionRequest.domain = permission.domain\n      }\n\n      // Set allowFileDiscovery for domain/anyone permissions as per API docs\n      if (permission.type === 'domain' || permission.type === 'anyone') {\n        permissionRequest.allowFileDiscovery = permission.allowFileDiscovery ?? false\n      }\n\n      await this.drive.permissions.create({\n        fileId,\n        requestBody: permissionRequest,\n        sendNotificationEmail: permission.sendNotificationEmail ?? false,\n        // Add emailMessage if sending notifications\n        ...(permission.sendNotificationEmail && {\n          emailMessage: 'File shared with you via Drive Manager',\n        }),\n      })\n    } catch (error: any) {\n      // Handle specific API errors according to documentation\n      if (error.code === 403) {\n        throw new Error('Insufficient permissions to share this file')\n      } else if (error.code === 404) {\n        throw new Error('File not found')\n      } else if (error.code === 400) {\n        throw new Error('Invalid sharing parameters')\n      }\n\n      throw error\n    }\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async shareFolder(folderId: string, permission: DrivePermission): Promise<void> {\n    return this.shareFile(folderId, permission)\n  }\n\n  // Get file permissions\n  async getFilePermissions(fileId: string): Promise<any[]> {\n    const response = await this.drive.permissions.list({\n      fileId,\n      fields: 'permissions(id, type, role, emailAddress, domain, displayName)',\n    })\n\n    return response.data.permissions || []\n  }\n\n  // Remove file permission\n  async removeFilePermission(fileId: string, permissionId: string): Promise<void> {\n    await this.drive.permissions.delete({\n      fileId,\n      permissionId,\n    })\n  }\n\n  // Create permission (for enhanced sharing)\n  async createPermission(fileId: string, permissionData: any): Promise<any> {\n    const response = await this.drive.permissions.create({\n      fileId,\n      requestBody: permissionData,\n      sendNotificationEmail: false,\n    })\n    return response.data\n  }\n\n  // Delete permission (for enhanced sharing)\n  async deletePermission(fileId: string, permissionId: string): Promise<void> {\n    await this.drive.permissions.delete({\n      fileId,\n      permissionId,\n    })\n  }\n\n  // Send notification email (for enhanced sharing)\n  async sendNotificationEmail(fileId: string, emailData: any): Promise<void> {\n    // Note: This would typically use the Gmail API or similar service\n    // For now, we'll just log the action\n    console.log('Notification email would be sent for file:', fileId, 'with data:', emailData)\n  }\n}\n"],"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","ignoreList":[]}