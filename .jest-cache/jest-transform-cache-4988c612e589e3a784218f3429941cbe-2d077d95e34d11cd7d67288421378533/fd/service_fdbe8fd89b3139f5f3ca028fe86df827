a4b3e3a297d761031ca2f28b9c8ba0a3
"use strict";

/* istanbul ignore next */
function cov_17a1zyeo6z() {
  var path = "/home/runner/workspace/src/lib/google-drive/service.ts";
  var hash = "1092952e40ef8e1b213e1046507291acc470b462";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/lib/google-drive/service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 35
        }
      },
      "5": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 59
        }
      },
      "6": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 54
        }
      },
      "7": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 52
        }
      },
      "8": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 58
        }
      },
      "9": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "10": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 45
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 65
        }
      },
      "12": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "13": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "14": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 31
        }
      },
      "15": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "16": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 79
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "18": {
        start: {
          line: 52,
          column: 133
        },
        end: {
          line: 52,
          column: 140
        }
      },
      "19": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 51
        }
      },
      "22": {
        start: {
          line: 63,
          column: 78
        },
        end: {
          line: 63,
          column: 142
        }
      },
      "23": {
        start: {
          line: 65,
          column: 26
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "24": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "25": {
        start: {
          line: 74,
          column: 32
        },
        end: {
          line: 74,
          column: 91
        }
      },
      "26": {
        start: {
          line: 75,
          column: 30
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "28": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 62
        }
      },
      "29": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 53
        }
      },
      "31": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "32": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 89,
          column: 101
        }
      },
      "33": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "34": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 94,
          column: 19
        }
      },
      "35": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 70
        }
      },
      "36": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 87
        }
      },
      "37": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 72
        }
      },
      "38": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 104,
          column: 14
        }
      },
      "39": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "40": {
        start: {
          line: 108,
          column: 34
        },
        end: {
          line: 108,
          column: 70
        }
      },
      "41": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 55
        }
      },
      "42": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 37
        }
      },
      "43": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 45
        }
      },
      "44": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 32
        }
      },
      "45": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "46": {
        start: {
          line: 116,
          column: 40
        },
        end: {
          line: 116,
          column: 77
        }
      },
      "47": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "48": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 43
        }
      },
      "49": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 51
        }
      },
      "50": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 38
        }
      },
      "51": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "52": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "53": {
        start: {
          line: 126,
          column: 40
        },
        end: {
          line: 128,
          column: 21
        }
      },
      "54": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 49
        }
      },
      "55": {
        start: {
          line: 130,
          column: 42
        },
        end: {
          line: 130,
          column: 82
        }
      },
      "56": {
        start: {
          line: 131,
          column: 39
        },
        end: {
          line: 131,
          column: 105
        }
      },
      "57": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 138,
          column: 22
        }
      },
      "58": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 24
        }
      },
      "59": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "60": {
        start: {
          line: 150,
          column: 23
        },
        end: {
          line: 150,
          column: 37
        }
      },
      "61": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 63
        }
      },
      "62": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 36
        }
      },
      "63": {
        start: {
          line: 155,
          column: 32
        },
        end: {
          line: 155,
          column: 100
        }
      },
      "64": {
        start: {
          line: 156,
          column: 25
        },
        end: {
          line: 159,
          column: 10
        }
      },
      "65": {
        start: {
          line: 161,
          column: 29
        },
        end: {
          line: 161,
          column: 51
        }
      },
      "66": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 132
        }
      },
      "67": {
        start: {
          line: 163,
          column: 21
        },
        end: {
          line: 163,
          column: 70
        }
      },
      "68": {
        start: {
          line: 164,
          column: 29
        },
        end: {
          line: 164,
          column: 42
        }
      },
      "69": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 199,
          column: 10
        }
      },
      "70": {
        start: {
          line: 202,
          column: 22
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "71": {
        start: {
          line: 209,
          column: 25
        },
        end: {
          line: 213,
          column: 10
        }
      },
      "72": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 79
        }
      },
      "73": {
        start: {
          line: 217,
          column: 25
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "74": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "75": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "76": {
        start: {
          line: 228,
          column: 25
        },
        end: {
          line: 231,
          column: 10
        }
      },
      "77": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 67
        }
      },
      "78": {
        start: {
          line: 235,
          column: 45
        },
        end: {
          line: 235,
          column: 52
        }
      },
      "79": {
        start: {
          line: 236,
          column: 29
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "80": {
        start: {
          line: 250,
          column: 28
        },
        end: {
          line: 250,
          column: 52
        }
      },
      "81": {
        start: {
          line: 251,
          column: 23
        },
        end: {
          line: 251,
          column: 47
        }
      },
      "82": {
        start: {
          line: 252,
          column: 23
        },
        end: {
          line: 252,
          column: 52
        }
      },
      "83": {
        start: {
          line: 253,
          column: 22
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "84": {
        start: {
          line: 258,
          column: 25
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "85": {
        start: {
          line: 264,
          column: 23
        },
        end: {
          line: 264,
          column: 37
        }
      },
      "86": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 63
        }
      },
      "87": {
        start: {
          line: 268,
          column: 25
        },
        end: {
          line: 273,
          column: 10
        }
      },
      "88": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 29
        }
      },
      "89": {
        start: {
          line: 279,
          column: 25
        },
        end: {
          line: 282,
          column: 10
        }
      },
      "90": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 312,
          column: 10
        }
      },
      "91": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      },
      "92": {
        start: {
          line: 321,
          column: 25
        },
        end: {
          line: 326,
          column: 10
        }
      },
      "93": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 29
        }
      },
      "94": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 41
        }
      },
      "95": {
        start: {
          line: 335,
          column: 25
        },
        end: {
          line: 341,
          column: 10
        }
      },
      "96": {
        start: {
          line: 342,
          column: 23
        },
        end: {
          line: 342,
          column: 37
        }
      },
      "97": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 63
        }
      },
      "98": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 42
        }
      },
      "99": {
        start: {
          line: 351,
          column: 25
        },
        end: {
          line: 357,
          column: 10
        }
      },
      "100": {
        start: {
          line: 358,
          column: 23
        },
        end: {
          line: 358,
          column: 37
        }
      },
      "101": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 63
        }
      },
      "102": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 42
        }
      },
      "103": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "104": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 59
        }
      },
      "105": {
        start: {
          line: 370,
          column: 36
        },
        end: {
          line: 370,
          column: 95
        }
      },
      "106": {
        start: {
          line: 371,
          column: 29
        },
        end: {
          line: 377,
          column: 14
        }
      },
      "107": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 69
        }
      },
      "108": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 60
        }
      },
      "109": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 50
        }
      },
      "110": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "111": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "112": {
        start: {
          line: 393,
          column: 33
        },
        end: {
          line: 393,
          column: 59
        }
      },
      "113": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 56
        }
      },
      "114": {
        start: {
          line: 396,
          column: 33
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "115": {
        start: {
          line: 404,
          column: 29
        },
        end: {
          line: 404,
          column: 72
        }
      },
      "116": {
        start: {
          line: 405,
          column: 27
        },
        end: {
          line: 405,
          column: 41
        }
      },
      "117": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 67
        }
      },
      "118": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "119": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 78
        }
      },
      "120": {
        start: {
          line: 411,
          column: 19
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "121": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 72
        }
      },
      "122": {
        start: {
          line: 413,
          column: 19
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "123": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 79
        }
      },
      "124": {
        start: {
          line: 415,
          column: 19
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "125": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 69
        }
      },
      "126": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 24
        }
      },
      "127": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 69
        }
      },
      "128": {
        start: {
          line: 429,
          column: 29
        },
        end: {
          line: 429,
          column: 55
        }
      },
      "129": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "130": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 53
        }
      },
      "131": {
        start: {
          line: 434,
          column: 25
        },
        end: {
          line: 438,
          column: 10
        }
      },
      "132": {
        start: {
          line: 439,
          column: 23
        },
        end: {
          line: 439,
          column: 37
        }
      },
      "133": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 63
        }
      },
      "134": {
        start: {
          line: 444,
          column: 31
        },
        end: {
          line: 444,
          column: 59
        }
      },
      "135": {
        start: {
          line: 446,
          column: 26
        },
        end: {
          line: 446,
          column: 122
        }
      },
      "136": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 464,
          column: 11
        }
      },
      "137": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 65
        }
      },
      "138": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "139": {
        start: {
          line: 473,
          column: 38
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "140": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "141": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 73
        }
      },
      "142": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 483,
          column: 13
        }
      },
      "143": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 61
        }
      },
      "144": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 487,
          column: 13
        }
      },
      "145": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 486,
          column: 94
        }
      },
      "146": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 496,
          column: 15
        }
      },
      "147": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "148": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 79
        }
      },
      "149": {
        start: {
          line: 501,
          column: 19
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "150": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 50
        }
      },
      "151": {
        start: {
          line: 503,
          column: 19
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "152": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 504,
          column: 62
        }
      },
      "153": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 24
        }
      },
      "154": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 52
        }
      },
      "155": {
        start: {
          line: 515,
          column: 25
        },
        end: {
          line: 518,
          column: 10
        }
      },
      "156": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 519,
          column: 47
        }
      },
      "157": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 526,
          column: 11
        }
      },
      "158": {
        start: {
          line: 530,
          column: 25
        },
        end: {
          line: 534,
          column: 10
        }
      },
      "159": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 535,
          column: 29
        }
      },
      "160": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 542,
          column: 11
        }
      },
      "161": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 548,
          column: 99
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 34
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 51
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 91,
            column: 93
          },
          end: {
            line: 91,
            column: 94
          }
        },
        loc: {
          start: {
            line: 91,
            column: 103
          },
          end: {
            line: 95,
            column: 13
          }
        },
        line: 91
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 84
          },
          end: {
            line: 92,
            column: 85
          }
        },
        loc: {
          start: {
            line: 92,
            column: 94
          },
          end: {
            line: 94,
            column: 17
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 26
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 145
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 41
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 153
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 31
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 39
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 216
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 30
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 234
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 31
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 267
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 278,
            column: 6
          },
          end: {
            line: 278,
            column: 7
          }
        },
        loc: {
          start: {
            line: 278,
            column: 44
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 278
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 29
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 315
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 39
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 320
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 33
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 330
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 30
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 334
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 38
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 346
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 30
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 350
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 43
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 362
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 38
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 366
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 42
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 385
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 57
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 389
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 423,
            column: 5
          }
        },
        loc: {
          start: {
            line: 423,
            column: 61
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 423
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 37
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 427
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 443,
            column: 4
          },
          end: {
            line: 443,
            column: 5
          }
        },
        loc: {
          start: {
            line: 443,
            column: 41
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 443
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 467,
            column: 5
          }
        },
        loc: {
          start: {
            line: 467,
            column: 57
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 467
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 40
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 471
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 510,
            column: 5
          }
        },
        loc: {
          start: {
            line: 510,
            column: 44
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 510
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 514,
            column: 5
          }
        },
        loc: {
          start: {
            line: 514,
            column: 37
          },
          end: {
            line: 520,
            column: 5
          }
        },
        line: 514
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 53
          },
          end: {
            line: 527,
            column: 5
          }
        },
        line: 522
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 529,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        },
        loc: {
          start: {
            line: 529,
            column: 51
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 529
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 538,
            column: 4
          },
          end: {
            line: 538,
            column: 5
          }
        },
        loc: {
          start: {
            line: 538,
            column: 49
          },
          end: {
            line: 543,
            column: 5
          }
        },
        line: 538
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 51
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 545
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 33
          }
        }, {
          start: {
            line: 35,
            column: 37
          },
          end: {
            line: 35,
            column: 46
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 18
          },
          end: {
            line: 36,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 18
          },
          end: {
            line: 36,
            column: 34
          }
        }, {
          start: {
            line: 36,
            column: 38
          },
          end: {
            line: 36,
            column: 52
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 36
          }
        }, {
          start: {
            line: 37,
            column: 40
          },
          end: {
            line: 37,
            column: 42
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 29
          }
        }, {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 40,
            column: 13
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 33
          }
        }, {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 48,
            column: 13
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 51,
            column: 20
          },
          end: {
            line: 51,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 32
          }
        }],
        line: 51
      },
      "7": {
        loc: {
          start: {
            line: 52,
            column: 43
          },
          end: {
            line: 52,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 54
          },
          end: {
            line: 52,
            column: 56
          }
        }],
        line: 52
      },
      "8": {
        loc: {
          start: {
            line: 52,
            column: 69
          },
          end: {
            line: 52,
            column: 98
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 79
          },
          end: {
            line: 52,
            column: 98
          }
        }],
        line: 52
      },
      "9": {
        loc: {
          start: {
            line: 52,
            column: 100
          },
          end: {
            line: 52,
            column: 128
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 124
          },
          end: {
            line: 52,
            column: 128
          }
        }],
        line: 52
      },
      "10": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "11": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "12": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "13": {
        loc: {
          start: {
            line: 96,
            column: 26
          },
          end: {
            line: 96,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 26
          },
          end: {
            line: 96,
            column: 81
          }
        }, {
          start: {
            line: 96,
            column: 85
          },
          end: {
            line: 96,
            column: 87
          }
        }],
        line: 96
      },
      "14": {
        loc: {
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 102,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 100,
            column: 46
          }
        }, {
          start: {
            line: 100,
            column: 50
          },
          end: {
            line: 102,
            column: 17
          }
        }],
        line: 100
      },
      "15": {
        loc: {
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 64
          }
        }, {
          start: {
            line: 103,
            column: 68
          },
          end: {
            line: 103,
            column: 73
          }
        }],
        line: 103
      },
      "16": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "17": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 34
          }
        }, {
          start: {
            line: 107,
            column: 38
          },
          end: {
            line: 107,
            column: 58
          }
        }],
        line: 107
      },
      "18": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "19": {
        loc: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 34
          }
        }, {
          start: {
            line: 115,
            column: 38
          },
          end: {
            line: 115,
            column: 58
          }
        }],
        line: 115
      },
      "20": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "21": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 123,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 123,
            column: 34
          }
        }, {
          start: {
            line: 123,
            column: 38
          },
          end: {
            line: 123,
            column: 78
          }
        }],
        line: 123
      },
      "22": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "23": {
        loc: {
          start: {
            line: 131,
            column: 39
          },
          end: {
            line: 131,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 39
          },
          end: {
            line: 131,
            column: 99
          }
        }, {
          start: {
            line: 131,
            column: 103
          },
          end: {
            line: 131,
            column: 105
          }
        }],
        line: 131
      },
      "24": {
        loc: {
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 136,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 134,
            column: 59
          }
        }, {
          start: {
            line: 134,
            column: 63
          },
          end: {
            line: 136,
            column: 25
          }
        }],
        line: 134
      },
      "25": {
        loc: {
          start: {
            line: 137,
            column: 42
          },
          end: {
            line: 137,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 42
          },
          end: {
            line: 137,
            column: 77
          }
        }, {
          start: {
            line: 137,
            column: 81
          },
          end: {
            line: 137,
            column: 86
          }
        }],
        line: 137
      },
      "26": {
        loc: {
          start: {
            line: 155,
            column: 32
          },
          end: {
            line: 155,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 32
          },
          end: {
            line: 155,
            column: 38
          }
        }, {
          start: {
            line: 155,
            column: 42
          },
          end: {
            line: 155,
            column: 100
          }
        }],
        line: 155
      },
      "27": {
        loc: {
          start: {
            line: 179,
            column: 15
          },
          end: {
            line: 181,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 15
          },
          end: {
            line: 179,
            column: 46
          }
        }, {
          start: {
            line: 179,
            column: 50
          },
          end: {
            line: 181,
            column: 13
          }
        }],
        line: 179
      },
      "28": {
        loc: {
          start: {
            line: 182,
            column: 15
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 15
          },
          end: {
            line: 182,
            column: 46
          }
        }, {
          start: {
            line: 182,
            column: 50
          },
          end: {
            line: 184,
            column: 13
          }
        }],
        line: 182
      },
      "29": {
        loc: {
          start: {
            line: 186,
            column: 15
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 15
          },
          end: {
            line: 186,
            column: 43
          }
        }, {
          start: {
            line: 186,
            column: 47
          },
          end: {
            line: 188,
            column: 13
          }
        }],
        line: 186
      },
      "30": {
        loc: {
          start: {
            line: 190,
            column: 80
          },
          end: {
            line: 190,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 80
          },
          end: {
            line: 190,
            column: 112
          }
        }, {
          start: {
            line: 190,
            column: 116
          },
          end: {
            line: 190,
            column: 118
          }
        }],
        line: 190
      },
      "31": {
        loc: {
          start: {
            line: 192,
            column: 15
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 15
          },
          end: {
            line: 192,
            column: 45
          }
        }, {
          start: {
            line: 192,
            column: 49
          },
          end: {
            line: 194,
            column: 13
          }
        }],
        line: 192
      },
      "32": {
        loc: {
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 196,
            column: 37
          }
        }, {
          start: {
            line: 196,
            column: 41
          },
          end: {
            line: 198,
            column: 13
          }
        }],
        line: 196
      },
      "33": {
        loc: {
          start: {
            line: 203,
            column: 15
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 15
          },
          end: {
            line: 203,
            column: 23
          }
        }, {
          start: {
            line: 203,
            column: 27
          },
          end: {
            line: 205,
            column: 13
          }
        }],
        line: 203
      },
      "34": {
        loc: {
          start: {
            line: 214,
            column: 15
          },
          end: {
            line: 214,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 15
          },
          end: {
            line: 214,
            column: 72
          }
        }, {
          start: {
            line: 214,
            column: 76
          },
          end: {
            line: 214,
            column: 78
          }
        }],
        line: 214
      },
      "35": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "36": {
        loc: {
          start: {
            line: 237,
            column: 18
          },
          end: {
            line: 237,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 18
          },
          end: {
            line: 237,
            column: 31
          }
        }, {
          start: {
            line: 237,
            column: 35
          },
          end: {
            line: 237,
            column: 44
          }
        }],
        line: 237
      },
      "37": {
        loc: {
          start: {
            line: 238,
            column: 15
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 26
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 244,
            column: 13
          }
        }],
        line: 238
      },
      "38": {
        loc: {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 32
          }
        }, {
          start: {
            line: 242,
            column: 36
          },
          end: {
            line: 244,
            column: 13
          }
        }],
        line: 242
      },
      "39": {
        loc: {
          start: {
            line: 245,
            column: 15
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 15
          },
          end: {
            line: 245,
            column: 35
          }
        }, {
          start: {
            line: 245,
            column: 39
          },
          end: {
            line: 247,
            column: 13
          }
        }],
        line: 245
      },
      "40": {
        loc: {
          start: {
            line: 254,
            column: 22
          },
          end: {
            line: 254,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 22
          },
          end: {
            line: 254,
            column: 31
          }
        }, {
          start: {
            line: 254,
            column: 35
          },
          end: {
            line: 254,
            column: 81
          }
        }],
        line: 254
      },
      "41": {
        loc: {
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 286,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 286,
            column: 32
          }
        }, {
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 286,
            column: 42
          }
        }],
        line: 286
      },
      "42": {
        loc: {
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 42
          }
        }, {
          start: {
            line: 291,
            column: 46
          },
          end: {
            line: 291,
            column: 48
          }
        }],
        line: 291
      },
      "43": {
        loc: {
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 40
          }
        }, {
          start: {
            line: 292,
            column: 44
          },
          end: {
            line: 292,
            column: 49
          }
        }],
        line: 292
      },
      "44": {
        loc: {
          start: {
            line: 293,
            column: 21
          },
          end: {
            line: 293,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 21
          },
          end: {
            line: 293,
            column: 42
          }
        }, {
          start: {
            line: 293,
            column: 46
          },
          end: {
            line: 293,
            column: 51
          }
        }],
        line: 293
      },
      "45": {
        loc: {
          start: {
            line: 294,
            column: 15
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 15
          },
          end: {
            line: 294,
            column: 40
          }
        }, {
          start: {
            line: 294,
            column: 44
          },
          end: {
            line: 296,
            column: 13
          }
        }],
        line: 294
      },
      "46": {
        loc: {
          start: {
            line: 297,
            column: 15
          },
          end: {
            line: 299,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 15
          },
          end: {
            line: 297,
            column: 43
          }
        }, {
          start: {
            line: 297,
            column: 47
          },
          end: {
            line: 299,
            column: 13
          }
        }],
        line: 297
      },
      "47": {
        loc: {
          start: {
            line: 300,
            column: 15
          },
          end: {
            line: 302,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 15
          },
          end: {
            line: 300,
            column: 42
          }
        }, {
          start: {
            line: 300,
            column: 46
          },
          end: {
            line: 302,
            column: 13
          }
        }],
        line: 300
      },
      "48": {
        loc: {
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 303,
            column: 37
          }
        }, {
          start: {
            line: 303,
            column: 41
          },
          end: {
            line: 305,
            column: 13
          }
        }],
        line: 303
      },
      "49": {
        loc: {
          start: {
            line: 306,
            column: 15
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 15
          },
          end: {
            line: 306,
            column: 40
          }
        }, {
          start: {
            line: 306,
            column: 44
          },
          end: {
            line: 308,
            column: 13
          }
        }],
        line: 306
      },
      "50": {
        loc: {
          start: {
            line: 309,
            column: 21
          },
          end: {
            line: 309,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 21
          },
          end: {
            line: 309,
            column: 42
          }
        }, {
          start: {
            line: 309,
            column: 46
          },
          end: {
            line: 309,
            column: 51
          }
        }],
        line: 309
      },
      "51": {
        loc: {
          start: {
            line: 310,
            column: 31
          },
          end: {
            line: 310,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 31
          },
          end: {
            line: 310,
            column: 62
          }
        }, {
          start: {
            line: 310,
            column: 66
          },
          end: {
            line: 310,
            column: 71
          }
        }],
        line: 310
      },
      "52": {
        loc: {
          start: {
            line: 311,
            column: 25
          },
          end: {
            line: 311,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 25
          },
          end: {
            line: 311,
            column: 50
          }
        }, {
          start: {
            line: 311,
            column: 54
          },
          end: {
            line: 311,
            column: 56
          }
        }],
        line: 311
      },
      "53": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "54": {
        loc: {
          start: {
            line: 399,
            column: 19
          },
          end: {
            line: 401,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 399,
            column: 19
          },
          end: {
            line: 399,
            column: 34
          }
        }, {
          start: {
            line: 399,
            column: 38
          },
          end: {
            line: 401,
            column: 17
          }
        }],
        line: 399
      },
      "55": {
        loc: {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 417,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 417,
            column: 13
          }
        }, {
          start: {
            line: 411,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        }],
        line: 409
      },
      "56": {
        loc: {
          start: {
            line: 411,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        }, {
          start: {
            line: 413,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        }],
        line: 411
      },
      "57": {
        loc: {
          start: {
            line: 413,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        }, {
          start: {
            line: 415,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        }],
        line: 413
      },
      "58": {
        loc: {
          start: {
            line: 415,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 19
          },
          end: {
            line: 417,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "59": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "60": {
        loc: {
          start: {
            line: 446,
            column: 50
          },
          end: {
            line: 446,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 446,
            column: 50
          },
          end: {
            line: 446,
            column: 63
          }
        }, {
          start: {
            line: 446,
            column: 67
          },
          end: {
            line: 446,
            column: 98
          }
        }],
        line: 446
      },
      "61": {
        loc: {
          start: {
            line: 455,
            column: 15
          },
          end: {
            line: 457,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 455,
            column: 15
          },
          end: {
            line: 455,
            column: 32
          }
        }, {
          start: {
            line: 455,
            column: 36
          },
          end: {
            line: 457,
            column: 13
          }
        }],
        line: 455
      },
      "62": {
        loc: {
          start: {
            line: 458,
            column: 15
          },
          end: {
            line: 460,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 15
          },
          end: {
            line: 458,
            column: 31
          }
        }, {
          start: {
            line: 458,
            column: 35
          },
          end: {
            line: 460,
            column: 13
          }
        }],
        line: 458
      },
      "63": {
        loc: {
          start: {
            line: 461,
            column: 15
          },
          end: {
            line: 463,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 15
          },
          end: {
            line: 461,
            column: 32
          }
        }, {
          start: {
            line: 461,
            column: 36
          },
          end: {
            line: 463,
            column: 13
          }
        }],
        line: 461
      },
      "64": {
        loc: {
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "65": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 483,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "66": {
        loc: {
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 487,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 487,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "67": {
        loc: {
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 485,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 485,
            column: 44
          }
        }, {
          start: {
            line: 485,
            column: 48
          },
          end: {
            line: 485,
            column: 76
          }
        }],
        line: 485
      },
      "68": {
        loc: {
          start: {
            line: 486,
            column: 55
          },
          end: {
            line: 486,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 486,
            column: 55
          },
          end: {
            line: 486,
            column: 84
          }
        }, {
          start: {
            line: 486,
            column: 88
          },
          end: {
            line: 486,
            column: 93
          }
        }],
        line: 486
      },
      "69": {
        loc: {
          start: {
            line: 491,
            column: 39
          },
          end: {
            line: 491,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 491,
            column: 39
          },
          end: {
            line: 491,
            column: 71
          }
        }, {
          start: {
            line: 491,
            column: 75
          },
          end: {
            line: 491,
            column: 80
          }
        }],
        line: 491
      },
      "70": {
        loc: {
          start: {
            line: 493,
            column: 19
          },
          end: {
            line: 495,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 493,
            column: 19
          },
          end: {
            line: 493,
            column: 51
          }
        }, {
          start: {
            line: 493,
            column: 55
          },
          end: {
            line: 495,
            column: 17
          }
        }],
        line: 493
      },
      "71": {
        loc: {
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        }, {
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 505,
            column: 13
          }
        }],
        line: 499
      },
      "72": {
        loc: {
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 505,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 505,
            column: 13
          }
        }, {
          start: {
            line: 503,
            column: 19
          },
          end: {
            line: 505,
            column: 13
          }
        }],
        line: 501
      },
      "73": {
        loc: {
          start: {
            line: 503,
            column: 19
          },
          end: {
            line: 505,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 19
          },
          end: {
            line: 505,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "74": {
        loc: {
          start: {
            line: 519,
            column: 15
          },
          end: {
            line: 519,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 15
          },
          end: {
            line: 519,
            column: 40
          }
        }, {
          start: {
            line: 519,
            column: 44
          },
          end: {
            line: 519,
            column: 46
          }
        }],
        line: 519
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/lib/google-drive/service.ts"],
      sourcesContent: ["import { Readable } from 'stream'\n\nimport { drive_v3 } from 'googleapis'\n\nimport { createDriveClient } from './config'\nimport {\n  DriveFile,\n  DriveFolder,\n  DriveSearchOptions,\n  DriveSearchResult,\n  DriveUploadOptions,\n  DrivePermission,\n  DriveUserInfo,\n  DriveFileMetadata,\n} from './types'\nimport { DetailedDriveFile } from './detailed-file-types'\nimport {\n  mapUserInfo,\n  mapImageMetadata,\n  mapVideoMetadata,\n  mapShortcutDetails,\n  mapContentRestrictions,\n  mapLinkShareMetadata,\n  mapLabelInfo,\n  mapBasicProperties,\n  mapChecksums,\n  mapBooleanProperties,\n  mapCollectionProperties,\n} from './file-detail-mappers'\nimport { validateListFilesOptions } from './validation-utils'\nimport { validateFileName, handleDriveApiError } from './file-validation'\nimport { getOptimizedFields, fieldOptimizationMonitor } from './field-optimization'\nimport { convertGoogleDriveFile, convertGoogleDriveFolder, buildSearchQuery, getMimeTypeFromFileName } from './utils'\nimport { getOptimizedRequestParams, performanceMonitor, requestDeduplicator } from './performance'\n\nexport class GoogleDriveService {\n  public drive: drive_v3.Drive\n\n  constructor(accessToken: string) {\n    this.drive = createDriveClient(accessToken)\n  }\n\n  async getUserInfo(): Promise<DriveUserInfo> {\n    // Use Drive API about endpoint for user info instead of OAuth2 userinfo API\n    // This is the recommended approach according to Google Drive API documentation\n    const aboutResponse = await this.drive.about.get({\n      fields: 'user,storageQuota',\n    })\n\n    const about = aboutResponse.data\n    const user = about.user\n\n    if (!user) {\n      throw new Error('Unable to fetch user information from Drive API')\n    }\n\n    return {\n      id: user.permissionId ?? 'unknown',\n      name: user.displayName ?? 'Unknown User',\n      email: user.emailAddress ?? '',\n      ...(user.photoLink && { picture: user.photoLink }),\n      ...(about.storageQuota && {\n        storageQuota: {\n          limit: about.storageQuota.limit!,\n          usage: about.storageQuota.usage!,\n          usageInDrive: about.storageQuota.usageInDrive!,\n          usageInDriveTrash: about.storageQuota.usageInDriveTrash!,\n        },\n      }),\n    }\n  }\n\n  async listFiles(options: DriveSearchOptions = {}): Promise<DriveSearchResult> {\n    const {\n      query,\n      parentId,\n      mimeType,\n      pageSize = 50,\n      pageToken,\n      orderBy = 'modifiedTime desc',\n      includeTeamDriveItems = true,\n    } = options\n\n    // Validate and process all options using helper functions\n    const validationParams: any = {\n      pageSize,\n      query,\n      parentId,\n      mimeType,\n    }\n    \n    if (pageToken) {\n      validationParams.pageToken = pageToken\n    }\n    \n    const { validPageSize, validPageToken, searchQuery, operationType } = validateListFilesOptions(validationParams)\n\n    // Use operation type from validation\n    const operation = operationType\n    const baseParams = {\n      q: searchQuery,\n      pageSize: validPageSize,\n      orderBy,\n      includeItemsFromAllDrives: includeTeamDriveItems,\n      supportsAllDrives: includeTeamDriveItems,\n    }\n\n    // Use optimized fields based on operation type\n    const optimizedFields = getOptimizedFields('LIST_STANDARD')\n    const requestParams = {\n      ...getOptimizedRequestParams(operation, baseParams),\n      fields: `nextPageToken,incompleteSearch,files(${optimizedFields})`,\n    }\n    // Log query for debugging in development only\n    if (process.env.NODE_ENV === 'development') {\n      console.info('[Drive API] - Query:', searchQuery)\n    }\n\n    // Only add pageToken if it's valid\n    if (validPageToken) {\n      requestParams.pageToken = validPageToken\n    }\n\n    try {\n      // Generate deduplication key for identical requests\n      const dedupKey = requestDeduplicator.generateKey('listFiles', requestParams)\n\n      // Use performance monitoring and request deduplication\n      const response = await performanceMonitor.trackRequest('listFiles', async () => {\n        return await requestDeduplicator.deduplicate(dedupKey, async () => {\n          return await this.drive.files.list(requestParams)\n        })\n      })\n\n      const files = response.data.files?.map(convertGoogleDriveFile) ?? []\n\n      console.info(`[Drive API] - Result: ${files.length} items`)\n\n      return {\n        files,\n        ...(response.data.nextPageToken && { nextPageToken: response.data.nextPageToken }),\n        incompleteSearch: response.data.incompleteSearch || false,\n      }\n    } catch (error: any) {\n      // Handle authentication errors\n      if (error.code === 401 || error.status === 401) {\n        const authError = new Error('Authentication required')\n        authError.name = 'AuthenticationError'\n        ;(authError as any).code = 401\n        ;(authError as any).needsReauth = true\n        throw authError\n      }\n\n      // Handle insufficient permissions\n      if (error.code === 403 || error.status === 403) {\n        const permissionError = new Error('Insufficient permissions')\n        permissionError.name = 'PermissionError'\n        ;(permissionError as any).code = 403\n        ;(permissionError as any).needsReauth = true\n        throw permissionError\n      }\n\n      // Handle specific Google Drive API errors\n      if (error.code === 400 && error.message?.includes('Invalid Value')) {\n        // If pageToken was the issue, retry without it\n        if (validPageToken) {\n          const retryParams = { ...requestParams }\n          delete retryParams.pageToken\n\n          const retryResponse = await this.drive.files.list(retryParams)\n          const retryFiles = retryResponse.data.files?.map(convertGoogleDriveFile) || []\n\n          return {\n            files: retryFiles,\n            ...(retryResponse.data.nextPageToken && {\n              nextPageToken: retryResponse.data.nextPageToken,\n            }),\n            incompleteSearch: retryResponse.data.incompleteSearch || false,\n          }\n        }\n      }\n\n      // Re-throw other errors\n      throw error\n    }\n  }\n\n  async getFile(fileId: string): Promise<DriveFile> {\n    const response = await this.drive.files.get({\n      fileId,\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, shared, trashed, starred, capabilities, owners(displayName,emailAddress,photoLink)',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  async getFileDetails(fileId: string, fields?: string): Promise<DetailedDriveFile> {\n    const startTime = Date.now()\n    const optimizedFields = fields || getOptimizedFields('FILE_DETAILS')\n\n    const response = await this.drive.files.get({\n      fileId,\n      fields: optimizedFields, // Use optimized fields instead of '*'\n    })\n\n    // Track performance improvement\n    const responseTime = Date.now() - startTime\n    fieldOptimizationMonitor.trackRequest('getFileDetails', responseTime, optimizedFields.split(',').length)\n\n    const file = convertGoogleDriveFile(response.data)\n    const responseData = response.data\n\n    return {\n      ...file,\n      // User information\n      lastModifyingUser: mapUserInfo(responseData.lastModifyingUser),\n      sharingUser: mapUserInfo(responseData.sharingUser),\n\n      // Basic file properties\n      ...mapBasicProperties(responseData),\n\n      // Checksums and storage info\n      ...mapChecksums(responseData),\n\n      // Boolean properties with defaults\n      ...mapBooleanProperties(responseData),\n\n      // Array and object properties\n      ...mapCollectionProperties(responseData),\n\n      // Media metadata\n      ...(responseData.imageMediaMetadata && {\n        imageMediaMetadata: mapImageMetadata(responseData.imageMediaMetadata),\n      }),\n      ...(responseData.videoMediaMetadata && {\n        videoMediaMetadata: mapVideoMetadata(responseData.videoMediaMetadata),\n      }),\n\n      // Shortcut details\n      ...(responseData.shortcutDetails && {\n        shortcutDetails: mapShortcutDetails(responseData.shortcutDetails),\n      }),\n\n      // Content restrictions\n      contentRestrictions: mapContentRestrictions(responseData.contentRestrictions || []),\n\n      // Link sharing metadata\n      ...(responseData.linkShareMetadata && {\n        linkShareMetadata: mapLinkShareMetadata(responseData.linkShareMetadata),\n      }),\n\n      // Label information\n      ...(responseData.labelInfo && {\n        labelInfo: mapLabelInfo(responseData.labelInfo),\n      }),\n    }\n  }\n\n  async getFolders(parentId?: string): Promise<DriveFolder[]> {\n    const query = buildSearchQuery({\n      ...(parentId && { parentId }),\n      mimeType: 'application/vnd.google-apps.folder',\n      trashed: false,\n    })\n\n    const response = await this.drive.files.list({\n      q: query,\n      orderBy: 'name',\n      fields: 'files(id, name, createdTime, modifiedTime, parents, shared, trashed)',\n    })\n\n    return response.data.files?.map(convertGoogleDriveFolder) || []\n  }\n\n  async createFolder(name: string, parentId?: string): Promise<DriveFolder> {\n    const metadata: DriveFileMetadata = {\n      name,\n      mimeType: 'application/vnd.google-apps.folder',\n      createdTime: new Date().toISOString(),\n      modifiedTime: new Date().toISOString(),\n    }\n\n    if (parentId) {\n      metadata.parents = [parentId]\n    }\n\n    const response = await this.drive.files.create({\n      requestBody: metadata,\n      fields: 'id, name, createdTime, modifiedTime, parents, shared, trashed',\n    })\n\n    return convertGoogleDriveFolder(response.data)\n  }\n\n  async uploadFile(options: DriveUploadOptions): Promise<DriveFile> {\n    const { file, metadata, parentId } = options\n\n    const fileMetadata: any = {\n      name: metadata.name || file.name,\n      ...(parentId ? { parents: [parentId] } : metadata.parents && { parents: metadata.parents }),\n      ...(metadata.description && { description: metadata.description }),\n      // Don't include mimeType in metadata as it should be in media object\n    }\n\n    // Convert File to readable stream for Google Drive API\n    const arrayBuffer = await file.arrayBuffer()\n    const buffer = Buffer.from(arrayBuffer)\n    const stream = Readable.from(buffer)\n\n    const media = {\n      mimeType: file.type || getMimeTypeFromFileName(file.name),\n      body: stream,\n    }\n\n    // Use uploadType=multipart for proper file upload according to Drive API docs\n    const response = await this.drive.files.create({\n      requestBody: fileMetadata,\n      media,\n      uploadType: 'multipart',\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  async downloadFile(fileId: string): Promise<Readable> {\n    const response = await this.drive.files.get(\n      {\n        fileId,\n        alt: 'media',\n      },\n      { responseType: 'stream' },\n    )\n\n    return response.data as Readable\n  }\n\n  /**\n   * Get file metadata with specific fields\n   */\n  async getFileMetadata(fileId: string, fields: string[]): Promise<DriveFileMetadata & { id: string }> {\n    const response = await this.drive.files.get({\n      fileId,\n      fields: fields.join(','),\n    })\n\n    // // // // // console.log('[Google Drive Service] Raw API response:', response.data)\n    // // // // // console.log('[Google Drive Service] Response ID:', response.data.id)\n\n    return {\n      id: response.data.id || fileId, // Ensure id is always present\n      name: response.data.name!,\n      mimeType: response.data.mimeType!,\n      createdTime: response.data.createdTime!,\n      modifiedTime: response.data.modifiedTime!,\n      parents: response.data.parents || [],\n      shared: response.data.shared || false,\n      trashed: response.data.trashed || false,\n      ...(response.data.webViewLink && { webViewLink: response.data.webViewLink }),\n      ...(response.data.webContentLink && { webContentLink: response.data.webContentLink }),\n      ...(response.data.thumbnailLink && { thumbnailLink: response.data.thumbnailLink }),\n      ...(response.data.iconLink && { iconLink: response.data.iconLink }),\n      ...(response.data.description && { description: response.data.description }),\n      starred: response.data.starred || false,\n      explicitlyTrashed: response.data.explicitlyTrashed || false,\n      exportLinks: response.data.exportLinks || {},\n    }\n  }\n\n  // Unified permanent delete operation for both files and folders\n  async deleteFile(fileId: string): Promise<void> {\n    await this.drive.files.delete({ fileId })\n  }\n\n  async exportFile(fileId: string, mimeType: string): Promise<ArrayBuffer> {\n    const response = await this.drive.files.export(\n      {\n        fileId,\n        mimeType,\n      },\n      {\n        responseType: 'arraybuffer',\n      },\n    )\n    return response.data as ArrayBuffer\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async deleteFolder(folderId: string): Promise<void> {\n    return this.deleteFile(folderId)\n  }\n\n  // Unified move to trash operation for both files and folders\n  async moveToTrash(fileId: string): Promise<DriveFile> {\n    const response = await this.drive.files.update({\n      fileId,\n      requestBody: { trashed: true },\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async moveFolderToTrash(folderId: string): Promise<DriveFile> {\n    return this.moveToTrash(folderId)\n  }\n\n  // Unified restore from trash operation for both files and folders\n  async untrashFile(fileId: string): Promise<DriveFile> {\n    const response = await this.drive.files.update({\n      fileId,\n      requestBody: { trashed: false },\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async restoreFolderFromTrash(folderId: string): Promise<DriveFile> {\n    return this.untrashFile(folderId)\n  }\n\n  // Unified rename operation for both files and folders\n  async renameFile(fileId: string, newName: string): Promise<DriveFile> {\n    try {\n      // Validate filename using helper function\n      validateFileName(newName)\n\n      const optimizedFields = getOptimizedFields('LIST_DETAILED')\n      const response = await this.drive.files.update({\n        fileId,\n        requestBody: { name: newName.trim() },\n        fields: optimizedFields,\n      })\n\n      return convertGoogleDriveFile(response.data)\n    } catch (error: any) {\n      // Handle errors using centralized error handler\n      handleDriveApiError(error)\n    }\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async renameFolder(folderId: string, newName: string): Promise<DriveFile> {\n    return this.renameFile(folderId, newName)\n  }\n\n  // Unified move operation for both files and folders with error recovery\n  async moveFile(fileId: string, newParentId: string, currentParentId?: string): Promise<DriveFile> {\n    try {\n      // According to Drive API docs, we should get current parents if not provided\n      if (!currentParentId) {\n        const fileInfo = await this.getFile(fileId)\n        currentParentId = fileInfo.parents?.[0]\n      }\n\n      const updateParams: any = {\n        fileId,\n        addParents: newParentId,\n        ...(currentParentId && { removeParents: currentParentId }),\n        fields:\n          'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n      }\n\n      const response = await this.drive.files.update(updateParams)\n\n      const result = await response\n      return convertGoogleDriveFile(result.data)\n    } catch (error: any) {\n      // Handle specific Google API errors according to documentation\n      if (error.code === 403) {\n        throw new Error('Insufficient permissions to move this file')\n      } else if (error.code === 404) {\n        throw new Error('File or destination folder not found')\n      } else if (error.code === 429) {\n        throw new Error('Rate limit exceeded. Please try again later')\n      } else if (error.code === 400) {\n        throw new Error('Invalid move operation parameters')\n      }\n\n      // Re-throw with original error for unexpected cases\n      throw error\n    }\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async moveFolder(folderId: string, newParentId: string, currentParentId?: string): Promise<DriveFile> {\n    return this.moveFile(folderId, newParentId, currentParentId)\n  }\n\n  // Copy operation - works for files, folders require special handling\n  async copyFile(fileId: string, metadata: Partial<DriveFileMetadata>): Promise<DriveFile> {\n    // First check if this is a folder\n    const originalFile = await this.getFile(fileId)\n\n    if (originalFile.mimeType === 'application/vnd.google-apps.folder') {\n      // For folders, we need to create a new folder and copy contents\n      return this.copyFolder(fileId, metadata)\n    }\n\n    const response = await this.drive.files.copy({\n      fileId,\n      requestBody: metadata,\n      fields:\n        'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed',\n    })\n\n    const result = await response\n    return convertGoogleDriveFile(result.data)\n  }\n\n  // Special handling for folder copying\n  async copyFolder(folderId: string, metadata: Partial<DriveFileMetadata>): Promise<DriveFile> {\n    const originalFolder = await this.getFile(folderId)\n\n    // Create new folder with the specified metadata\n    const newFolder = await this.createFolder(metadata.name || `${originalFolder.name} - Copy`, metadata.parents?.[0])\n\n    // Note: For full folder copying with contents, we would need recursive copying\n    // This creates an empty copy of the folder structure\n    return convertGoogleDriveFile({\n      id: newFolder.id!,\n      name: newFolder.name!,\n      mimeType: 'application/vnd.google-apps.folder',\n      createdTime: newFolder.createdTime!,\n      modifiedTime: newFolder.modifiedTime!,\n      ...(newFolder.parents && { parents: newFolder.parents }),\n      ...(newFolder.shared && { shared: newFolder.shared }),\n      ...(newFolder.trashed && { trashed: newFolder.trashed }),\n    })\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async removeFolderPermission(folderId: string, permissionId: string): Promise<void> {\n    return this.removeFilePermission(folderId, permissionId)\n  }\n\n  // Unified share operation for both files and folders\n  async shareFile(fileId: string, permission: DrivePermission): Promise<void> {\n    try {\n      const permissionRequest: any = {\n        role: permission.role,\n        type: permission.type,\n      }\n\n      // Add optional fields only if provided, according to API docs\n      if (permission.emailAddress) {\n        permissionRequest.emailAddress = permission.emailAddress\n      }\n\n      if (permission.domain) {\n        permissionRequest.domain = permission.domain\n      }\n\n      // Set allowFileDiscovery for domain/anyone permissions as per API docs\n      if (permission.type === 'domain' || permission.type === 'anyone') {\n        permissionRequest.allowFileDiscovery = permission.allowFileDiscovery ?? false\n      }\n\n      await this.drive.permissions.create({\n        fileId,\n        requestBody: permissionRequest,\n        sendNotificationEmail: permission.sendNotificationEmail ?? false,\n        // Add emailMessage if sending notifications\n        ...(permission.sendNotificationEmail && {\n          emailMessage: 'File shared with you via Drive Manager',\n        }),\n      })\n    } catch (error: any) {\n      // Handle specific API errors according to documentation\n      if (error.code === 403) {\n        throw new Error('Insufficient permissions to share this file')\n      } else if (error.code === 404) {\n        throw new Error('File not found')\n      } else if (error.code === 400) {\n        throw new Error('Invalid sharing parameters')\n      }\n\n      throw error\n    }\n  }\n\n  // Alias for clarity - same operation works for both files and folders\n  async shareFolder(folderId: string, permission: DrivePermission): Promise<void> {\n    return this.shareFile(folderId, permission)\n  }\n\n  // Get file permissions\n  async getFilePermissions(fileId: string): Promise<any[]> {\n    const response = await this.drive.permissions.list({\n      fileId,\n      fields: 'permissions(id, type, role, emailAddress, domain, displayName)',\n    })\n\n    return response.data.permissions || []\n  }\n\n  // Remove file permission\n  async removeFilePermission(fileId: string, permissionId: string): Promise<void> {\n    await this.drive.permissions.delete({\n      fileId,\n      permissionId,\n    })\n  }\n\n  // Create permission (for enhanced sharing)\n  async createPermission(fileId: string, permissionData: any): Promise<any> {\n    const response = await this.drive.permissions.create({\n      fileId,\n      requestBody: permissionData,\n      sendNotificationEmail: false,\n    })\n    return response.data\n  }\n\n  // Delete permission (for enhanced sharing)\n  async deletePermission(fileId: string, permissionId: string): Promise<void> {\n    await this.drive.permissions.delete({\n      fileId,\n      permissionId,\n    })\n  }\n\n  // Send notification email (for enhanced sharing)\n  async sendNotificationEmail(fileId: string, emailData: any): Promise<void> {\n    // Note: This would typically use the Gmail API or similar service\n    // For now, we'll just log the action\n    console.log('Notification email would be sent for file:', fileId, 'with data:', emailData)\n  }\n}\n"],
      names: ["GoogleDriveService", "constructor", "accessToken", "drive", "createDriveClient", "getUserInfo", "aboutResponse", "about", "get", "fields", "data", "user", "Error", "id", "permissionId", "name", "displayName", "email", "emailAddress", "photoLink", "picture", "storageQuota", "limit", "usage", "usageInDrive", "usageInDriveTrash", "listFiles", "options", "query", "parentId", "mimeType", "pageSize", "pageToken", "orderBy", "includeTeamDriveItems", "validationParams", "validPageSize", "validPageToken", "searchQuery", "operationType", "validateListFilesOptions", "operation", "baseParams", "q", "includeItemsFromAllDrives", "supportsAllDrives", "optimizedFields", "getOptimizedFields", "requestParams", "getOptimizedRequestParams", "process", "env", "NODE_ENV", "console", "info", "dedupKey", "requestDeduplicator", "generateKey", "response", "performanceMonitor", "trackRequest", "deduplicate", "files", "list", "map", "convertGoogleDriveFile", "length", "nextPageToken", "incompleteSearch", "error", "code", "status", "authError", "needsReauth", "permissionError", "message", "includes", "retryParams", "retryResponse", "retryFiles", "getFile", "fileId", "result", "getFileDetails", "startTime", "Date", "now", "responseTime", "fieldOptimizationMonitor", "split", "file", "responseData", "lastModifyingUser", "mapUserInfo", "sharingUser", "mapBasicProperties", "mapChecksums", "mapBooleanProperties", "mapCollectionProperties", "imageMediaMetadata", "mapImageMetadata", "videoMediaMetadata", "mapVideoMetadata", "shortcutDetails", "mapShortcutDetails", "contentRestrictions", "mapContentRestrictions", "linkShareMetadata", "mapLinkShareMetadata", "labelInfo", "mapLabelInfo", "getFolders", "buildSearchQuery", "trashed", "convertGoogleDriveFolder", "createFolder", "metadata", "createdTime", "toISOString", "modifiedTime", "parents", "create", "requestBody", "uploadFile", "fileMetadata", "description", "arrayBuffer", "buffer", "Buffer", "from", "stream", "Readable", "media", "type", "getMimeTypeFromFileName", "body", "uploadType", "downloadFile", "alt", "responseType", "getFileMetadata", "join", "shared", "webViewLink", "webContentLink", "thumbnailLink", "iconLink", "starred", "explicitlyTrashed", "exportLinks", "deleteFile", "delete", "exportFile", "export", "deleteFolder", "folderId", "moveToTrash", "update", "moveFolderToTrash", "untrashFile", "restoreFolderFromTrash", "renameFile", "newName", "validateFileName", "trim", "handleDriveApiError", "renameFolder", "moveFile", "newParentId", "currentParentId", "fileInfo", "updateParams", "addParents", "removeParents", "moveFolder", "copyFile", "originalFile", "copyFolder", "copy", "originalFolder", "newFolder", "removeFolderPermission", "removeFilePermission", "shareFile", "permission", "permissionRequest", "role", "domain", "allowFileDiscovery", "permissions", "sendNotificationEmail", "emailMessage", "shareFolder", "getFilePermissions", "createPermission", "permissionData", "deletePermission", "emailData", "log"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1092952e40ef8e1b213e1046507291acc470b462"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17a1zyeo6z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17a1zyeo6z();
cov_17a1zyeo6z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_17a1zyeo6z().s[1]++;
Object.defineProperty(exports, "GoogleDriveService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[0]++;
    cov_17a1zyeo6z().s[2]++;
    return GoogleDriveService;
  }
});
const _stream =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[3]++, require("stream"));
const _config =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[4]++, require("./config"));
const _filedetailmappers =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[5]++, require("./file-detail-mappers"));
const _validationutils =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[6]++, require("./validation-utils"));
const _filevalidation =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[7]++, require("./file-validation"));
const _fieldoptimization =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[8]++, require("./field-optimization"));
const _utils =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[9]++, require("./utils"));
const _performance =
/* istanbul ignore next */
(cov_17a1zyeo6z().s[10]++, require("./performance"));
class GoogleDriveService {
  constructor(accessToken) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[1]++;
    cov_17a1zyeo6z().s[11]++;
    this.drive = (0, _config.createDriveClient)(accessToken);
  }
  async getUserInfo() {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[2]++;
    // Use Drive API about endpoint for user info instead of OAuth2 userinfo API
    // This is the recommended approach according to Google Drive API documentation
    const aboutResponse =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[12]++, await this.drive.about.get({
      fields: 'user,storageQuota'
    }));
    const about =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[13]++, aboutResponse.data);
    const user =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[14]++, about.user);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[15]++;
    if (!user) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().b[0][0]++;
      cov_17a1zyeo6z().s[16]++;
      throw new Error('Unable to fetch user information from Drive API');
    } else
    /* istanbul ignore next */
    {
      cov_17a1zyeo6z().b[0][1]++;
    }
    cov_17a1zyeo6z().s[17]++;
    return {
      id:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[1][0]++, user.permissionId) ??
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[1][1]++, 'unknown'),
      name:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[2][0]++, user.displayName) ??
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[2][1]++, 'Unknown User'),
      email:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[3][0]++, user.emailAddress) ??
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[3][1]++, ''),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[4][0]++, user.photoLink) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[4][1]++, {
        picture: user.photoLink
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[5][0]++, about.storageQuota) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[5][1]++, {
        storageQuota: {
          limit: about.storageQuota.limit,
          usage: about.storageQuota.usage,
          usageInDrive: about.storageQuota.usageInDrive,
          usageInDriveTrash: about.storageQuota.usageInDriveTrash
        }
      }))
    };
  }
  async listFiles(options =
  /* istanbul ignore next */
  (cov_17a1zyeo6z().b[6][0]++, {})) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[3]++;
    const {
      query,
      parentId,
      mimeType,
      pageSize =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[7][0]++, 50),
      pageToken,
      orderBy =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[8][0]++, 'modifiedTime desc'),
      includeTeamDriveItems =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[9][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[18]++, options);
    // Validate and process all options using helper functions
    const validationParams =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[19]++, {
      pageSize,
      query,
      parentId,
      mimeType
    });
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[20]++;
    if (pageToken) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().b[10][0]++;
      cov_17a1zyeo6z().s[21]++;
      validationParams.pageToken = pageToken;
    } else
    /* istanbul ignore next */
    {
      cov_17a1zyeo6z().b[10][1]++;
    }
    const {
      validPageSize,
      validPageToken,
      searchQuery,
      operationType
    } =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[22]++, (0, _validationutils.validateListFilesOptions)(validationParams));
    // Use operation type from validation
    const operation =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[23]++, operationType);
    const baseParams =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[24]++, {
      q: searchQuery,
      pageSize: validPageSize,
      orderBy,
      includeItemsFromAllDrives: includeTeamDriveItems,
      supportsAllDrives: includeTeamDriveItems
    });
    // Use optimized fields based on operation type
    const optimizedFields =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[25]++, (0, _fieldoptimization.getOptimizedFields)('LIST_STANDARD'));
    const requestParams =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[26]++, {
      ...(0, _performance.getOptimizedRequestParams)(operation, baseParams),
      fields: `nextPageToken,incompleteSearch,files(${optimizedFields})`
    });
    // Log query for debugging in development only
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[27]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_17a1zyeo6z().b[11][0]++;
      cov_17a1zyeo6z().s[28]++;
      console.info('[Drive API] - Query:', searchQuery);
    } else
    /* istanbul ignore next */
    {
      cov_17a1zyeo6z().b[11][1]++;
    }
    // Only add pageToken if it's valid
    cov_17a1zyeo6z().s[29]++;
    if (validPageToken) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().b[12][0]++;
      cov_17a1zyeo6z().s[30]++;
      requestParams.pageToken = validPageToken;
    } else
    /* istanbul ignore next */
    {
      cov_17a1zyeo6z().b[12][1]++;
    }
    cov_17a1zyeo6z().s[31]++;
    try {
      // Generate deduplication key for identical requests
      const dedupKey =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[32]++, _performance.requestDeduplicator.generateKey('listFiles', requestParams));
      // Use performance monitoring and request deduplication
      const response =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[33]++, await _performance.performanceMonitor.trackRequest('listFiles', async () => {
        /* istanbul ignore next */
        cov_17a1zyeo6z().f[4]++;
        cov_17a1zyeo6z().s[34]++;
        return await _performance.requestDeduplicator.deduplicate(dedupKey, async () => {
          /* istanbul ignore next */
          cov_17a1zyeo6z().f[5]++;
          cov_17a1zyeo6z().s[35]++;
          return await this.drive.files.list(requestParams);
        });
      }));
      const files =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[36]++,
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[13][0]++, response.data.files?.map(_utils.convertGoogleDriveFile)) ??
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[13][1]++, []));
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[37]++;
      console.info(`[Drive API] - Result: ${files.length} items`);
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[38]++;
      return {
        files,
        ...(
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[14][0]++, response.data.nextPageToken) &&
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[14][1]++, {
          nextPageToken: response.data.nextPageToken
        })),
        incompleteSearch:
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[15][0]++, response.data.incompleteSearch) ||
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[15][1]++, false)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[39]++;
      // Handle authentication errors
      if (
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[17][0]++, error.code === 401) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[17][1]++, error.status === 401)) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[16][0]++;
        const authError =
        /* istanbul ignore next */
        (cov_17a1zyeo6z().s[40]++, new Error('Authentication required'));
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[41]++;
        authError.name = 'AuthenticationError';
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[42]++;
        authError.code = 401;
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[43]++;
        authError.needsReauth = true;
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[44]++;
        throw authError;
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[16][1]++;
      }
      // Handle insufficient permissions
      cov_17a1zyeo6z().s[45]++;
      if (
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[19][0]++, error.code === 403) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[19][1]++, error.status === 403)) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[18][0]++;
        const permissionError =
        /* istanbul ignore next */
        (cov_17a1zyeo6z().s[46]++, new Error('Insufficient permissions'));
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[47]++;
        permissionError.name = 'PermissionError';
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[48]++;
        permissionError.code = 403;
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[49]++;
        permissionError.needsReauth = true;
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[50]++;
        throw permissionError;
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[18][1]++;
      }
      // Handle specific Google Drive API errors
      cov_17a1zyeo6z().s[51]++;
      if (
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[21][0]++, error.code === 400) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[21][1]++, error.message?.includes('Invalid Value'))) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[20][0]++;
        cov_17a1zyeo6z().s[52]++;
        // If pageToken was the issue, retry without it
        if (validPageToken) {
          /* istanbul ignore next */
          cov_17a1zyeo6z().b[22][0]++;
          const retryParams =
          /* istanbul ignore next */
          (cov_17a1zyeo6z().s[53]++, {
            ...requestParams
          });
          /* istanbul ignore next */
          cov_17a1zyeo6z().s[54]++;
          delete retryParams.pageToken;
          const retryResponse =
          /* istanbul ignore next */
          (cov_17a1zyeo6z().s[55]++, await this.drive.files.list(retryParams));
          const retryFiles =
          /* istanbul ignore next */
          (cov_17a1zyeo6z().s[56]++,
          /* istanbul ignore next */
          (cov_17a1zyeo6z().b[23][0]++, retryResponse.data.files?.map(_utils.convertGoogleDriveFile)) ||
          /* istanbul ignore next */
          (cov_17a1zyeo6z().b[23][1]++, []));
          /* istanbul ignore next */
          cov_17a1zyeo6z().s[57]++;
          return {
            files: retryFiles,
            ...(
            /* istanbul ignore next */
            (cov_17a1zyeo6z().b[24][0]++, retryResponse.data.nextPageToken) &&
            /* istanbul ignore next */
            (cov_17a1zyeo6z().b[24][1]++, {
              nextPageToken: retryResponse.data.nextPageToken
            })),
            incompleteSearch:
            /* istanbul ignore next */
            (cov_17a1zyeo6z().b[25][0]++, retryResponse.data.incompleteSearch) ||
            /* istanbul ignore next */
            (cov_17a1zyeo6z().b[25][1]++, false)
          };
        } else
        /* istanbul ignore next */
        {
          cov_17a1zyeo6z().b[22][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[20][1]++;
      }
      // Re-throw other errors
      cov_17a1zyeo6z().s[58]++;
      throw error;
    }
  }
  async getFile(fileId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[6]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[59]++, await this.drive.files.get({
      fileId,
      fields: 'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, shared, trashed, starred, capabilities, owners(displayName,emailAddress,photoLink)'
    }));
    const result =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[60]++, await response);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[61]++;
    return (0, _utils.convertGoogleDriveFile)(result.data);
  }
  async getFileDetails(fileId, fields) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[7]++;
    const startTime =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[62]++, Date.now());
    const optimizedFields =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[63]++,
    /* istanbul ignore next */
    (cov_17a1zyeo6z().b[26][0]++, fields) ||
    /* istanbul ignore next */
    (cov_17a1zyeo6z().b[26][1]++, (0, _fieldoptimization.getOptimizedFields)('FILE_DETAILS')));
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[64]++, await this.drive.files.get({
      fileId,
      fields: optimizedFields
    }));
    // Track performance improvement
    const responseTime =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[65]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[66]++;
    _fieldoptimization.fieldOptimizationMonitor.trackRequest('getFileDetails', responseTime, optimizedFields.split(',').length);
    const file =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[67]++, (0, _utils.convertGoogleDriveFile)(response.data));
    const responseData =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[68]++, response.data);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[69]++;
    return {
      ...file,
      // User information
      lastModifyingUser: (0, _filedetailmappers.mapUserInfo)(responseData.lastModifyingUser),
      sharingUser: (0, _filedetailmappers.mapUserInfo)(responseData.sharingUser),
      // Basic file properties
      ...(0, _filedetailmappers.mapBasicProperties)(responseData),
      // Checksums and storage info
      ...(0, _filedetailmappers.mapChecksums)(responseData),
      // Boolean properties with defaults
      ...(0, _filedetailmappers.mapBooleanProperties)(responseData),
      // Array and object properties
      ...(0, _filedetailmappers.mapCollectionProperties)(responseData),
      // Media metadata
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[27][0]++, responseData.imageMediaMetadata) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[27][1]++, {
        imageMediaMetadata: (0, _filedetailmappers.mapImageMetadata)(responseData.imageMediaMetadata)
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[28][0]++, responseData.videoMediaMetadata) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[28][1]++, {
        videoMediaMetadata: (0, _filedetailmappers.mapVideoMetadata)(responseData.videoMediaMetadata)
      })),
      // Shortcut details
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[29][0]++, responseData.shortcutDetails) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[29][1]++, {
        shortcutDetails: (0, _filedetailmappers.mapShortcutDetails)(responseData.shortcutDetails)
      })),
      // Content restrictions
      contentRestrictions: (0, _filedetailmappers.mapContentRestrictions)(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[30][0]++, responseData.contentRestrictions) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[30][1]++, [])),
      // Link sharing metadata
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[31][0]++, responseData.linkShareMetadata) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[31][1]++, {
        linkShareMetadata: (0, _filedetailmappers.mapLinkShareMetadata)(responseData.linkShareMetadata)
      })),
      // Label information
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[32][0]++, responseData.labelInfo) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[32][1]++, {
        labelInfo: (0, _filedetailmappers.mapLabelInfo)(responseData.labelInfo)
      }))
    };
  }
  async getFolders(parentId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[8]++;
    const query =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[70]++, (0, _utils.buildSearchQuery)({
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[33][0]++, parentId) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[33][1]++, {
        parentId
      })),
      mimeType: 'application/vnd.google-apps.folder',
      trashed: false
    }));
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[71]++, await this.drive.files.list({
      q: query,
      orderBy: 'name',
      fields: 'files(id, name, createdTime, modifiedTime, parents, shared, trashed)'
    }));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[72]++;
    return /* istanbul ignore next */(cov_17a1zyeo6z().b[34][0]++, response.data.files?.map(_utils.convertGoogleDriveFolder)) ||
    /* istanbul ignore next */
    (cov_17a1zyeo6z().b[34][1]++, []);
  }
  async createFolder(name, parentId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[9]++;
    const metadata =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[73]++, {
      name,
      mimeType: 'application/vnd.google-apps.folder',
      createdTime: new Date().toISOString(),
      modifiedTime: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[74]++;
    if (parentId) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().b[35][0]++;
      cov_17a1zyeo6z().s[75]++;
      metadata.parents = [parentId];
    } else
    /* istanbul ignore next */
    {
      cov_17a1zyeo6z().b[35][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[76]++, await this.drive.files.create({
      requestBody: metadata,
      fields: 'id, name, createdTime, modifiedTime, parents, shared, trashed'
    }));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[77]++;
    return (0, _utils.convertGoogleDriveFolder)(response.data);
  }
  async uploadFile(options) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[10]++;
    const {
      file,
      metadata,
      parentId
    } =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[78]++, options);
    const fileMetadata =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[79]++, {
      name:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[36][0]++, metadata.name) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[36][1]++, file.name),
      ...(parentId ?
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[37][0]++, {
        parents: [parentId]
      }) :
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[37][1]++,
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[38][0]++, metadata.parents) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[38][1]++, {
        parents: metadata.parents
      }))),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[39][0]++, metadata.description) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[39][1]++, {
        description: metadata.description
      }))
    });
    // Convert File to readable stream for Google Drive API
    const arrayBuffer =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[80]++, await file.arrayBuffer());
    const buffer =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[81]++, Buffer.from(arrayBuffer));
    const stream =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[82]++, _stream.Readable.from(buffer));
    const media =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[83]++, {
      mimeType:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[40][0]++, file.type) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[40][1]++, (0, _utils.getMimeTypeFromFileName)(file.name)),
      body: stream
    });
    // Use uploadType=multipart for proper file upload according to Drive API docs
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[84]++, await this.drive.files.create({
      requestBody: fileMetadata,
      media,
      uploadType: 'multipart',
      fields: 'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed'
    }));
    const result =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[85]++, await response);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[86]++;
    return (0, _utils.convertGoogleDriveFile)(result.data);
  }
  async downloadFile(fileId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[11]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[87]++, await this.drive.files.get({
      fileId,
      alt: 'media'
    }, {
      responseType: 'stream'
    }));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[88]++;
    return response.data;
  }
  /**
  * Get file metadata with specific fields
  */
  async getFileMetadata(fileId, fields) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[12]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[89]++, await this.drive.files.get({
      fileId,
      fields: fields.join(',')
    }));
    // // // // // console.log('[Google Drive Service] Raw API response:', response.data)
    // // // // // console.log('[Google Drive Service] Response ID:', response.data.id)
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[90]++;
    return {
      id:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[41][0]++, response.data.id) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[41][1]++, fileId),
      name: response.data.name,
      mimeType: response.data.mimeType,
      createdTime: response.data.createdTime,
      modifiedTime: response.data.modifiedTime,
      parents:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[42][0]++, response.data.parents) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[42][1]++, []),
      shared:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[43][0]++, response.data.shared) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[43][1]++, false),
      trashed:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[44][0]++, response.data.trashed) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[44][1]++, false),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[45][0]++, response.data.webViewLink) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[45][1]++, {
        webViewLink: response.data.webViewLink
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[46][0]++, response.data.webContentLink) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[46][1]++, {
        webContentLink: response.data.webContentLink
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[47][0]++, response.data.thumbnailLink) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[47][1]++, {
        thumbnailLink: response.data.thumbnailLink
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[48][0]++, response.data.iconLink) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[48][1]++, {
        iconLink: response.data.iconLink
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[49][0]++, response.data.description) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[49][1]++, {
        description: response.data.description
      })),
      starred:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[50][0]++, response.data.starred) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[50][1]++, false),
      explicitlyTrashed:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[51][0]++, response.data.explicitlyTrashed) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[51][1]++, false),
      exportLinks:
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[52][0]++, response.data.exportLinks) ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[52][1]++, {})
    };
  }
  // Unified permanent delete operation for both files and folders
  async deleteFile(fileId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[13]++;
    cov_17a1zyeo6z().s[91]++;
    await this.drive.files.delete({
      fileId
    });
  }
  async exportFile(fileId, mimeType) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[14]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[92]++, await this.drive.files.export({
      fileId,
      mimeType
    }, {
      responseType: 'arraybuffer'
    }));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[93]++;
    return response.data;
  }
  // Alias for clarity - same operation works for both files and folders
  async deleteFolder(folderId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[15]++;
    cov_17a1zyeo6z().s[94]++;
    return this.deleteFile(folderId);
  }
  // Unified move to trash operation for both files and folders
  async moveToTrash(fileId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[16]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[95]++, await this.drive.files.update({
      fileId,
      requestBody: {
        trashed: true
      },
      fields: 'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed'
    }));
    const result =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[96]++, await response);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[97]++;
    return (0, _utils.convertGoogleDriveFile)(result.data);
  }
  // Alias for clarity - same operation works for both files and folders
  async moveFolderToTrash(folderId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[17]++;
    cov_17a1zyeo6z().s[98]++;
    return this.moveToTrash(folderId);
  }
  // Unified restore from trash operation for both files and folders
  async untrashFile(fileId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[18]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[99]++, await this.drive.files.update({
      fileId,
      requestBody: {
        trashed: false
      },
      fields: 'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed'
    }));
    const result =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[100]++, await response);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[101]++;
    return (0, _utils.convertGoogleDriveFile)(result.data);
  }
  // Alias for clarity - same operation works for both files and folders
  async restoreFolderFromTrash(folderId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[19]++;
    cov_17a1zyeo6z().s[102]++;
    return this.untrashFile(folderId);
  }
  // Unified rename operation for both files and folders
  async renameFile(fileId, newName) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[20]++;
    cov_17a1zyeo6z().s[103]++;
    try {
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[104]++;
      // Validate filename using helper function
      (0, _filevalidation.validateFileName)(newName);
      const optimizedFields =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[105]++, (0, _fieldoptimization.getOptimizedFields)('LIST_DETAILED'));
      const response =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[106]++, await this.drive.files.update({
        fileId,
        requestBody: {
          name: newName.trim()
        },
        fields: optimizedFields
      }));
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[107]++;
      return (0, _utils.convertGoogleDriveFile)(response.data);
    } catch (error) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[108]++;
      // Handle errors using centralized error handler
      (0, _filevalidation.handleDriveApiError)(error);
    }
  }
  // Alias for clarity - same operation works for both files and folders
  async renameFolder(folderId, newName) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[21]++;
    cov_17a1zyeo6z().s[109]++;
    return this.renameFile(folderId, newName);
  }
  // Unified move operation for both files and folders with error recovery
  async moveFile(fileId, newParentId, currentParentId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[22]++;
    cov_17a1zyeo6z().s[110]++;
    try {
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[111]++;
      // According to Drive API docs, we should get current parents if not provided
      if (!currentParentId) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[53][0]++;
        const fileInfo =
        /* istanbul ignore next */
        (cov_17a1zyeo6z().s[112]++, await this.getFile(fileId));
        /* istanbul ignore next */
        cov_17a1zyeo6z().s[113]++;
        currentParentId = fileInfo.parents?.[0];
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[53][1]++;
      }
      const updateParams =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[114]++, {
        fileId,
        addParents: newParentId,
        ...(
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[54][0]++, currentParentId) &&
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[54][1]++, {
          removeParents: currentParentId
        })),
        fields: 'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed'
      });
      const response =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[115]++, await this.drive.files.update(updateParams));
      const result =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[116]++, await response);
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[117]++;
      return (0, _utils.convertGoogleDriveFile)(result.data);
    } catch (error) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[118]++;
      // Handle specific Google API errors according to documentation
      if (error.code === 403) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[55][0]++;
        cov_17a1zyeo6z().s[119]++;
        throw new Error('Insufficient permissions to move this file');
      } else {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[55][1]++;
        cov_17a1zyeo6z().s[120]++;
        if (error.code === 404) {
          /* istanbul ignore next */
          cov_17a1zyeo6z().b[56][0]++;
          cov_17a1zyeo6z().s[121]++;
          throw new Error('File or destination folder not found');
        } else {
          /* istanbul ignore next */
          cov_17a1zyeo6z().b[56][1]++;
          cov_17a1zyeo6z().s[122]++;
          if (error.code === 429) {
            /* istanbul ignore next */
            cov_17a1zyeo6z().b[57][0]++;
            cov_17a1zyeo6z().s[123]++;
            throw new Error('Rate limit exceeded. Please try again later');
          } else {
            /* istanbul ignore next */
            cov_17a1zyeo6z().b[57][1]++;
            cov_17a1zyeo6z().s[124]++;
            if (error.code === 400) {
              /* istanbul ignore next */
              cov_17a1zyeo6z().b[58][0]++;
              cov_17a1zyeo6z().s[125]++;
              throw new Error('Invalid move operation parameters');
            } else
            /* istanbul ignore next */
            {
              cov_17a1zyeo6z().b[58][1]++;
            }
          }
        }
      }
      // Re-throw with original error for unexpected cases
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[126]++;
      throw error;
    }
  }
  // Alias for clarity - same operation works for both files and folders
  async moveFolder(folderId, newParentId, currentParentId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[23]++;
    cov_17a1zyeo6z().s[127]++;
    return this.moveFile(folderId, newParentId, currentParentId);
  }
  // Copy operation - works for files, folders require special handling
  async copyFile(fileId, metadata) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[24]++;
    // First check if this is a folder
    const originalFile =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[128]++, await this.getFile(fileId));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[129]++;
    if (originalFile.mimeType === 'application/vnd.google-apps.folder') {
      /* istanbul ignore next */
      cov_17a1zyeo6z().b[59][0]++;
      cov_17a1zyeo6z().s[130]++;
      // For folders, we need to create a new folder and copy contents
      return this.copyFolder(fileId, metadata);
    } else
    /* istanbul ignore next */
    {
      cov_17a1zyeo6z().b[59][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[131]++, await this.drive.files.copy({
      fileId,
      requestBody: metadata,
      fields: 'id, name, mimeType, size, createdTime, modifiedTime, webViewLink, webContentLink, thumbnailLink, parents, owners(displayName,emailAddress,photoLink), shared, trashed'
    }));
    const result =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[132]++, await response);
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[133]++;
    return (0, _utils.convertGoogleDriveFile)(result.data);
  }
  // Special handling for folder copying
  async copyFolder(folderId, metadata) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[25]++;
    const originalFolder =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[134]++, await this.getFile(folderId));
    // Create new folder with the specified metadata
    const newFolder =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[135]++, await this.createFolder(
    /* istanbul ignore next */
    (cov_17a1zyeo6z().b[60][0]++, metadata.name) ||
    /* istanbul ignore next */
    (cov_17a1zyeo6z().b[60][1]++, `${originalFolder.name} - Copy`), metadata.parents?.[0]));
    // Note: For full folder copying with contents, we would need recursive copying
    // This creates an empty copy of the folder structure
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[136]++;
    return (0, _utils.convertGoogleDriveFile)({
      id: newFolder.id,
      name: newFolder.name,
      mimeType: 'application/vnd.google-apps.folder',
      createdTime: newFolder.createdTime,
      modifiedTime: newFolder.modifiedTime,
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[61][0]++, newFolder.parents) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[61][1]++, {
        parents: newFolder.parents
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[62][0]++, newFolder.shared) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[62][1]++, {
        shared: newFolder.shared
      })),
      ...(
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[63][0]++, newFolder.trashed) &&
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[63][1]++, {
        trashed: newFolder.trashed
      }))
    });
  }
  // Alias for clarity - same operation works for both files and folders
  async removeFolderPermission(folderId, permissionId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[26]++;
    cov_17a1zyeo6z().s[137]++;
    return this.removeFilePermission(folderId, permissionId);
  }
  // Unified share operation for both files and folders
  async shareFile(fileId, permission) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[27]++;
    cov_17a1zyeo6z().s[138]++;
    try {
      const permissionRequest =
      /* istanbul ignore next */
      (cov_17a1zyeo6z().s[139]++, {
        role: permission.role,
        type: permission.type
      });
      // Add optional fields only if provided, according to API docs
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[140]++;
      if (permission.emailAddress) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[64][0]++;
        cov_17a1zyeo6z().s[141]++;
        permissionRequest.emailAddress = permission.emailAddress;
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[64][1]++;
      }
      cov_17a1zyeo6z().s[142]++;
      if (permission.domain) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[65][0]++;
        cov_17a1zyeo6z().s[143]++;
        permissionRequest.domain = permission.domain;
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[65][1]++;
      }
      // Set allowFileDiscovery for domain/anyone permissions as per API docs
      cov_17a1zyeo6z().s[144]++;
      if (
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[67][0]++, permission.type === 'domain') ||
      /* istanbul ignore next */
      (cov_17a1zyeo6z().b[67][1]++, permission.type === 'anyone')) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[66][0]++;
        cov_17a1zyeo6z().s[145]++;
        permissionRequest.allowFileDiscovery =
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[68][0]++, permission.allowFileDiscovery) ??
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[68][1]++, false);
      } else
      /* istanbul ignore next */
      {
        cov_17a1zyeo6z().b[66][1]++;
      }
      cov_17a1zyeo6z().s[146]++;
      await this.drive.permissions.create({
        fileId,
        requestBody: permissionRequest,
        sendNotificationEmail:
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[69][0]++, permission.sendNotificationEmail) ??
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[69][1]++, false),
        // Add emailMessage if sending notifications
        ...(
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[70][0]++, permission.sendNotificationEmail) &&
        /* istanbul ignore next */
        (cov_17a1zyeo6z().b[70][1]++, {
          emailMessage: 'File shared with you via Drive Manager'
        }))
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[147]++;
      // Handle specific API errors according to documentation
      if (error.code === 403) {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[71][0]++;
        cov_17a1zyeo6z().s[148]++;
        throw new Error('Insufficient permissions to share this file');
      } else {
        /* istanbul ignore next */
        cov_17a1zyeo6z().b[71][1]++;
        cov_17a1zyeo6z().s[149]++;
        if (error.code === 404) {
          /* istanbul ignore next */
          cov_17a1zyeo6z().b[72][0]++;
          cov_17a1zyeo6z().s[150]++;
          throw new Error('File not found');
        } else {
          /* istanbul ignore next */
          cov_17a1zyeo6z().b[72][1]++;
          cov_17a1zyeo6z().s[151]++;
          if (error.code === 400) {
            /* istanbul ignore next */
            cov_17a1zyeo6z().b[73][0]++;
            cov_17a1zyeo6z().s[152]++;
            throw new Error('Invalid sharing parameters');
          } else
          /* istanbul ignore next */
          {
            cov_17a1zyeo6z().b[73][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_17a1zyeo6z().s[153]++;
      throw error;
    }
  }
  // Alias for clarity - same operation works for both files and folders
  async shareFolder(folderId, permission) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[28]++;
    cov_17a1zyeo6z().s[154]++;
    return this.shareFile(folderId, permission);
  }
  // Get file permissions
  async getFilePermissions(fileId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[29]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[155]++, await this.drive.permissions.list({
      fileId,
      fields: 'permissions(id, type, role, emailAddress, domain, displayName)'
    }));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[156]++;
    return /* istanbul ignore next */(cov_17a1zyeo6z().b[74][0]++, response.data.permissions) ||
    /* istanbul ignore next */
    (cov_17a1zyeo6z().b[74][1]++, []);
  }
  // Remove file permission
  async removeFilePermission(fileId, permissionId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[30]++;
    cov_17a1zyeo6z().s[157]++;
    await this.drive.permissions.delete({
      fileId,
      permissionId
    });
  }
  // Create permission (for enhanced sharing)
  async createPermission(fileId, permissionData) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[31]++;
    const response =
    /* istanbul ignore next */
    (cov_17a1zyeo6z().s[158]++, await this.drive.permissions.create({
      fileId,
      requestBody: permissionData,
      sendNotificationEmail: false
    }));
    /* istanbul ignore next */
    cov_17a1zyeo6z().s[159]++;
    return response.data;
  }
  // Delete permission (for enhanced sharing)
  async deletePermission(fileId, permissionId) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[32]++;
    cov_17a1zyeo6z().s[160]++;
    await this.drive.permissions.delete({
      fileId,
      permissionId
    });
  }
  // Send notification email (for enhanced sharing)
  async sendNotificationEmail(fileId, emailData) {
    /* istanbul ignore next */
    cov_17a1zyeo6z().f[33]++;
    cov_17a1zyeo6z().s[161]++;
    // Note: This would typically use the Gmail API or similar service
    // For now, we'll just log the action
    console.log('Notification email would be sent for file:', fileId, 'with data:', emailData);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHb29nbGVEcml2ZVNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImFjY2Vzc1Rva2VuIiwiY292XzE3YTF6eWVvNnoiLCJmIiwicyIsImRyaXZlIiwiX2NvbmZpZyIsImNyZWF0ZURyaXZlQ2xpZW50IiwiZ2V0VXNlckluZm8iLCJhYm91dFJlc3BvbnNlIiwiYWJvdXQiLCJnZXQiLCJmaWVsZHMiLCJkYXRhIiwidXNlciIsImIiLCJFcnJvciIsImlkIiwicGVybWlzc2lvbklkIiwibmFtZSIsImRpc3BsYXlOYW1lIiwiZW1haWwiLCJlbWFpbEFkZHJlc3MiLCJwaG90b0xpbmsiLCJwaWN0dXJlIiwic3RvcmFnZVF1b3RhIiwibGltaXQiLCJ1c2FnZSIsInVzYWdlSW5Ecml2ZSIsInVzYWdlSW5Ecml2ZVRyYXNoIiwibGlzdEZpbGVzIiwib3B0aW9ucyIsInF1ZXJ5IiwicGFyZW50SWQiLCJtaW1lVHlwZSIsInBhZ2VTaXplIiwicGFnZVRva2VuIiwib3JkZXJCeSIsImluY2x1ZGVUZWFtRHJpdmVJdGVtcyIsInZhbGlkYXRpb25QYXJhbXMiLCJ2YWxpZFBhZ2VTaXplIiwidmFsaWRQYWdlVG9rZW4iLCJzZWFyY2hRdWVyeSIsIm9wZXJhdGlvblR5cGUiLCJfdmFsaWRhdGlvbnV0aWxzIiwidmFsaWRhdGVMaXN0RmlsZXNPcHRpb25zIiwib3BlcmF0aW9uIiwiYmFzZVBhcmFtcyIsInEiLCJpbmNsdWRlSXRlbXNGcm9tQWxsRHJpdmVzIiwic3VwcG9ydHNBbGxEcml2ZXMiLCJvcHRpbWl6ZWRGaWVsZHMiLCJfZmllbGRvcHRpbWl6YXRpb24iLCJnZXRPcHRpbWl6ZWRGaWVsZHMiLCJyZXF1ZXN0UGFyYW1zIiwiX3BlcmZvcm1hbmNlIiwiZ2V0T3B0aW1pemVkUmVxdWVzdFBhcmFtcyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJpbmZvIiwiZGVkdXBLZXkiLCJyZXF1ZXN0RGVkdXBsaWNhdG9yIiwiZ2VuZXJhdGVLZXkiLCJyZXNwb25zZSIsInBlcmZvcm1hbmNlTW9uaXRvciIsInRyYWNrUmVxdWVzdCIsImRlZHVwbGljYXRlIiwiZmlsZXMiLCJsaXN0IiwibWFwIiwiX3V0aWxzIiwiY29udmVydEdvb2dsZURyaXZlRmlsZSIsImxlbmd0aCIsIm5leHRQYWdlVG9rZW4iLCJpbmNvbXBsZXRlU2VhcmNoIiwiZXJyb3IiLCJjb2RlIiwic3RhdHVzIiwiYXV0aEVycm9yIiwibmVlZHNSZWF1dGgiLCJwZXJtaXNzaW9uRXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJyZXRyeVBhcmFtcyIsInJldHJ5UmVzcG9uc2UiLCJyZXRyeUZpbGVzIiwiZ2V0RmlsZSIsImZpbGVJZCIsInJlc3VsdCIsImdldEZpbGVEZXRhaWxzIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsInJlc3BvbnNlVGltZSIsImZpZWxkT3B0aW1pemF0aW9uTW9uaXRvciIsInNwbGl0IiwiZmlsZSIsInJlc3BvbnNlRGF0YSIsImxhc3RNb2RpZnlpbmdVc2VyIiwiX2ZpbGVkZXRhaWxtYXBwZXJzIiwibWFwVXNlckluZm8iLCJzaGFyaW5nVXNlciIsIm1hcEJhc2ljUHJvcGVydGllcyIsIm1hcENoZWNrc3VtcyIsIm1hcEJvb2xlYW5Qcm9wZXJ0aWVzIiwibWFwQ29sbGVjdGlvblByb3BlcnRpZXMiLCJpbWFnZU1lZGlhTWV0YWRhdGEiLCJtYXBJbWFnZU1ldGFkYXRhIiwidmlkZW9NZWRpYU1ldGFkYXRhIiwibWFwVmlkZW9NZXRhZGF0YSIsInNob3J0Y3V0RGV0YWlscyIsIm1hcFNob3J0Y3V0RGV0YWlscyIsImNvbnRlbnRSZXN0cmljdGlvbnMiLCJtYXBDb250ZW50UmVzdHJpY3Rpb25zIiwibGlua1NoYXJlTWV0YWRhdGEiLCJtYXBMaW5rU2hhcmVNZXRhZGF0YSIsImxhYmVsSW5mbyIsIm1hcExhYmVsSW5mbyIsImdldEZvbGRlcnMiLCJidWlsZFNlYXJjaFF1ZXJ5IiwidHJhc2hlZCIsImNvbnZlcnRHb29nbGVEcml2ZUZvbGRlciIsImNyZWF0ZUZvbGRlciIsIm1ldGFkYXRhIiwiY3JlYXRlZFRpbWUiLCJ0b0lTT1N0cmluZyIsIm1vZGlmaWVkVGltZSIsInBhcmVudHMiLCJjcmVhdGUiLCJyZXF1ZXN0Qm9keSIsInVwbG9hZEZpbGUiLCJmaWxlTWV0YWRhdGEiLCJkZXNjcmlwdGlvbiIsImFycmF5QnVmZmVyIiwiYnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsInN0cmVhbSIsIl9zdHJlYW0iLCJSZWFkYWJsZSIsIm1lZGlhIiwidHlwZSIsImdldE1pbWVUeXBlRnJvbUZpbGVOYW1lIiwiYm9keSIsInVwbG9hZFR5cGUiLCJkb3dubG9hZEZpbGUiLCJhbHQiLCJyZXNwb25zZVR5cGUiLCJnZXRGaWxlTWV0YWRhdGEiLCJqb2luIiwic2hhcmVkIiwid2ViVmlld0xpbmsiLCJ3ZWJDb250ZW50TGluayIsInRodW1ibmFpbExpbmsiLCJpY29uTGluayIsInN0YXJyZWQiLCJleHBsaWNpdGx5VHJhc2hlZCIsImV4cG9ydExpbmtzIiwiZGVsZXRlRmlsZSIsImRlbGV0ZSIsImV4cG9ydEZpbGUiLCJleHBvcnQiLCJkZWxldGVGb2xkZXIiLCJmb2xkZXJJZCIsIm1vdmVUb1RyYXNoIiwidXBkYXRlIiwibW92ZUZvbGRlclRvVHJhc2giLCJ1bnRyYXNoRmlsZSIsInJlc3RvcmVGb2xkZXJGcm9tVHJhc2giLCJyZW5hbWVGaWxlIiwibmV3TmFtZSIsIl9maWxldmFsaWRhdGlvbiIsInZhbGlkYXRlRmlsZU5hbWUiLCJ0cmltIiwiaGFuZGxlRHJpdmVBcGlFcnJvciIsInJlbmFtZUZvbGRlciIsIm1vdmVGaWxlIiwibmV3UGFyZW50SWQiLCJjdXJyZW50UGFyZW50SWQiLCJmaWxlSW5mbyIsInVwZGF0ZVBhcmFtcyIsImFkZFBhcmVudHMiLCJyZW1vdmVQYXJlbnRzIiwibW92ZUZvbGRlciIsImNvcHlGaWxlIiwib3JpZ2luYWxGaWxlIiwiY29weUZvbGRlciIsImNvcHkiLCJvcmlnaW5hbEZvbGRlciIsIm5ld0ZvbGRlciIsInJlbW92ZUZvbGRlclBlcm1pc3Npb24iLCJyZW1vdmVGaWxlUGVybWlzc2lvbiIsInNoYXJlRmlsZSIsInBlcm1pc3Npb24iLCJwZXJtaXNzaW9uUmVxdWVzdCIsInJvbGUiLCJkb21haW4iLCJhbGxvd0ZpbGVEaXNjb3ZlcnkiLCJwZXJtaXNzaW9ucyIsInNlbmROb3RpZmljYXRpb25FbWFpbCIsImVtYWlsTWVzc2FnZSIsInNoYXJlRm9sZGVyIiwiZ2V0RmlsZVBlcm1pc3Npb25zIiwiY3JlYXRlUGVybWlzc2lvbiIsInBlcm1pc3Npb25EYXRhIiwiZGVsZXRlUGVybWlzc2lvbiIsImVtYWlsRGF0YSIsImxvZyJdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2xpYi9nb29nbGUtZHJpdmUvc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSdcblxuaW1wb3J0IHsgZHJpdmVfdjMgfSBmcm9tICdnb29nbGVhcGlzJ1xuXG5pbXBvcnQgeyBjcmVhdGVEcml2ZUNsaWVudCB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHtcbiAgRHJpdmVGaWxlLFxuICBEcml2ZUZvbGRlcixcbiAgRHJpdmVTZWFyY2hPcHRpb25zLFxuICBEcml2ZVNlYXJjaFJlc3VsdCxcbiAgRHJpdmVVcGxvYWRPcHRpb25zLFxuICBEcml2ZVBlcm1pc3Npb24sXG4gIERyaXZlVXNlckluZm8sXG4gIERyaXZlRmlsZU1ldGFkYXRhLFxufSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgRGV0YWlsZWREcml2ZUZpbGUgfSBmcm9tICcuL2RldGFpbGVkLWZpbGUtdHlwZXMnXG5pbXBvcnQge1xuICBtYXBVc2VySW5mbyxcbiAgbWFwSW1hZ2VNZXRhZGF0YSxcbiAgbWFwVmlkZW9NZXRhZGF0YSxcbiAgbWFwU2hvcnRjdXREZXRhaWxzLFxuICBtYXBDb250ZW50UmVzdHJpY3Rpb25zLFxuICBtYXBMaW5rU2hhcmVNZXRhZGF0YSxcbiAgbWFwTGFiZWxJbmZvLFxuICBtYXBCYXNpY1Byb3BlcnRpZXMsXG4gIG1hcENoZWNrc3VtcyxcbiAgbWFwQm9vbGVhblByb3BlcnRpZXMsXG4gIG1hcENvbGxlY3Rpb25Qcm9wZXJ0aWVzLFxufSBmcm9tICcuL2ZpbGUtZGV0YWlsLW1hcHBlcnMnXG5pbXBvcnQgeyB2YWxpZGF0ZUxpc3RGaWxlc09wdGlvbnMgfSBmcm9tICcuL3ZhbGlkYXRpb24tdXRpbHMnXG5pbXBvcnQgeyB2YWxpZGF0ZUZpbGVOYW1lLCBoYW5kbGVEcml2ZUFwaUVycm9yIH0gZnJvbSAnLi9maWxlLXZhbGlkYXRpb24nXG5pbXBvcnQgeyBnZXRPcHRpbWl6ZWRGaWVsZHMsIGZpZWxkT3B0aW1pemF0aW9uTW9uaXRvciB9IGZyb20gJy4vZmllbGQtb3B0aW1pemF0aW9uJ1xuaW1wb3J0IHsgY29udmVydEdvb2dsZURyaXZlRmlsZSwgY29udmVydEdvb2dsZURyaXZlRm9sZGVyLCBidWlsZFNlYXJjaFF1ZXJ5LCBnZXRNaW1lVHlwZUZyb21GaWxlTmFtZSB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBnZXRPcHRpbWl6ZWRSZXF1ZXN0UGFyYW1zLCBwZXJmb3JtYW5jZU1vbml0b3IsIHJlcXVlc3REZWR1cGxpY2F0b3IgfSBmcm9tICcuL3BlcmZvcm1hbmNlJ1xuXG5leHBvcnQgY2xhc3MgR29vZ2xlRHJpdmVTZXJ2aWNlIHtcbiAgcHVibGljIGRyaXZlOiBkcml2ZV92My5Ecml2ZVxuXG4gIGNvbnN0cnVjdG9yKGFjY2Vzc1Rva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLmRyaXZlID0gY3JlYXRlRHJpdmVDbGllbnQoYWNjZXNzVG9rZW4pXG4gIH1cblxuICBhc3luYyBnZXRVc2VySW5mbygpOiBQcm9taXNlPERyaXZlVXNlckluZm8+IHtcbiAgICAvLyBVc2UgRHJpdmUgQVBJIGFib3V0IGVuZHBvaW50IGZvciB1c2VyIGluZm8gaW5zdGVhZCBvZiBPQXV0aDIgdXNlcmluZm8gQVBJXG4gICAgLy8gVGhpcyBpcyB0aGUgcmVjb21tZW5kZWQgYXBwcm9hY2ggYWNjb3JkaW5nIHRvIEdvb2dsZSBEcml2ZSBBUEkgZG9jdW1lbnRhdGlvblxuICAgIGNvbnN0IGFib3V0UmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmFib3V0LmdldCh7XG4gICAgICBmaWVsZHM6ICd1c2VyLHN0b3JhZ2VRdW90YScsXG4gICAgfSlcblxuICAgIGNvbnN0IGFib3V0ID0gYWJvdXRSZXNwb25zZS5kYXRhXG4gICAgY29uc3QgdXNlciA9IGFib3V0LnVzZXJcblxuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmV0Y2ggdXNlciBpbmZvcm1hdGlvbiBmcm9tIERyaXZlIEFQSScpXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB1c2VyLnBlcm1pc3Npb25JZCA/PyAndW5rbm93bicsXG4gICAgICBuYW1lOiB1c2VyLmRpc3BsYXlOYW1lID8/ICdVbmtub3duIFVzZXInLFxuICAgICAgZW1haWw6IHVzZXIuZW1haWxBZGRyZXNzID8/ICcnLFxuICAgICAgLi4uKHVzZXIucGhvdG9MaW5rICYmIHsgcGljdHVyZTogdXNlci5waG90b0xpbmsgfSksXG4gICAgICAuLi4oYWJvdXQuc3RvcmFnZVF1b3RhICYmIHtcbiAgICAgICAgc3RvcmFnZVF1b3RhOiB7XG4gICAgICAgICAgbGltaXQ6IGFib3V0LnN0b3JhZ2VRdW90YS5saW1pdCEsXG4gICAgICAgICAgdXNhZ2U6IGFib3V0LnN0b3JhZ2VRdW90YS51c2FnZSEsXG4gICAgICAgICAgdXNhZ2VJbkRyaXZlOiBhYm91dC5zdG9yYWdlUXVvdGEudXNhZ2VJbkRyaXZlISxcbiAgICAgICAgICB1c2FnZUluRHJpdmVUcmFzaDogYWJvdXQuc3RvcmFnZVF1b3RhLnVzYWdlSW5Ecml2ZVRyYXNoISxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxpc3RGaWxlcyhvcHRpb25zOiBEcml2ZVNlYXJjaE9wdGlvbnMgPSB7fSk6IFByb21pc2U8RHJpdmVTZWFyY2hSZXN1bHQ+IHtcbiAgICBjb25zdCB7XG4gICAgICBxdWVyeSxcbiAgICAgIHBhcmVudElkLFxuICAgICAgbWltZVR5cGUsXG4gICAgICBwYWdlU2l6ZSA9IDUwLFxuICAgICAgcGFnZVRva2VuLFxuICAgICAgb3JkZXJCeSA9ICdtb2RpZmllZFRpbWUgZGVzYycsXG4gICAgICBpbmNsdWRlVGVhbURyaXZlSXRlbXMgPSB0cnVlLFxuICAgIH0gPSBvcHRpb25zXG5cbiAgICAvLyBWYWxpZGF0ZSBhbmQgcHJvY2VzcyBhbGwgb3B0aW9ucyB1c2luZyBoZWxwZXIgZnVuY3Rpb25zXG4gICAgY29uc3QgdmFsaWRhdGlvblBhcmFtczogYW55ID0ge1xuICAgICAgcGFnZVNpemUsXG4gICAgICBxdWVyeSxcbiAgICAgIHBhcmVudElkLFxuICAgICAgbWltZVR5cGUsXG4gICAgfVxuICAgIFxuICAgIGlmIChwYWdlVG9rZW4pIHtcbiAgICAgIHZhbGlkYXRpb25QYXJhbXMucGFnZVRva2VuID0gcGFnZVRva2VuXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgdmFsaWRQYWdlU2l6ZSwgdmFsaWRQYWdlVG9rZW4sIHNlYXJjaFF1ZXJ5LCBvcGVyYXRpb25UeXBlIH0gPSB2YWxpZGF0ZUxpc3RGaWxlc09wdGlvbnModmFsaWRhdGlvblBhcmFtcylcblxuICAgIC8vIFVzZSBvcGVyYXRpb24gdHlwZSBmcm9tIHZhbGlkYXRpb25cbiAgICBjb25zdCBvcGVyYXRpb24gPSBvcGVyYXRpb25UeXBlXG4gICAgY29uc3QgYmFzZVBhcmFtcyA9IHtcbiAgICAgIHE6IHNlYXJjaFF1ZXJ5LFxuICAgICAgcGFnZVNpemU6IHZhbGlkUGFnZVNpemUsXG4gICAgICBvcmRlckJ5LFxuICAgICAgaW5jbHVkZUl0ZW1zRnJvbUFsbERyaXZlczogaW5jbHVkZVRlYW1Ecml2ZUl0ZW1zLFxuICAgICAgc3VwcG9ydHNBbGxEcml2ZXM6IGluY2x1ZGVUZWFtRHJpdmVJdGVtcyxcbiAgICB9XG5cbiAgICAvLyBVc2Ugb3B0aW1pemVkIGZpZWxkcyBiYXNlZCBvbiBvcGVyYXRpb24gdHlwZVxuICAgIGNvbnN0IG9wdGltaXplZEZpZWxkcyA9IGdldE9wdGltaXplZEZpZWxkcygnTElTVF9TVEFOREFSRCcpXG4gICAgY29uc3QgcmVxdWVzdFBhcmFtcyA9IHtcbiAgICAgIC4uLmdldE9wdGltaXplZFJlcXVlc3RQYXJhbXMob3BlcmF0aW9uLCBiYXNlUGFyYW1zKSxcbiAgICAgIGZpZWxkczogYG5leHRQYWdlVG9rZW4saW5jb21wbGV0ZVNlYXJjaCxmaWxlcygke29wdGltaXplZEZpZWxkc30pYCxcbiAgICB9XG4gICAgLy8gTG9nIHF1ZXJ5IGZvciBkZWJ1Z2dpbmcgaW4gZGV2ZWxvcG1lbnQgb25seVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgY29uc29sZS5pbmZvKCdbRHJpdmUgQVBJXSAtIFF1ZXJ5OicsIHNlYXJjaFF1ZXJ5KVxuICAgIH1cblxuICAgIC8vIE9ubHkgYWRkIHBhZ2VUb2tlbiBpZiBpdCdzIHZhbGlkXG4gICAgaWYgKHZhbGlkUGFnZVRva2VuKSB7XG4gICAgICByZXF1ZXN0UGFyYW1zLnBhZ2VUb2tlbiA9IHZhbGlkUGFnZVRva2VuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdlbmVyYXRlIGRlZHVwbGljYXRpb24ga2V5IGZvciBpZGVudGljYWwgcmVxdWVzdHNcbiAgICAgIGNvbnN0IGRlZHVwS2V5ID0gcmVxdWVzdERlZHVwbGljYXRvci5nZW5lcmF0ZUtleSgnbGlzdEZpbGVzJywgcmVxdWVzdFBhcmFtcylcblxuICAgICAgLy8gVXNlIHBlcmZvcm1hbmNlIG1vbml0b3JpbmcgYW5kIHJlcXVlc3QgZGVkdXBsaWNhdGlvblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwZXJmb3JtYW5jZU1vbml0b3IudHJhY2tSZXF1ZXN0KCdsaXN0RmlsZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJldHVybiBhd2FpdCByZXF1ZXN0RGVkdXBsaWNhdG9yLmRlZHVwbGljYXRlKGRlZHVwS2V5LCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMubGlzdChyZXF1ZXN0UGFyYW1zKVxuICAgICAgICB9KVxuICAgICAgfSlcblxuICAgICAgY29uc3QgZmlsZXMgPSByZXNwb25zZS5kYXRhLmZpbGVzPy5tYXAoY29udmVydEdvb2dsZURyaXZlRmlsZSkgPz8gW11cblxuICAgICAgY29uc29sZS5pbmZvKGBbRHJpdmUgQVBJXSAtIFJlc3VsdDogJHtmaWxlcy5sZW5ndGh9IGl0ZW1zYClcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZXMsXG4gICAgICAgIC4uLihyZXNwb25zZS5kYXRhLm5leHRQYWdlVG9rZW4gJiYgeyBuZXh0UGFnZVRva2VuOiByZXNwb25zZS5kYXRhLm5leHRQYWdlVG9rZW4gfSksXG4gICAgICAgIGluY29tcGxldGVTZWFyY2g6IHJlc3BvbnNlLmRhdGEuaW5jb21wbGV0ZVNlYXJjaCB8fCBmYWxzZSxcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAvLyBIYW5kbGUgYXV0aGVudGljYXRpb24gZXJyb3JzXG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gNDAxIHx8IGVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIGNvbnN0IGF1dGhFcnJvciA9IG5ldyBFcnJvcignQXV0aGVudGljYXRpb24gcmVxdWlyZWQnKVxuICAgICAgICBhdXRoRXJyb3IubmFtZSA9ICdBdXRoZW50aWNhdGlvbkVycm9yJ1xuICAgICAgICA7KGF1dGhFcnJvciBhcyBhbnkpLmNvZGUgPSA0MDFcbiAgICAgICAgOyhhdXRoRXJyb3IgYXMgYW55KS5uZWVkc1JlYXV0aCA9IHRydWVcbiAgICAgICAgdGhyb3cgYXV0aEVycm9yXG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnNcbiAgICAgIGlmIChlcnJvci5jb2RlID09PSA0MDMgfHwgZXJyb3Iuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgY29uc3QgcGVybWlzc2lvbkVycm9yID0gbmV3IEVycm9yKCdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMnKVxuICAgICAgICBwZXJtaXNzaW9uRXJyb3IubmFtZSA9ICdQZXJtaXNzaW9uRXJyb3InXG4gICAgICAgIDsocGVybWlzc2lvbkVycm9yIGFzIGFueSkuY29kZSA9IDQwM1xuICAgICAgICA7KHBlcm1pc3Npb25FcnJvciBhcyBhbnkpLm5lZWRzUmVhdXRoID0gdHJ1ZVxuICAgICAgICB0aHJvdyBwZXJtaXNzaW9uRXJyb3JcbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIHNwZWNpZmljIEdvb2dsZSBEcml2ZSBBUEkgZXJyb3JzXG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gNDAwICYmIGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdJbnZhbGlkIFZhbHVlJykpIHtcbiAgICAgICAgLy8gSWYgcGFnZVRva2VuIHdhcyB0aGUgaXNzdWUsIHJldHJ5IHdpdGhvdXQgaXRcbiAgICAgICAgaWYgKHZhbGlkUGFnZVRva2VuKSB7XG4gICAgICAgICAgY29uc3QgcmV0cnlQYXJhbXMgPSB7IC4uLnJlcXVlc3RQYXJhbXMgfVxuICAgICAgICAgIGRlbGV0ZSByZXRyeVBhcmFtcy5wYWdlVG9rZW5cblxuICAgICAgICAgIGNvbnN0IHJldHJ5UmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLmxpc3QocmV0cnlQYXJhbXMpXG4gICAgICAgICAgY29uc3QgcmV0cnlGaWxlcyA9IHJldHJ5UmVzcG9uc2UuZGF0YS5maWxlcz8ubWFwKGNvbnZlcnRHb29nbGVEcml2ZUZpbGUpIHx8IFtdXG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZXM6IHJldHJ5RmlsZXMsXG4gICAgICAgICAgICAuLi4ocmV0cnlSZXNwb25zZS5kYXRhLm5leHRQYWdlVG9rZW4gJiYge1xuICAgICAgICAgICAgICBuZXh0UGFnZVRva2VuOiByZXRyeVJlc3BvbnNlLmRhdGEubmV4dFBhZ2VUb2tlbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5jb21wbGV0ZVNlYXJjaDogcmV0cnlSZXNwb25zZS5kYXRhLmluY29tcGxldGVTZWFyY2ggfHwgZmFsc2UsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlLXRocm93IG90aGVyIGVycm9yc1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRGaWxlKGZpbGVJZDogc3RyaW5nKTogUHJvbWlzZTxEcml2ZUZpbGU+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMuZ2V0KHtcbiAgICAgIGZpbGVJZCxcbiAgICAgIGZpZWxkczpcbiAgICAgICAgJ2lkLCBuYW1lLCBtaW1lVHlwZSwgc2l6ZSwgY3JlYXRlZFRpbWUsIG1vZGlmaWVkVGltZSwgd2ViVmlld0xpbmssIHdlYkNvbnRlbnRMaW5rLCB0aHVtYm5haWxMaW5rLCBwYXJlbnRzLCBzaGFyZWQsIHRyYXNoZWQsIHN0YXJyZWQsIGNhcGFiaWxpdGllcywgb3duZXJzKGRpc3BsYXlOYW1lLGVtYWlsQWRkcmVzcyxwaG90b0xpbmspJyxcbiAgICB9KVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2VcbiAgICByZXR1cm4gY29udmVydEdvb2dsZURyaXZlRmlsZShyZXN1bHQuZGF0YSlcbiAgfVxuXG4gIGFzeW5jIGdldEZpbGVEZXRhaWxzKGZpbGVJZDogc3RyaW5nLCBmaWVsZHM/OiBzdHJpbmcpOiBQcm9taXNlPERldGFpbGVkRHJpdmVGaWxlPiB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgIGNvbnN0IG9wdGltaXplZEZpZWxkcyA9IGZpZWxkcyB8fCBnZXRPcHRpbWl6ZWRGaWVsZHMoJ0ZJTEVfREVUQUlMUycpXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMuZ2V0KHtcbiAgICAgIGZpbGVJZCxcbiAgICAgIGZpZWxkczogb3B0aW1pemVkRmllbGRzLCAvLyBVc2Ugb3B0aW1pemVkIGZpZWxkcyBpbnN0ZWFkIG9mICcqJ1xuICAgIH0pXG5cbiAgICAvLyBUcmFjayBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudFxuICAgIGNvbnN0IHJlc3BvbnNlVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICBmaWVsZE9wdGltaXphdGlvbk1vbml0b3IudHJhY2tSZXF1ZXN0KCdnZXRGaWxlRGV0YWlscycsIHJlc3BvbnNlVGltZSwgb3B0aW1pemVkRmllbGRzLnNwbGl0KCcsJykubGVuZ3RoKVxuXG4gICAgY29uc3QgZmlsZSA9IGNvbnZlcnRHb29nbGVEcml2ZUZpbGUocmVzcG9uc2UuZGF0YSlcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXNwb25zZS5kYXRhXG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmlsZSxcbiAgICAgIC8vIFVzZXIgaW5mb3JtYXRpb25cbiAgICAgIGxhc3RNb2RpZnlpbmdVc2VyOiBtYXBVc2VySW5mbyhyZXNwb25zZURhdGEubGFzdE1vZGlmeWluZ1VzZXIpLFxuICAgICAgc2hhcmluZ1VzZXI6IG1hcFVzZXJJbmZvKHJlc3BvbnNlRGF0YS5zaGFyaW5nVXNlciksXG5cbiAgICAgIC8vIEJhc2ljIGZpbGUgcHJvcGVydGllc1xuICAgICAgLi4ubWFwQmFzaWNQcm9wZXJ0aWVzKHJlc3BvbnNlRGF0YSksXG5cbiAgICAgIC8vIENoZWNrc3VtcyBhbmQgc3RvcmFnZSBpbmZvXG4gICAgICAuLi5tYXBDaGVja3N1bXMocmVzcG9uc2VEYXRhKSxcblxuICAgICAgLy8gQm9vbGVhbiBwcm9wZXJ0aWVzIHdpdGggZGVmYXVsdHNcbiAgICAgIC4uLm1hcEJvb2xlYW5Qcm9wZXJ0aWVzKHJlc3BvbnNlRGF0YSksXG5cbiAgICAgIC8vIEFycmF5IGFuZCBvYmplY3QgcHJvcGVydGllc1xuICAgICAgLi4ubWFwQ29sbGVjdGlvblByb3BlcnRpZXMocmVzcG9uc2VEYXRhKSxcblxuICAgICAgLy8gTWVkaWEgbWV0YWRhdGFcbiAgICAgIC4uLihyZXNwb25zZURhdGEuaW1hZ2VNZWRpYU1ldGFkYXRhICYmIHtcbiAgICAgICAgaW1hZ2VNZWRpYU1ldGFkYXRhOiBtYXBJbWFnZU1ldGFkYXRhKHJlc3BvbnNlRGF0YS5pbWFnZU1lZGlhTWV0YWRhdGEpLFxuICAgICAgfSksXG4gICAgICAuLi4ocmVzcG9uc2VEYXRhLnZpZGVvTWVkaWFNZXRhZGF0YSAmJiB7XG4gICAgICAgIHZpZGVvTWVkaWFNZXRhZGF0YTogbWFwVmlkZW9NZXRhZGF0YShyZXNwb25zZURhdGEudmlkZW9NZWRpYU1ldGFkYXRhKSxcbiAgICAgIH0pLFxuXG4gICAgICAvLyBTaG9ydGN1dCBkZXRhaWxzXG4gICAgICAuLi4ocmVzcG9uc2VEYXRhLnNob3J0Y3V0RGV0YWlscyAmJiB7XG4gICAgICAgIHNob3J0Y3V0RGV0YWlsczogbWFwU2hvcnRjdXREZXRhaWxzKHJlc3BvbnNlRGF0YS5zaG9ydGN1dERldGFpbHMpLFxuICAgICAgfSksXG5cbiAgICAgIC8vIENvbnRlbnQgcmVzdHJpY3Rpb25zXG4gICAgICBjb250ZW50UmVzdHJpY3Rpb25zOiBtYXBDb250ZW50UmVzdHJpY3Rpb25zKHJlc3BvbnNlRGF0YS5jb250ZW50UmVzdHJpY3Rpb25zIHx8IFtdKSxcblxuICAgICAgLy8gTGluayBzaGFyaW5nIG1ldGFkYXRhXG4gICAgICAuLi4ocmVzcG9uc2VEYXRhLmxpbmtTaGFyZU1ldGFkYXRhICYmIHtcbiAgICAgICAgbGlua1NoYXJlTWV0YWRhdGE6IG1hcExpbmtTaGFyZU1ldGFkYXRhKHJlc3BvbnNlRGF0YS5saW5rU2hhcmVNZXRhZGF0YSksXG4gICAgICB9KSxcblxuICAgICAgLy8gTGFiZWwgaW5mb3JtYXRpb25cbiAgICAgIC4uLihyZXNwb25zZURhdGEubGFiZWxJbmZvICYmIHtcbiAgICAgICAgbGFiZWxJbmZvOiBtYXBMYWJlbEluZm8ocmVzcG9uc2VEYXRhLmxhYmVsSW5mbyksXG4gICAgICB9KSxcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRGb2xkZXJzKHBhcmVudElkPzogc3RyaW5nKTogUHJvbWlzZTxEcml2ZUZvbGRlcltdPiB7XG4gICAgY29uc3QgcXVlcnkgPSBidWlsZFNlYXJjaFF1ZXJ5KHtcbiAgICAgIC4uLihwYXJlbnRJZCAmJiB7IHBhcmVudElkIH0pLFxuICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZm9sZGVyJyxcbiAgICAgIHRyYXNoZWQ6IGZhbHNlLFxuICAgIH0pXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMubGlzdCh7XG4gICAgICBxOiBxdWVyeSxcbiAgICAgIG9yZGVyQnk6ICduYW1lJyxcbiAgICAgIGZpZWxkczogJ2ZpbGVzKGlkLCBuYW1lLCBjcmVhdGVkVGltZSwgbW9kaWZpZWRUaW1lLCBwYXJlbnRzLCBzaGFyZWQsIHRyYXNoZWQpJyxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuZmlsZXM/Lm1hcChjb252ZXJ0R29vZ2xlRHJpdmVGb2xkZXIpIHx8IFtdXG4gIH1cblxuICBhc3luYyBjcmVhdGVGb2xkZXIobmFtZTogc3RyaW5nLCBwYXJlbnRJZD86IHN0cmluZyk6IFByb21pc2U8RHJpdmVGb2xkZXI+IHtcbiAgICBjb25zdCBtZXRhZGF0YTogRHJpdmVGaWxlTWV0YWRhdGEgPSB7XG4gICAgICBuYW1lLFxuICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZm9sZGVyJyxcbiAgICAgIGNyZWF0ZWRUaW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBtb2RpZmllZFRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9XG5cbiAgICBpZiAocGFyZW50SWQpIHtcbiAgICAgIG1ldGFkYXRhLnBhcmVudHMgPSBbcGFyZW50SWRdXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLmNyZWF0ZSh7XG4gICAgICByZXF1ZXN0Qm9keTogbWV0YWRhdGEsXG4gICAgICBmaWVsZHM6ICdpZCwgbmFtZSwgY3JlYXRlZFRpbWUsIG1vZGlmaWVkVGltZSwgcGFyZW50cywgc2hhcmVkLCB0cmFzaGVkJyxcbiAgICB9KVxuXG4gICAgcmV0dXJuIGNvbnZlcnRHb29nbGVEcml2ZUZvbGRlcihyZXNwb25zZS5kYXRhKVxuICB9XG5cbiAgYXN5bmMgdXBsb2FkRmlsZShvcHRpb25zOiBEcml2ZVVwbG9hZE9wdGlvbnMpOiBQcm9taXNlPERyaXZlRmlsZT4ge1xuICAgIGNvbnN0IHsgZmlsZSwgbWV0YWRhdGEsIHBhcmVudElkIH0gPSBvcHRpb25zXG5cbiAgICBjb25zdCBmaWxlTWV0YWRhdGE6IGFueSA9IHtcbiAgICAgIG5hbWU6IG1ldGFkYXRhLm5hbWUgfHwgZmlsZS5uYW1lLFxuICAgICAgLi4uKHBhcmVudElkID8geyBwYXJlbnRzOiBbcGFyZW50SWRdIH0gOiBtZXRhZGF0YS5wYXJlbnRzICYmIHsgcGFyZW50czogbWV0YWRhdGEucGFyZW50cyB9KSxcbiAgICAgIC4uLihtZXRhZGF0YS5kZXNjcmlwdGlvbiAmJiB7IGRlc2NyaXB0aW9uOiBtZXRhZGF0YS5kZXNjcmlwdGlvbiB9KSxcbiAgICAgIC8vIERvbid0IGluY2x1ZGUgbWltZVR5cGUgaW4gbWV0YWRhdGEgYXMgaXQgc2hvdWxkIGJlIGluIG1lZGlhIG9iamVjdFxuICAgIH1cblxuICAgIC8vIENvbnZlcnQgRmlsZSB0byByZWFkYWJsZSBzdHJlYW0gZm9yIEdvb2dsZSBEcml2ZSBBUElcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IGZpbGUuYXJyYXlCdWZmZXIoKVxuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyKVxuICAgIGNvbnN0IHN0cmVhbSA9IFJlYWRhYmxlLmZyb20oYnVmZmVyKVxuXG4gICAgY29uc3QgbWVkaWEgPSB7XG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlIHx8IGdldE1pbWVUeXBlRnJvbUZpbGVOYW1lKGZpbGUubmFtZSksXG4gICAgICBib2R5OiBzdHJlYW0sXG4gICAgfVxuXG4gICAgLy8gVXNlIHVwbG9hZFR5cGU9bXVsdGlwYXJ0IGZvciBwcm9wZXIgZmlsZSB1cGxvYWQgYWNjb3JkaW5nIHRvIERyaXZlIEFQSSBkb2NzXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLmNyZWF0ZSh7XG4gICAgICByZXF1ZXN0Qm9keTogZmlsZU1ldGFkYXRhLFxuICAgICAgbWVkaWEsXG4gICAgICB1cGxvYWRUeXBlOiAnbXVsdGlwYXJ0JyxcbiAgICAgIGZpZWxkczpcbiAgICAgICAgJ2lkLCBuYW1lLCBtaW1lVHlwZSwgc2l6ZSwgY3JlYXRlZFRpbWUsIG1vZGlmaWVkVGltZSwgd2ViVmlld0xpbmssIHdlYkNvbnRlbnRMaW5rLCB0aHVtYm5haWxMaW5rLCBwYXJlbnRzLCBvd25lcnMoZGlzcGxheU5hbWUsZW1haWxBZGRyZXNzLHBob3RvTGluayksIHNoYXJlZCwgdHJhc2hlZCcsXG4gICAgfSlcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlXG4gICAgcmV0dXJuIGNvbnZlcnRHb29nbGVEcml2ZUZpbGUocmVzdWx0LmRhdGEpXG4gIH1cblxuICBhc3luYyBkb3dubG9hZEZpbGUoZmlsZUlkOiBzdHJpbmcpOiBQcm9taXNlPFJlYWRhYmxlPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLmdldChcbiAgICAgIHtcbiAgICAgICAgZmlsZUlkLFxuICAgICAgICBhbHQ6ICdtZWRpYScsXG4gICAgICB9LFxuICAgICAgeyByZXNwb25zZVR5cGU6ICdzdHJlYW0nIH0sXG4gICAgKVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEgYXMgUmVhZGFibGVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZmlsZSBtZXRhZGF0YSB3aXRoIHNwZWNpZmljIGZpZWxkc1xuICAgKi9cbiAgYXN5bmMgZ2V0RmlsZU1ldGFkYXRhKGZpbGVJZDogc3RyaW5nLCBmaWVsZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxEcml2ZUZpbGVNZXRhZGF0YSAmIHsgaWQ6IHN0cmluZyB9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLmdldCh7XG4gICAgICBmaWxlSWQsXG4gICAgICBmaWVsZHM6IGZpZWxkcy5qb2luKCcsJyksXG4gICAgfSlcblxuICAgIC8vIC8vIC8vIC8vIC8vIGNvbnNvbGUubG9nKCdbR29vZ2xlIERyaXZlIFNlcnZpY2VdIFJhdyBBUEkgcmVzcG9uc2U6JywgcmVzcG9uc2UuZGF0YSlcbiAgICAvLyAvLyAvLyAvLyAvLyBjb25zb2xlLmxvZygnW0dvb2dsZSBEcml2ZSBTZXJ2aWNlXSBSZXNwb25zZSBJRDonLCByZXNwb25zZS5kYXRhLmlkKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiByZXNwb25zZS5kYXRhLmlkIHx8IGZpbGVJZCwgLy8gRW5zdXJlIGlkIGlzIGFsd2F5cyBwcmVzZW50XG4gICAgICBuYW1lOiByZXNwb25zZS5kYXRhLm5hbWUhLFxuICAgICAgbWltZVR5cGU6IHJlc3BvbnNlLmRhdGEubWltZVR5cGUhLFxuICAgICAgY3JlYXRlZFRpbWU6IHJlc3BvbnNlLmRhdGEuY3JlYXRlZFRpbWUhLFxuICAgICAgbW9kaWZpZWRUaW1lOiByZXNwb25zZS5kYXRhLm1vZGlmaWVkVGltZSEsXG4gICAgICBwYXJlbnRzOiByZXNwb25zZS5kYXRhLnBhcmVudHMgfHwgW10sXG4gICAgICBzaGFyZWQ6IHJlc3BvbnNlLmRhdGEuc2hhcmVkIHx8IGZhbHNlLFxuICAgICAgdHJhc2hlZDogcmVzcG9uc2UuZGF0YS50cmFzaGVkIHx8IGZhbHNlLFxuICAgICAgLi4uKHJlc3BvbnNlLmRhdGEud2ViVmlld0xpbmsgJiYgeyB3ZWJWaWV3TGluazogcmVzcG9uc2UuZGF0YS53ZWJWaWV3TGluayB9KSxcbiAgICAgIC4uLihyZXNwb25zZS5kYXRhLndlYkNvbnRlbnRMaW5rICYmIHsgd2ViQ29udGVudExpbms6IHJlc3BvbnNlLmRhdGEud2ViQ29udGVudExpbmsgfSksXG4gICAgICAuLi4ocmVzcG9uc2UuZGF0YS50aHVtYm5haWxMaW5rICYmIHsgdGh1bWJuYWlsTGluazogcmVzcG9uc2UuZGF0YS50aHVtYm5haWxMaW5rIH0pLFxuICAgICAgLi4uKHJlc3BvbnNlLmRhdGEuaWNvbkxpbmsgJiYgeyBpY29uTGluazogcmVzcG9uc2UuZGF0YS5pY29uTGluayB9KSxcbiAgICAgIC4uLihyZXNwb25zZS5kYXRhLmRlc2NyaXB0aW9uICYmIHsgZGVzY3JpcHRpb246IHJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb24gfSksXG4gICAgICBzdGFycmVkOiByZXNwb25zZS5kYXRhLnN0YXJyZWQgfHwgZmFsc2UsXG4gICAgICBleHBsaWNpdGx5VHJhc2hlZDogcmVzcG9uc2UuZGF0YS5leHBsaWNpdGx5VHJhc2hlZCB8fCBmYWxzZSxcbiAgICAgIGV4cG9ydExpbmtzOiByZXNwb25zZS5kYXRhLmV4cG9ydExpbmtzIHx8IHt9LFxuICAgIH1cbiAgfVxuXG4gIC8vIFVuaWZpZWQgcGVybWFuZW50IGRlbGV0ZSBvcGVyYXRpb24gZm9yIGJvdGggZmlsZXMgYW5kIGZvbGRlcnNcbiAgYXN5bmMgZGVsZXRlRmlsZShmaWxlSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMuZGVsZXRlKHsgZmlsZUlkIH0pXG4gIH1cblxuICBhc3luYyBleHBvcnRGaWxlKGZpbGVJZDogc3RyaW5nLCBtaW1lVHlwZTogc3RyaW5nKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5kcml2ZS5maWxlcy5leHBvcnQoXG4gICAgICB7XG4gICAgICAgIGZpbGVJZCxcbiAgICAgICAgbWltZVR5cGUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgICB9LFxuICAgIClcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YSBhcyBBcnJheUJ1ZmZlclxuICB9XG5cbiAgLy8gQWxpYXMgZm9yIGNsYXJpdHkgLSBzYW1lIG9wZXJhdGlvbiB3b3JrcyBmb3IgYm90aCBmaWxlcyBhbmQgZm9sZGVyc1xuICBhc3luYyBkZWxldGVGb2xkZXIoZm9sZGVySWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmRlbGV0ZUZpbGUoZm9sZGVySWQpXG4gIH1cblxuICAvLyBVbmlmaWVkIG1vdmUgdG8gdHJhc2ggb3BlcmF0aW9uIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzXG4gIGFzeW5jIG1vdmVUb1RyYXNoKGZpbGVJZDogc3RyaW5nKTogUHJvbWlzZTxEcml2ZUZpbGU+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMudXBkYXRlKHtcbiAgICAgIGZpbGVJZCxcbiAgICAgIHJlcXVlc3RCb2R5OiB7IHRyYXNoZWQ6IHRydWUgfSxcbiAgICAgIGZpZWxkczpcbiAgICAgICAgJ2lkLCBuYW1lLCBtaW1lVHlwZSwgc2l6ZSwgY3JlYXRlZFRpbWUsIG1vZGlmaWVkVGltZSwgd2ViVmlld0xpbmssIHdlYkNvbnRlbnRMaW5rLCB0aHVtYm5haWxMaW5rLCBwYXJlbnRzLCBvd25lcnMoZGlzcGxheU5hbWUsZW1haWxBZGRyZXNzLHBob3RvTGluayksIHNoYXJlZCwgdHJhc2hlZCcsXG4gICAgfSlcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlXG4gICAgcmV0dXJuIGNvbnZlcnRHb29nbGVEcml2ZUZpbGUocmVzdWx0LmRhdGEpXG4gIH1cblxuICAvLyBBbGlhcyBmb3IgY2xhcml0eSAtIHNhbWUgb3BlcmF0aW9uIHdvcmtzIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzXG4gIGFzeW5jIG1vdmVGb2xkZXJUb1RyYXNoKGZvbGRlcklkOiBzdHJpbmcpOiBQcm9taXNlPERyaXZlRmlsZT4ge1xuICAgIHJldHVybiB0aGlzLm1vdmVUb1RyYXNoKGZvbGRlcklkKVxuICB9XG5cbiAgLy8gVW5pZmllZCByZXN0b3JlIGZyb20gdHJhc2ggb3BlcmF0aW9uIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzXG4gIGFzeW5jIHVudHJhc2hGaWxlKGZpbGVJZDogc3RyaW5nKTogUHJvbWlzZTxEcml2ZUZpbGU+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMudXBkYXRlKHtcbiAgICAgIGZpbGVJZCxcbiAgICAgIHJlcXVlc3RCb2R5OiB7IHRyYXNoZWQ6IGZhbHNlIH0sXG4gICAgICBmaWVsZHM6XG4gICAgICAgICdpZCwgbmFtZSwgbWltZVR5cGUsIHNpemUsIGNyZWF0ZWRUaW1lLCBtb2RpZmllZFRpbWUsIHdlYlZpZXdMaW5rLCB3ZWJDb250ZW50TGluaywgdGh1bWJuYWlsTGluaywgcGFyZW50cywgb3duZXJzKGRpc3BsYXlOYW1lLGVtYWlsQWRkcmVzcyxwaG90b0xpbmspLCBzaGFyZWQsIHRyYXNoZWQnLFxuICAgIH0pXG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZVxuICAgIHJldHVybiBjb252ZXJ0R29vZ2xlRHJpdmVGaWxlKHJlc3VsdC5kYXRhKVxuICB9XG5cbiAgLy8gQWxpYXMgZm9yIGNsYXJpdHkgLSBzYW1lIG9wZXJhdGlvbiB3b3JrcyBmb3IgYm90aCBmaWxlcyBhbmQgZm9sZGVyc1xuICBhc3luYyByZXN0b3JlRm9sZGVyRnJvbVRyYXNoKGZvbGRlcklkOiBzdHJpbmcpOiBQcm9taXNlPERyaXZlRmlsZT4ge1xuICAgIHJldHVybiB0aGlzLnVudHJhc2hGaWxlKGZvbGRlcklkKVxuICB9XG5cbiAgLy8gVW5pZmllZCByZW5hbWUgb3BlcmF0aW9uIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzXG4gIGFzeW5jIHJlbmFtZUZpbGUoZmlsZUlkOiBzdHJpbmcsIG5ld05hbWU6IHN0cmluZyk6IFByb21pc2U8RHJpdmVGaWxlPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFZhbGlkYXRlIGZpbGVuYW1lIHVzaW5nIGhlbHBlciBmdW5jdGlvblxuICAgICAgdmFsaWRhdGVGaWxlTmFtZShuZXdOYW1lKVxuXG4gICAgICBjb25zdCBvcHRpbWl6ZWRGaWVsZHMgPSBnZXRPcHRpbWl6ZWRGaWVsZHMoJ0xJU1RfREVUQUlMRUQnKVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLnVwZGF0ZSh7XG4gICAgICAgIGZpbGVJZCxcbiAgICAgICAgcmVxdWVzdEJvZHk6IHsgbmFtZTogbmV3TmFtZS50cmltKCkgfSxcbiAgICAgICAgZmllbGRzOiBvcHRpbWl6ZWRGaWVsZHMsXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gY29udmVydEdvb2dsZURyaXZlRmlsZShyZXNwb25zZS5kYXRhKVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIC8vIEhhbmRsZSBlcnJvcnMgdXNpbmcgY2VudHJhbGl6ZWQgZXJyb3IgaGFuZGxlclxuICAgICAgaGFuZGxlRHJpdmVBcGlFcnJvcihlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyBBbGlhcyBmb3IgY2xhcml0eSAtIHNhbWUgb3BlcmF0aW9uIHdvcmtzIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzXG4gIGFzeW5jIHJlbmFtZUZvbGRlcihmb2xkZXJJZDogc3RyaW5nLCBuZXdOYW1lOiBzdHJpbmcpOiBQcm9taXNlPERyaXZlRmlsZT4ge1xuICAgIHJldHVybiB0aGlzLnJlbmFtZUZpbGUoZm9sZGVySWQsIG5ld05hbWUpXG4gIH1cblxuICAvLyBVbmlmaWVkIG1vdmUgb3BlcmF0aW9uIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzIHdpdGggZXJyb3IgcmVjb3ZlcnlcbiAgYXN5bmMgbW92ZUZpbGUoZmlsZUlkOiBzdHJpbmcsIG5ld1BhcmVudElkOiBzdHJpbmcsIGN1cnJlbnRQYXJlbnRJZD86IHN0cmluZyk6IFByb21pc2U8RHJpdmVGaWxlPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEFjY29yZGluZyB0byBEcml2ZSBBUEkgZG9jcywgd2Ugc2hvdWxkIGdldCBjdXJyZW50IHBhcmVudHMgaWYgbm90IHByb3ZpZGVkXG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnRJZCkge1xuICAgICAgICBjb25zdCBmaWxlSW5mbyA9IGF3YWl0IHRoaXMuZ2V0RmlsZShmaWxlSWQpXG4gICAgICAgIGN1cnJlbnRQYXJlbnRJZCA9IGZpbGVJbmZvLnBhcmVudHM/LlswXVxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGRhdGVQYXJhbXM6IGFueSA9IHtcbiAgICAgICAgZmlsZUlkLFxuICAgICAgICBhZGRQYXJlbnRzOiBuZXdQYXJlbnRJZCxcbiAgICAgICAgLi4uKGN1cnJlbnRQYXJlbnRJZCAmJiB7IHJlbW92ZVBhcmVudHM6IGN1cnJlbnRQYXJlbnRJZCB9KSxcbiAgICAgICAgZmllbGRzOlxuICAgICAgICAgICdpZCwgbmFtZSwgbWltZVR5cGUsIHNpemUsIGNyZWF0ZWRUaW1lLCBtb2RpZmllZFRpbWUsIHdlYlZpZXdMaW5rLCB3ZWJDb250ZW50TGluaywgdGh1bWJuYWlsTGluaywgcGFyZW50cywgb3duZXJzKGRpc3BsYXlOYW1lLGVtYWlsQWRkcmVzcyxwaG90b0xpbmspLCBzaGFyZWQsIHRyYXNoZWQnLFxuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZHJpdmUuZmlsZXMudXBkYXRlKHVwZGF0ZVBhcmFtcylcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2VcbiAgICAgIHJldHVybiBjb252ZXJ0R29vZ2xlRHJpdmVGaWxlKHJlc3VsdC5kYXRhKVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIC8vIEhhbmRsZSBzcGVjaWZpYyBHb29nbGUgQVBJIGVycm9ycyBhY2NvcmRpbmcgdG8gZG9jdW1lbnRhdGlvblxuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IDQwMykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucyB0byBtb3ZlIHRoaXMgZmlsZScpXG4gICAgICB9IGVsc2UgaWYgKGVycm9yLmNvZGUgPT09IDQwNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgb3IgZGVzdGluYXRpb24gZm9sZGVyIG5vdCBmb3VuZCcpXG4gICAgICB9IGVsc2UgaWYgKGVycm9yLmNvZGUgPT09IDQyOSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JhdGUgbGltaXQgZXhjZWVkZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXInKVxuICAgICAgfSBlbHNlIGlmIChlcnJvci5jb2RlID09PSA0MDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1vdmUgb3BlcmF0aW9uIHBhcmFtZXRlcnMnKVxuICAgICAgfVxuXG4gICAgICAvLyBSZS10aHJvdyB3aXRoIG9yaWdpbmFsIGVycm9yIGZvciB1bmV4cGVjdGVkIGNhc2VzXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIC8vIEFsaWFzIGZvciBjbGFyaXR5IC0gc2FtZSBvcGVyYXRpb24gd29ya3MgZm9yIGJvdGggZmlsZXMgYW5kIGZvbGRlcnNcbiAgYXN5bmMgbW92ZUZvbGRlcihmb2xkZXJJZDogc3RyaW5nLCBuZXdQYXJlbnRJZDogc3RyaW5nLCBjdXJyZW50UGFyZW50SWQ/OiBzdHJpbmcpOiBQcm9taXNlPERyaXZlRmlsZT4ge1xuICAgIHJldHVybiB0aGlzLm1vdmVGaWxlKGZvbGRlcklkLCBuZXdQYXJlbnRJZCwgY3VycmVudFBhcmVudElkKVxuICB9XG5cbiAgLy8gQ29weSBvcGVyYXRpb24gLSB3b3JrcyBmb3IgZmlsZXMsIGZvbGRlcnMgcmVxdWlyZSBzcGVjaWFsIGhhbmRsaW5nXG4gIGFzeW5jIGNvcHlGaWxlKGZpbGVJZDogc3RyaW5nLCBtZXRhZGF0YTogUGFydGlhbDxEcml2ZUZpbGVNZXRhZGF0YT4pOiBQcm9taXNlPERyaXZlRmlsZT4ge1xuICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoaXMgaXMgYSBmb2xkZXJcbiAgICBjb25zdCBvcmlnaW5hbEZpbGUgPSBhd2FpdCB0aGlzLmdldEZpbGUoZmlsZUlkKVxuXG4gICAgaWYgKG9yaWdpbmFsRmlsZS5taW1lVHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5mb2xkZXInKSB7XG4gICAgICAvLyBGb3IgZm9sZGVycywgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgZm9sZGVyIGFuZCBjb3B5IGNvbnRlbnRzXG4gICAgICByZXR1cm4gdGhpcy5jb3B5Rm9sZGVyKGZpbGVJZCwgbWV0YWRhdGEpXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLmZpbGVzLmNvcHkoe1xuICAgICAgZmlsZUlkLFxuICAgICAgcmVxdWVzdEJvZHk6IG1ldGFkYXRhLFxuICAgICAgZmllbGRzOlxuICAgICAgICAnaWQsIG5hbWUsIG1pbWVUeXBlLCBzaXplLCBjcmVhdGVkVGltZSwgbW9kaWZpZWRUaW1lLCB3ZWJWaWV3TGluaywgd2ViQ29udGVudExpbmssIHRodW1ibmFpbExpbmssIHBhcmVudHMsIG93bmVycyhkaXNwbGF5TmFtZSxlbWFpbEFkZHJlc3MscGhvdG9MaW5rKSwgc2hhcmVkLCB0cmFzaGVkJyxcbiAgICB9KVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2VcbiAgICByZXR1cm4gY29udmVydEdvb2dsZURyaXZlRmlsZShyZXN1bHQuZGF0YSlcbiAgfVxuXG4gIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIGZvbGRlciBjb3B5aW5nXG4gIGFzeW5jIGNvcHlGb2xkZXIoZm9sZGVySWQ6IHN0cmluZywgbWV0YWRhdGE6IFBhcnRpYWw8RHJpdmVGaWxlTWV0YWRhdGE+KTogUHJvbWlzZTxEcml2ZUZpbGU+IHtcbiAgICBjb25zdCBvcmlnaW5hbEZvbGRlciA9IGF3YWl0IHRoaXMuZ2V0RmlsZShmb2xkZXJJZClcblxuICAgIC8vIENyZWF0ZSBuZXcgZm9sZGVyIHdpdGggdGhlIHNwZWNpZmllZCBtZXRhZGF0YVxuICAgIGNvbnN0IG5ld0ZvbGRlciA9IGF3YWl0IHRoaXMuY3JlYXRlRm9sZGVyKG1ldGFkYXRhLm5hbWUgfHwgYCR7b3JpZ2luYWxGb2xkZXIubmFtZX0gLSBDb3B5YCwgbWV0YWRhdGEucGFyZW50cz8uWzBdKVxuXG4gICAgLy8gTm90ZTogRm9yIGZ1bGwgZm9sZGVyIGNvcHlpbmcgd2l0aCBjb250ZW50cywgd2Ugd291bGQgbmVlZCByZWN1cnNpdmUgY29weWluZ1xuICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBlbXB0eSBjb3B5IG9mIHRoZSBmb2xkZXIgc3RydWN0dXJlXG4gICAgcmV0dXJuIGNvbnZlcnRHb29nbGVEcml2ZUZpbGUoe1xuICAgICAgaWQ6IG5ld0ZvbGRlci5pZCEsXG4gICAgICBuYW1lOiBuZXdGb2xkZXIubmFtZSEsXG4gICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5mb2xkZXInLFxuICAgICAgY3JlYXRlZFRpbWU6IG5ld0ZvbGRlci5jcmVhdGVkVGltZSEsXG4gICAgICBtb2RpZmllZFRpbWU6IG5ld0ZvbGRlci5tb2RpZmllZFRpbWUhLFxuICAgICAgLi4uKG5ld0ZvbGRlci5wYXJlbnRzICYmIHsgcGFyZW50czogbmV3Rm9sZGVyLnBhcmVudHMgfSksXG4gICAgICAuLi4obmV3Rm9sZGVyLnNoYXJlZCAmJiB7IHNoYXJlZDogbmV3Rm9sZGVyLnNoYXJlZCB9KSxcbiAgICAgIC4uLihuZXdGb2xkZXIudHJhc2hlZCAmJiB7IHRyYXNoZWQ6IG5ld0ZvbGRlci50cmFzaGVkIH0pLFxuICAgIH0pXG4gIH1cblxuICAvLyBBbGlhcyBmb3IgY2xhcml0eSAtIHNhbWUgb3BlcmF0aW9uIHdvcmtzIGZvciBib3RoIGZpbGVzIGFuZCBmb2xkZXJzXG4gIGFzeW5jIHJlbW92ZUZvbGRlclBlcm1pc3Npb24oZm9sZGVySWQ6IHN0cmluZywgcGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVGaWxlUGVybWlzc2lvbihmb2xkZXJJZCwgcGVybWlzc2lvbklkKVxuICB9XG5cbiAgLy8gVW5pZmllZCBzaGFyZSBvcGVyYXRpb24gZm9yIGJvdGggZmlsZXMgYW5kIGZvbGRlcnNcbiAgYXN5bmMgc2hhcmVGaWxlKGZpbGVJZDogc3RyaW5nLCBwZXJtaXNzaW9uOiBEcml2ZVBlcm1pc3Npb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGVybWlzc2lvblJlcXVlc3Q6IGFueSA9IHtcbiAgICAgICAgcm9sZTogcGVybWlzc2lvbi5yb2xlLFxuICAgICAgICB0eXBlOiBwZXJtaXNzaW9uLnR5cGUsXG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBvcHRpb25hbCBmaWVsZHMgb25seSBpZiBwcm92aWRlZCwgYWNjb3JkaW5nIHRvIEFQSSBkb2NzXG4gICAgICBpZiAocGVybWlzc2lvbi5lbWFpbEFkZHJlc3MpIHtcbiAgICAgICAgcGVybWlzc2lvblJlcXVlc3QuZW1haWxBZGRyZXNzID0gcGVybWlzc2lvbi5lbWFpbEFkZHJlc3NcbiAgICAgIH1cblxuICAgICAgaWYgKHBlcm1pc3Npb24uZG9tYWluKSB7XG4gICAgICAgIHBlcm1pc3Npb25SZXF1ZXN0LmRvbWFpbiA9IHBlcm1pc3Npb24uZG9tYWluXG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBhbGxvd0ZpbGVEaXNjb3ZlcnkgZm9yIGRvbWFpbi9hbnlvbmUgcGVybWlzc2lvbnMgYXMgcGVyIEFQSSBkb2NzXG4gICAgICBpZiAocGVybWlzc2lvbi50eXBlID09PSAnZG9tYWluJyB8fCBwZXJtaXNzaW9uLnR5cGUgPT09ICdhbnlvbmUnKSB7XG4gICAgICAgIHBlcm1pc3Npb25SZXF1ZXN0LmFsbG93RmlsZURpc2NvdmVyeSA9IHBlcm1pc3Npb24uYWxsb3dGaWxlRGlzY292ZXJ5ID8/IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuZHJpdmUucGVybWlzc2lvbnMuY3JlYXRlKHtcbiAgICAgICAgZmlsZUlkLFxuICAgICAgICByZXF1ZXN0Qm9keTogcGVybWlzc2lvblJlcXVlc3QsXG4gICAgICAgIHNlbmROb3RpZmljYXRpb25FbWFpbDogcGVybWlzc2lvbi5zZW5kTm90aWZpY2F0aW9uRW1haWwgPz8gZmFsc2UsXG4gICAgICAgIC8vIEFkZCBlbWFpbE1lc3NhZ2UgaWYgc2VuZGluZyBub3RpZmljYXRpb25zXG4gICAgICAgIC4uLihwZXJtaXNzaW9uLnNlbmROb3RpZmljYXRpb25FbWFpbCAmJiB7XG4gICAgICAgICAgZW1haWxNZXNzYWdlOiAnRmlsZSBzaGFyZWQgd2l0aCB5b3UgdmlhIERyaXZlIE1hbmFnZXInLFxuICAgICAgICB9KSxcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgLy8gSGFuZGxlIHNwZWNpZmljIEFQSSBlcnJvcnMgYWNjb3JkaW5nIHRvIGRvY3VtZW50YXRpb25cbiAgICAgIGlmIChlcnJvci5jb2RlID09PSA0MDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMgdG8gc2hhcmUgdGhpcyBmaWxlJylcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IuY29kZSA9PT0gNDA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBub3QgZm91bmQnKVxuICAgICAgfSBlbHNlIGlmIChlcnJvci5jb2RlID09PSA0MDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNoYXJpbmcgcGFyYW1ldGVycycpXG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgLy8gQWxpYXMgZm9yIGNsYXJpdHkgLSBzYW1lIG9wZXJhdGlvbiB3b3JrcyBmb3IgYm90aCBmaWxlcyBhbmQgZm9sZGVyc1xuICBhc3luYyBzaGFyZUZvbGRlcihmb2xkZXJJZDogc3RyaW5nLCBwZXJtaXNzaW9uOiBEcml2ZVBlcm1pc3Npb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zaGFyZUZpbGUoZm9sZGVySWQsIHBlcm1pc3Npb24pXG4gIH1cblxuICAvLyBHZXQgZmlsZSBwZXJtaXNzaW9uc1xuICBhc3luYyBnZXRGaWxlUGVybWlzc2lvbnMoZmlsZUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLnBlcm1pc3Npb25zLmxpc3Qoe1xuICAgICAgZmlsZUlkLFxuICAgICAgZmllbGRzOiAncGVybWlzc2lvbnMoaWQsIHR5cGUsIHJvbGUsIGVtYWlsQWRkcmVzcywgZG9tYWluLCBkaXNwbGF5TmFtZSknLFxuICAgIH0pXG5cbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5wZXJtaXNzaW9ucyB8fCBbXVxuICB9XG5cbiAgLy8gUmVtb3ZlIGZpbGUgcGVybWlzc2lvblxuICBhc3luYyByZW1vdmVGaWxlUGVybWlzc2lvbihmaWxlSWQ6IHN0cmluZywgcGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmRyaXZlLnBlcm1pc3Npb25zLmRlbGV0ZSh7XG4gICAgICBmaWxlSWQsXG4gICAgICBwZXJtaXNzaW9uSWQsXG4gICAgfSlcbiAgfVxuXG4gIC8vIENyZWF0ZSBwZXJtaXNzaW9uIChmb3IgZW5oYW5jZWQgc2hhcmluZylcbiAgYXN5bmMgY3JlYXRlUGVybWlzc2lvbihmaWxlSWQ6IHN0cmluZywgcGVybWlzc2lvbkRhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRyaXZlLnBlcm1pc3Npb25zLmNyZWF0ZSh7XG4gICAgICBmaWxlSWQsXG4gICAgICByZXF1ZXN0Qm9keTogcGVybWlzc2lvbkRhdGEsXG4gICAgICBzZW5kTm90aWZpY2F0aW9uRW1haWw6IGZhbHNlLFxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgfVxuXG4gIC8vIERlbGV0ZSBwZXJtaXNzaW9uIChmb3IgZW5oYW5jZWQgc2hhcmluZylcbiAgYXN5bmMgZGVsZXRlUGVybWlzc2lvbihmaWxlSWQ6IHN0cmluZywgcGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmRyaXZlLnBlcm1pc3Npb25zLmRlbGV0ZSh7XG4gICAgICBmaWxlSWQsXG4gICAgICBwZXJtaXNzaW9uSWQsXG4gICAgfSlcbiAgfVxuXG4gIC8vIFNlbmQgbm90aWZpY2F0aW9uIGVtYWlsIChmb3IgZW5oYW5jZWQgc2hhcmluZylcbiAgYXN5bmMgc2VuZE5vdGlmaWNhdGlvbkVtYWlsKGZpbGVJZDogc3RyaW5nLCBlbWFpbERhdGE6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIE5vdGU6IFRoaXMgd291bGQgdHlwaWNhbGx5IHVzZSB0aGUgR21haWwgQVBJIG9yIHNpbWlsYXIgc2VydmljZVxuICAgIC8vIEZvciBub3csIHdlJ2xsIGp1c3QgbG9nIHRoZSBhY3Rpb25cbiAgICBjb25zb2xlLmxvZygnTm90aWZpY2F0aW9uIGVtYWlsIHdvdWxkIGJlIHNlbnQgZm9yIGZpbGU6JywgZmlsZUlkLCAnd2l0aCBkYXRhOicsIGVtYWlsRGF0YSlcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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