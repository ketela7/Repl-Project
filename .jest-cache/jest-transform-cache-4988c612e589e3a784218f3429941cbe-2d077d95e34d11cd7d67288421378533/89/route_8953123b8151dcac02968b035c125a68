7a773b4d2ceec830ed71ae245b22ea30
"use strict";

/* istanbul ignore next */
function cov_13nmfi9n1j() {
  var path = "/home/runner/workspace/src/app/api/drive/folders/validate/route.ts";
  var hash = "698ace3cf1090055ee89e7071e127ea600aeaf7f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/folders/validate/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "5": {
        start: {
          line: 13,
          column: 18
        },
        end: {
          line: 13,
          column: 57
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 63
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 39
        }
      },
      "11": {
        start: {
          line: 21,
          column: 33
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "12": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "13": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "14": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "15": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "17": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 40,
          column: 14
        }
      },
      "18": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "19": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 38,
          column: 23
        }
      },
      "20": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 38
        }
      },
      "21": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 48,
          column: 19
        }
      },
      "23": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "24": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "25": {
        start: {
          line: 59,
          column: 35
        },
        end: {
          line: 59,
          column: 77
        }
      },
      "26": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "27": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 65,
          column: 19
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "29": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "30": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 83,
          column: 19
        }
      },
      "31": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "32": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 90,
          column: 19
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "34": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "35": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "36": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 75
          },
          end: {
            line: 33,
            column: 76
          }
        },
        loc: {
          start: {
            line: 33,
            column: 85
          },
          end: {
            line: 40,
            column: 13
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 62
          },
          end: {
            line: 34,
            column: 63
          }
        },
        loc: {
          start: {
            line: 34,
            column: 72
          },
          end: {
            line: 39,
            column: 17
          }
        },
        line: 34
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 59,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 59,
            column: 68
          }
        }, {
          start: {
            line: 59,
            column: 72
          },
          end: {
            line: 59,
            column: 77
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "8": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "9": {
        loc: {
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 38
          }
        }, {
          start: {
            line: 103,
            column: 42
          },
          end: {
            line: 103,
            column: 76
          }
        }],
        line: 103
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/folders/validate/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\nimport { retryDriveApiCall } from '@/lib/api-retry'\nimport { throttledDriveRequest } from '@/lib/api-throttle'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n    const body = await request.json()\n    const { folderId } = body\n\n    if (!folderId) {\n      return NextResponse.json({ error: 'Folder ID is required' }, { status: 400 })\n    }\n\n    try {\n      // Use minimal fields to reduce API load and improve error handling\n      const response = await throttledDriveRequest(async () => {\n        return await retryDriveApiCall(async () => {\n          return await driveService!.drive.files.get({\n            fileId: folderId,\n            fields: 'id,name,mimeType,trashed,capabilities(canAddChildren)',\n          })\n        })\n      })\n\n      const file = response.data\n\n      // Check if it's actually a folder\n      if (file.mimeType !== 'application/vnd.google-apps.folder') {\n        return NextResponse.json({\n          success: false,\n          error: 'The provided ID is not a folder',\n          details: 'The ID points to a file, not a folder',\n        })\n      }\n\n      // Check if folder is trashed\n      if (file.trashed) {\n        return NextResponse.json({\n          success: false,\n          error: 'Folder is in trash',\n          details: 'Cannot move items to a trashed folder',\n        })\n      }\n\n      // Check if user can add children (write permission)\n      const canAddChildren = file.capabilities?.canAddChildren ?? false\n      if (!canAddChildren) {\n        return NextResponse.json({\n          success: false,\n          error: 'Access denied',\n          details: 'You do not have permission to add files to this folder',\n        })\n      }\n\n      return NextResponse.json({\n        success: true,\n        folder: {\n          id: file.id,\n          name: file.name,\n          mimeType: file.mimeType,\n          canAddChildren,\n        },\n      })\n    } catch (error: any) {\n      // Handle specific Google Drive API errors\n      if (error.code === 404) {\n        return NextResponse.json({\n          success: false,\n          error: 'Folder not found',\n          details: 'The folder ID does not exist or you do not have access to it',\n        })\n      }\n\n      if (error.code === 403) {\n        return NextResponse.json({\n          success: false,\n          error: 'Access denied',\n          details: 'You do not have permission to access this folder',\n        })\n      }\n\n      if (error.code === 401) {\n        return NextResponse.json({\n          success: false,\n          error: 'Authentication required',\n          details: 'Please reconnect your Google Drive account',\n        })\n      }\n\n      // Generic error for other cases\n      return NextResponse.json({\n        success: false,\n        error: 'Folder validation failed',\n        details: error.message || 'Unable to validate folder access',\n      })\n    }\n  } catch (error) {\n    return handleApiError(error)\n  }\n}\n"],
      names: ["POST", "request", "authResult", "initDriveService", "success", "response", "driveService", "body", "json", "folderId", "NextResponse", "error", "status", "throttledDriveRequest", "retryDriveApiCall", "drive", "files", "get", "fileId", "fields", "file", "data", "mimeType", "details", "trashed", "canAddChildren", "capabilities", "folder", "id", "name", "code", "message", "handleApiError"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;0BAEO;0BACf;6BACI;AAE/B,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,0BAAgB;QACzC,IAAI,CAACD,WAAWE,OAAO,EAAE;YACvB,OAAOF,WAAWG,QAAQ;QAC5B;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAGJ;QACzB,MAAMK,OAAO,MAAMN,QAAQO,IAAI;QAC/B,MAAM,EAAEC,QAAQ,EAAE,GAAGF;QAErB,IAAI,CAACE,UAAU;YACb,OAAOC,oBAAY,CAACF,IAAI,CAAC;gBAAEG,OAAO;YAAwB,GAAG;gBAAEC,QAAQ;YAAI;QAC7E;QAEA,IAAI;YACF,mEAAmE;YACnE,MAAMP,WAAW,MAAMQ,IAAAA,kCAAqB,EAAC;gBAC3C,OAAO,MAAMC,IAAAA,2BAAiB,EAAC;oBAC7B,OAAO,MAAMR,aAAcS,KAAK,CAACC,KAAK,CAACC,GAAG,CAAC;wBACzCC,QAAQT;wBACRU,QAAQ;oBACV;gBACF;YACF;YAEA,MAAMC,OAAOf,SAASgB,IAAI;YAE1B,kCAAkC;YAClC,IAAID,KAAKE,QAAQ,KAAK,sCAAsC;gBAC1D,OAAOZ,oBAAY,CAACF,IAAI,CAAC;oBACvBJ,SAAS;oBACTO,OAAO;oBACPY,SAAS;gBACX;YACF;YAEA,6BAA6B;YAC7B,IAAIH,KAAKI,OAAO,EAAE;gBAChB,OAAOd,oBAAY,CAACF,IAAI,CAAC;oBACvBJ,SAAS;oBACTO,OAAO;oBACPY,SAAS;gBACX;YACF;YAEA,oDAAoD;YACpD,MAAME,iBAAiBL,KAAKM,YAAY,EAAED,kBAAkB;YAC5D,IAAI,CAACA,gBAAgB;gBACnB,OAAOf,oBAAY,CAACF,IAAI,CAAC;oBACvBJ,SAAS;oBACTO,OAAO;oBACPY,SAAS;gBACX;YACF;YAEA,OAAOb,oBAAY,CAACF,IAAI,CAAC;gBACvBJ,SAAS;gBACTuB,QAAQ;oBACNC,IAAIR,KAAKQ,EAAE;oBACXC,MAAMT,KAAKS,IAAI;oBACfP,UAAUF,KAAKE,QAAQ;oBACvBG;gBACF;YACF;QACF,EAAE,OAAOd,OAAY;YACnB,0CAA0C;YAC1C,IAAIA,MAAMmB,IAAI,KAAK,KAAK;gBACtB,OAAOpB,oBAAY,CAACF,IAAI,CAAC;oBACvBJ,SAAS;oBACTO,OAAO;oBACPY,SAAS;gBACX;YACF;YAEA,IAAIZ,MAAMmB,IAAI,KAAK,KAAK;gBACtB,OAAOpB,oBAAY,CAACF,IAAI,CAAC;oBACvBJ,SAAS;oBACTO,OAAO;oBACPY,SAAS;gBACX;YACF;YAEA,IAAIZ,MAAMmB,IAAI,KAAK,KAAK;gBACtB,OAAOpB,oBAAY,CAACF,IAAI,CAAC;oBACvBJ,SAAS;oBACTO,OAAO;oBACPY,SAAS;gBACX;YACF;YAEA,gCAAgC;YAChC,OAAOb,oBAAY,CAACF,IAAI,CAAC;gBACvBJ,SAAS;gBACTO,OAAO;gBACPY,SAASZ,MAAMoB,OAAO,IAAI;YAC5B;QACF;IACF,EAAE,OAAOpB,OAAO;QACd,OAAOqB,IAAAA,wBAAc,EAACrB;IACxB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "698ace3cf1090055ee89e7071e127ea600aeaf7f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13nmfi9n1j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13nmfi9n1j();
cov_13nmfi9n1j().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_13nmfi9n1j().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_13nmfi9n1j().f[0]++;
    cov_13nmfi9n1j().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_13nmfi9n1j().s[3]++, require("next/server"));
const _apiutils =
/* istanbul ignore next */
(cov_13nmfi9n1j().s[4]++, require("../../../../../lib/api-utils"));
const _apiretry =
/* istanbul ignore next */
(cov_13nmfi9n1j().s[5]++, require("../../../../../lib/api-retry"));
const _apithrottle =
/* istanbul ignore next */
(cov_13nmfi9n1j().s[6]++, require("../../../../../lib/api-throttle"));
async function POST(request) {
  /* istanbul ignore next */
  cov_13nmfi9n1j().f[1]++;
  cov_13nmfi9n1j().s[7]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_13nmfi9n1j().s[8]++, await (0, _apiutils.initDriveService)());
    /* istanbul ignore next */
    cov_13nmfi9n1j().s[9]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_13nmfi9n1j().b[0][0]++;
      cov_13nmfi9n1j().s[10]++;
      return authResult.response;
    } else
    /* istanbul ignore next */
    {
      cov_13nmfi9n1j().b[0][1]++;
    }
    const {
      driveService
    } =
    /* istanbul ignore next */
    (cov_13nmfi9n1j().s[11]++, authResult);
    const body =
    /* istanbul ignore next */
    (cov_13nmfi9n1j().s[12]++, await request.json());
    const {
      folderId
    } =
    /* istanbul ignore next */
    (cov_13nmfi9n1j().s[13]++, body);
    /* istanbul ignore next */
    cov_13nmfi9n1j().s[14]++;
    if (!folderId) {
      /* istanbul ignore next */
      cov_13nmfi9n1j().b[1][0]++;
      cov_13nmfi9n1j().s[15]++;
      return _server.NextResponse.json({
        error: 'Folder ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_13nmfi9n1j().b[1][1]++;
    }
    cov_13nmfi9n1j().s[16]++;
    try {
      // Use minimal fields to reduce API load and improve error handling
      const response =
      /* istanbul ignore next */
      (cov_13nmfi9n1j().s[17]++, await (0, _apithrottle.throttledDriveRequest)(async () => {
        /* istanbul ignore next */
        cov_13nmfi9n1j().f[2]++;
        cov_13nmfi9n1j().s[18]++;
        return await (0, _apiretry.retryDriveApiCall)(async () => {
          /* istanbul ignore next */
          cov_13nmfi9n1j().f[3]++;
          cov_13nmfi9n1j().s[19]++;
          return await driveService.drive.files.get({
            fileId: folderId,
            fields: 'id,name,mimeType,trashed,capabilities(canAddChildren)'
          });
        });
      }));
      const file =
      /* istanbul ignore next */
      (cov_13nmfi9n1j().s[20]++, response.data);
      // Check if it's actually a folder
      /* istanbul ignore next */
      cov_13nmfi9n1j().s[21]++;
      if (file.mimeType !== 'application/vnd.google-apps.folder') {
        /* istanbul ignore next */
        cov_13nmfi9n1j().b[2][0]++;
        cov_13nmfi9n1j().s[22]++;
        return _server.NextResponse.json({
          success: false,
          error: 'The provided ID is not a folder',
          details: 'The ID points to a file, not a folder'
        });
      } else
      /* istanbul ignore next */
      {
        cov_13nmfi9n1j().b[2][1]++;
      }
      // Check if folder is trashed
      cov_13nmfi9n1j().s[23]++;
      if (file.trashed) {
        /* istanbul ignore next */
        cov_13nmfi9n1j().b[3][0]++;
        cov_13nmfi9n1j().s[24]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Folder is in trash',
          details: 'Cannot move items to a trashed folder'
        });
      } else
      /* istanbul ignore next */
      {
        cov_13nmfi9n1j().b[3][1]++;
      }
      // Check if user can add children (write permission)
      const canAddChildren =
      /* istanbul ignore next */
      (cov_13nmfi9n1j().s[25]++,
      /* istanbul ignore next */
      (cov_13nmfi9n1j().b[4][0]++, file.capabilities?.canAddChildren) ??
      /* istanbul ignore next */
      (cov_13nmfi9n1j().b[4][1]++, false));
      /* istanbul ignore next */
      cov_13nmfi9n1j().s[26]++;
      if (!canAddChildren) {
        /* istanbul ignore next */
        cov_13nmfi9n1j().b[5][0]++;
        cov_13nmfi9n1j().s[27]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Access denied',
          details: 'You do not have permission to add files to this folder'
        });
      } else
      /* istanbul ignore next */
      {
        cov_13nmfi9n1j().b[5][1]++;
      }
      cov_13nmfi9n1j().s[28]++;
      return _server.NextResponse.json({
        success: true,
        folder: {
          id: file.id,
          name: file.name,
          mimeType: file.mimeType,
          canAddChildren
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_13nmfi9n1j().s[29]++;
      // Handle specific Google Drive API errors
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_13nmfi9n1j().b[6][0]++;
        cov_13nmfi9n1j().s[30]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Folder not found',
          details: 'The folder ID does not exist or you do not have access to it'
        });
      } else
      /* istanbul ignore next */
      {
        cov_13nmfi9n1j().b[6][1]++;
      }
      cov_13nmfi9n1j().s[31]++;
      if (error.code === 403) {
        /* istanbul ignore next */
        cov_13nmfi9n1j().b[7][0]++;
        cov_13nmfi9n1j().s[32]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Access denied',
          details: 'You do not have permission to access this folder'
        });
      } else
      /* istanbul ignore next */
      {
        cov_13nmfi9n1j().b[7][1]++;
      }
      cov_13nmfi9n1j().s[33]++;
      if (error.code === 401) {
        /* istanbul ignore next */
        cov_13nmfi9n1j().b[8][0]++;
        cov_13nmfi9n1j().s[34]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Authentication required',
          details: 'Please reconnect your Google Drive account'
        });
      } else
      /* istanbul ignore next */
      {
        cov_13nmfi9n1j().b[8][1]++;
      }
      // Generic error for other cases
      cov_13nmfi9n1j().s[35]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Folder validation failed',
        details:
        /* istanbul ignore next */
        (cov_13nmfi9n1j().b[9][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_13nmfi9n1j().b[9][1]++, 'Unable to validate folder access')
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_13nmfi9n1j().s[36]++;
    return (0, _apiutils.handleApiError)(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,