22f365bd053eef2ab80de923e8462986
"use strict";

/* istanbul ignore next */
function cov_18h0jcl2tr() {
  var path = "/home/runner/workspace/src/app/api/drive/files/move/route.ts";
  var hash = "5c2d50fa424e8ab14a1de4d2ca1c19efe3ba89a7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/app/api/drive/files/move/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 66
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "9": {
        start: {
          line: 19,
          column: 29
        },
        end: {
          line: 19,
          column: 52
        }
      },
      "10": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "11": {
        start: {
          line: 22,
          column: 50
        },
        end: {
          line: 22,
          column: 54
        }
      },
      "12": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "13": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 28,
          column: 15
        }
      },
      "14": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "15": {
        start: {
          line: 31,
          column: 70
        },
        end: {
          line: 31,
          column: 77
        }
      },
      "16": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 34,
          column: 57
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "18": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "19": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "20": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "21": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "23": {
        start: {
          line: 46,
          column: 31
        },
        end: {
          line: 46,
          column: 78
        }
      },
      "24": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "25": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 57,
          column: 19
        }
      },
      "26": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 62
          },
          end: {
            line: 31,
            column: 63
          }
        },
        loc: {
          start: {
            line: 31,
            column: 70
          },
          end: {
            line: 31,
            column: 77
          }
        },
        line: 31
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 52
          },
          end: {
            line: 31,
            column: 78
          }
        }, {
          start: {
            line: 31,
            column: 81
          },
          end: {
            line: 33,
            column: 9
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 29
          }
        }, {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 31,
            column: 49
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 37
          }
        }, {
          start: {
            line: 34,
            column: 41
          },
          end: {
            line: 34,
            column: 57
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 20
          }
        }, {
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 44
          }
        }],
        line: 35
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 40
          }
        }, {
          start: {
            line: 56,
            column: 44
          },
          end: {
            line: 56,
            column: 57
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 18
          },
          end: {
            line: 64,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 64,
            column: 42
          }
        }, {
          start: {
            line: 64,
            column: 45
          },
          end: {
            line: 64,
            column: 53
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 68,
            column: 20
          },
          end: {
            line: 68,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 40
          },
          end: {
            line: 68,
            column: 46
          }
        }, {
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 68,
            column: 58
          }
        }],
        line: 68
      },
      "10": {
        loc: {
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 71,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 42
          },
          end: {
            line: 71,
            column: 45
          }
        }, {
          start: {
            line: 71,
            column: 48
          },
          end: {
            line: 71,
            column: 51
          }
        }],
        line: 71
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/app/api/drive/files/move/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError } from '@/lib/api-utils'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const driveService = authResult.driveService!\n    const body = await request.json()\n\n    // Handle both single and bulk operations\n    const { fileId, targetFolderId, items } = body\n\n    if (!targetFolderId) {\n      return NextResponse.json({ error: 'Target folder ID is required' }, { status: 400 })\n    }\n\n    // Determine operation type based on items array or single fileId\n    const fileIds = items && items.length > 0 ? items.map((item: any) => item.id) : [fileId]\n    const isBulkOperation = items && items.length > 1\n\n    if (!fileIds || fileIds.length === 0) {\n      return NextResponse.json({ error: 'File IDs are required' }, { status: 400 })\n    }\n\n    const results = []\n    const errors = []\n\n    for (const id of fileIds) {\n      try {\n        const result = await driveService.moveFile(id, targetFolderId)\n        results.push({ fileId: id, success: true, result })\n      } catch (error: any) {\n        errors.push({\n          fileId: id,\n          success: false,\n          error: error.message || 'Move failed',\n        })\n      }\n    }\n\n    const response = {\n      success: errors.length === 0,\n      processed: results.length,\n      failed: errors.length,\n      type: isBulkOperation ? 'bulk' : 'single',\n      operation: 'move',\n      targetFolderId,\n      results,\n      errors: errors.length > 0 ? errors : undefined,\n    }\n\n    return NextResponse.json(response, {\n      status: errors.length === 0 ? 200 : 207,\n    })\n  } catch (error: any) {\n    return handleApiError(error)\n  }\n}\n"],
      names: ["POST", "request", "authResult", "initDriveService", "success", "response", "driveService", "body", "json", "fileId", "targetFolderId", "items", "NextResponse", "error", "status", "fileIds", "length", "map", "item", "id", "isBulkOperation", "results", "errors", "result", "moveFile", "push", "message", "processed", "failed", "type", "operation", "undefined", "handleApiError"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;0BAEO;AAE1C,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,0BAAgB;QACzC,IAAI,CAACD,WAAWE,OAAO,EAAE;YACvB,OAAOF,WAAWG,QAAQ;QAC5B;QAEA,MAAMC,eAAeJ,WAAWI,YAAY;QAC5C,MAAMC,OAAO,MAAMN,QAAQO,IAAI;QAE/B,yCAAyC;QACzC,MAAM,EAAEC,MAAM,EAAEC,cAAc,EAAEC,KAAK,EAAE,GAAGJ;QAE1C,IAAI,CAACG,gBAAgB;YACnB,OAAOE,oBAAY,CAACJ,IAAI,CAAC;gBAAEK,OAAO;YAA+B,GAAG;gBAAEC,QAAQ;YAAI;QACpF;QAEA,iEAAiE;QACjE,MAAMC,UAAUJ,SAASA,MAAMK,MAAM,GAAG,IAAIL,MAAMM,GAAG,CAAC,CAACC,OAAcA,KAAKC,EAAE,IAAI;YAACV;SAAO;QACxF,MAAMW,kBAAkBT,SAASA,MAAMK,MAAM,GAAG;QAEhD,IAAI,CAACD,WAAWA,QAAQC,MAAM,KAAK,GAAG;YACpC,OAAOJ,oBAAY,CAACJ,IAAI,CAAC;gBAAEK,OAAO;YAAwB,GAAG;gBAAEC,QAAQ;YAAI;QAC7E;QAEA,MAAMO,UAAU,EAAE;QAClB,MAAMC,SAAS,EAAE;QAEjB,KAAK,MAAMH,MAAMJ,QAAS;YACxB,IAAI;gBACF,MAAMQ,SAAS,MAAMjB,aAAakB,QAAQ,CAACL,IAAIT;gBAC/CW,QAAQI,IAAI,CAAC;oBAAEhB,QAAQU;oBAAIf,SAAS;oBAAMmB;gBAAO;YACnD,EAAE,OAAOV,OAAY;gBACnBS,OAAOG,IAAI,CAAC;oBACVhB,QAAQU;oBACRf,SAAS;oBACTS,OAAOA,MAAMa,OAAO,IAAI;gBAC1B;YACF;QACF;QAEA,MAAMrB,WAAW;YACfD,SAASkB,OAAON,MAAM,KAAK;YAC3BW,WAAWN,QAAQL,MAAM;YACzBY,QAAQN,OAAON,MAAM;YACrBa,MAAMT,kBAAkB,SAAS;YACjCU,WAAW;YACXpB;YACAW;YACAC,QAAQA,OAAON,MAAM,GAAG,IAAIM,SAASS;QACvC;QAEA,OAAOnB,oBAAY,CAACJ,IAAI,CAACH,UAAU;YACjCS,QAAQQ,OAAON,MAAM,KAAK,IAAI,MAAM;QACtC;IACF,EAAE,OAAOH,OAAY;QACnB,OAAOmB,IAAAA,wBAAc,EAACnB;IACxB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5c2d50fa424e8ab14a1de4d2ca1c19efe3ba89a7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18h0jcl2tr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18h0jcl2tr();
cov_18h0jcl2tr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18h0jcl2tr().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_18h0jcl2tr().f[0]++;
    cov_18h0jcl2tr().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_18h0jcl2tr().s[3]++, require("next/server"));
const _apiutils =
/* istanbul ignore next */
(cov_18h0jcl2tr().s[4]++, require("../../../../../lib/api-utils"));
async function POST(request) {
  /* istanbul ignore next */
  cov_18h0jcl2tr().f[1]++;
  cov_18h0jcl2tr().s[5]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[6]++, await (0, _apiutils.initDriveService)());
    /* istanbul ignore next */
    cov_18h0jcl2tr().s[7]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_18h0jcl2tr().b[0][0]++;
      cov_18h0jcl2tr().s[8]++;
      return authResult.response;
    } else
    /* istanbul ignore next */
    {
      cov_18h0jcl2tr().b[0][1]++;
    }
    const driveService =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[9]++, authResult.driveService);
    const body =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[10]++, await request.json());
    // Handle both single and bulk operations
    const {
      fileId,
      targetFolderId,
      items
    } =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[11]++, body);
    /* istanbul ignore next */
    cov_18h0jcl2tr().s[12]++;
    if (!targetFolderId) {
      /* istanbul ignore next */
      cov_18h0jcl2tr().b[1][0]++;
      cov_18h0jcl2tr().s[13]++;
      return _server.NextResponse.json({
        error: 'Target folder ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_18h0jcl2tr().b[1][1]++;
    }
    // Determine operation type based on items array or single fileId
    const fileIds =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[14]++,
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[3][0]++, items) &&
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[3][1]++, items.length > 0) ?
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[2][0]++, items.map(item => {
      /* istanbul ignore next */
      cov_18h0jcl2tr().f[2]++;
      cov_18h0jcl2tr().s[15]++;
      return item.id;
    })) :
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[2][1]++, [fileId]));
    const isBulkOperation =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[16]++,
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[4][0]++, items) &&
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[4][1]++, items.length > 1));
    /* istanbul ignore next */
    cov_18h0jcl2tr().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[6][0]++, !fileIds) ||
    /* istanbul ignore next */
    (cov_18h0jcl2tr().b[6][1]++, fileIds.length === 0)) {
      /* istanbul ignore next */
      cov_18h0jcl2tr().b[5][0]++;
      cov_18h0jcl2tr().s[18]++;
      return _server.NextResponse.json({
        error: 'File IDs are required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_18h0jcl2tr().b[5][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[19]++, []);
    const errors =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[20]++, []);
    /* istanbul ignore next */
    cov_18h0jcl2tr().s[21]++;
    for (const id of fileIds) {
      /* istanbul ignore next */
      cov_18h0jcl2tr().s[22]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_18h0jcl2tr().s[23]++, await driveService.moveFile(id, targetFolderId));
        /* istanbul ignore next */
        cov_18h0jcl2tr().s[24]++;
        results.push({
          fileId: id,
          success: true,
          result
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_18h0jcl2tr().s[25]++;
        errors.push({
          fileId: id,
          success: false,
          error:
          /* istanbul ignore next */
          (cov_18h0jcl2tr().b[7][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_18h0jcl2tr().b[7][1]++, 'Move failed')
        });
      }
    }
    const response =
    /* istanbul ignore next */
    (cov_18h0jcl2tr().s[26]++, {
      success: errors.length === 0,
      processed: results.length,
      failed: errors.length,
      type: isBulkOperation ?
      /* istanbul ignore next */
      (cov_18h0jcl2tr().b[8][0]++, 'bulk') :
      /* istanbul ignore next */
      (cov_18h0jcl2tr().b[8][1]++, 'single'),
      operation: 'move',
      targetFolderId,
      results,
      errors: errors.length > 0 ?
      /* istanbul ignore next */
      (cov_18h0jcl2tr().b[9][0]++, errors) :
      /* istanbul ignore next */
      (cov_18h0jcl2tr().b[9][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_18h0jcl2tr().s[27]++;
    return _server.NextResponse.json(response, {
      status: errors.length === 0 ?
      /* istanbul ignore next */
      (cov_18h0jcl2tr().b[10][0]++, 200) :
      /* istanbul ignore next */
      (cov_18h0jcl2tr().b[10][1]++, 207)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_18h0jcl2tr().s[28]++;
    return (0, _apiutils.handleApiError)(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,