a29227fcf73310f67fbd8373a90b06a7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../health/route");
describe('/api/health', ()=>{
    it('should return health status', async ()=>{
        const response = await (0, _route.GET)();
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data).toEqual({
            status: 'healthy',
            timestamp: expect.any(String),
            uptime: expect.any(Number)
        });
    });
    it('should return valid timestamp', async ()=>{
        const response = await (0, _route.GET)();
        const data = await response.json();
        const timestamp = new Date(data.timestamp);
        expect(timestamp).toBeInstanceOf(Date);
        expect(timestamp.getTime()).not.toBeNaN();
    });
    it('should return positive uptime', async ()=>{
        const response = await (0, _route.GET)();
        const data = await response.json();
        expect(data.uptime).toBeGreaterThan(0);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvX190ZXN0c19fL2hlYWx0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgR0VUIH0gZnJvbSAnLi4vaGVhbHRoL3JvdXRlJ1xuXG5kZXNjcmliZSgnL2FwaS9oZWFsdGgnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIGhlYWx0aCBzdGF0dXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQoKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKVxuICAgIGV4cGVjdChkYXRhKS50b0VxdWFsKHtcbiAgICAgIHN0YXR1czogJ2hlYWx0aHknLFxuICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICB1cHRpbWU6IGV4cGVjdC5hbnkoTnVtYmVyKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdmFsaWQgdGltZXN0YW1wJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKClcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShkYXRhLnRpbWVzdGFtcClcbiAgICBleHBlY3QodGltZXN0YW1wKS50b0JlSW5zdGFuY2VPZihEYXRlKVxuICAgIGV4cGVjdCh0aW1lc3RhbXAuZ2V0VGltZSgpKS5ub3QudG9CZU5hTigpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gcG9zaXRpdmUgdXB0aW1lJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKClcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBleHBlY3QoZGF0YS51cHRpbWUpLnRvQmVHcmVhdGVyVGhhbigwKVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmVzcG9uc2UiLCJHRVQiLCJkYXRhIiwianNvbiIsImV4cGVjdCIsInN0YXR1cyIsInRvQmUiLCJ0b0VxdWFsIiwidGltZXN0YW1wIiwiYW55IiwiU3RyaW5nIiwidXB0aW1lIiwiTnVtYmVyIiwiRGF0ZSIsInRvQmVJbnN0YW5jZU9mIiwiZ2V0VGltZSIsIm5vdCIsInRvQmVOYU4iLCJ0b0JlR3JlYXRlclRoYW4iXSwibWFwcGluZ3MiOiI7Ozs7dUJBQ29CO0FBRXBCQSxTQUFTLGVBQWU7SUFDdEJDLEdBQUcsK0JBQStCO1FBQ2hDLE1BQU1DLFdBQVcsTUFBTUMsSUFBQUEsVUFBRztRQUMxQixNQUFNQyxPQUFPLE1BQU1GLFNBQVNHLElBQUk7UUFFaENDLE9BQU9KLFNBQVNLLE1BQU0sRUFBRUMsSUFBSSxDQUFDO1FBQzdCRixPQUFPRixNQUFNSyxPQUFPLENBQUM7WUFDbkJGLFFBQVE7WUFDUkcsV0FBV0osT0FBT0ssR0FBRyxDQUFDQztZQUN0QkMsUUFBUVAsT0FBT0ssR0FBRyxDQUFDRztRQUNyQjtJQUNGO0lBRUFiLEdBQUcsaUNBQWlDO1FBQ2xDLE1BQU1DLFdBQVcsTUFBTUMsSUFBQUEsVUFBRztRQUMxQixNQUFNQyxPQUFPLE1BQU1GLFNBQVNHLElBQUk7UUFFaEMsTUFBTUssWUFBWSxJQUFJSyxLQUFLWCxLQUFLTSxTQUFTO1FBQ3pDSixPQUFPSSxXQUFXTSxjQUFjLENBQUNEO1FBQ2pDVCxPQUFPSSxVQUFVTyxPQUFPLElBQUlDLEdBQUcsQ0FBQ0MsT0FBTztJQUN6QztJQUVBbEIsR0FBRyxpQ0FBaUM7UUFDbEMsTUFBTUMsV0FBVyxNQUFNQyxJQUFBQSxVQUFHO1FBQzFCLE1BQU1DLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtRQUVoQ0MsT0FBT0YsS0FBS1MsTUFBTSxFQUFFTyxlQUFlLENBQUM7SUFDdEM7QUFDRiJ9