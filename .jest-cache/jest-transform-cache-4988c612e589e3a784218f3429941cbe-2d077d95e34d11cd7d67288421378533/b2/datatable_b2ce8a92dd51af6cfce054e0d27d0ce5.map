{"version":3,"names":["DataTable","table","columns","dataIds","cov_xnr4lkt7e","b","dndEnabled","handleDragEnd","sensors","sortableId","f","tableContent","s","_jsxruntime","jsxs","_table","Table","jsx","TableHeader","className","getHeaderGroups","map","headerGroup","TableRow","headers","header","TableHead","colSpan","isPlaceholder","_reacttable","flexRender","column","columnDef","getContext","id","TableBody","getRowModel","rows","length","_sortable","SortableContext","items","strategy","verticalListSortingStrategy","row","_draggablerow","DraggableRow","getIsSelected","getVisibleCells","cell","TableCell","_core","DndContext","collisionDetection","closestCenter","modifiers","_modifiers","restrictToVerticalAxis","onDragEnd"],"sources":["/home/runner/workspace/src/components/data-table/data-table.tsx"],"sourcesContent":["import { DndContext, closestCenter, type UniqueIdentifier, type SensorDescriptor } from '@dnd-kit/core'\nimport { restrictToVerticalAxis } from '@dnd-kit/modifiers'\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { ColumnDef, flexRender, type Table as TanStackTable } from '@tanstack/react-table'\n\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\n\nimport { DraggableRow } from './draggable-row'\n\ninterface DataTableProps<TData, TValue> {\n  table: TanStackTable<TData>\n  columns: ColumnDef<TData, TValue>[]\n  dataIds?: UniqueIdentifier[]\n  dndEnabled?: boolean\n  handleDragEnd?: () => void\n  sensors?: SensorDescriptor<any>[]\n  sortableId?: string\n}\n\nexport function DataTable<TData, TValue>({\n  table,\n  columns,\n  dataIds = [],\n  dndEnabled = false,\n  handleDragEnd,\n  sensors,\n  sortableId,\n}: DataTableProps<TData, TValue>) {\n  const tableContent = (\n    <Table>\n      <TableHeader className=\"bg-muted sticky top-0 z-10\">\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              return (\n                <TableHead key={header.id} colSpan={header.colSpan}>\n                  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                </TableHead>\n              )\n            })}\n          </TableRow>\n        ))}\n      </TableHeader>\n      <TableBody className=\"**:data-[slot=table-cell]:first:w-8\">\n        {table.getRowModel().rows.length ? (\n          dndEnabled ? (\n            <SortableContext items={dataIds} strategy={verticalListSortingStrategy}>\n              {table.getRowModel().rows.map(row => (\n                <DraggableRow key={row.id} row={row} />\n              ))}\n            </SortableContext>\n          ) : (\n            table.getRowModel().rows.map(row => (\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\n                {row.getVisibleCells().map(cell => (\n                  <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                ))}\n              </TableRow>\n            ))\n          )\n        ) : (\n          <TableRow>\n            <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n              No results.\n            </TableCell>\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  )\n\n  if (dndEnabled) {\n    return (\n      <DndContext\n        collisionDetection={closestCenter}\n        modifiers={[restrictToVerticalAxis]}\n        {...(handleDragEnd && { onDragEnd: handleDragEnd })}\n        {...(sensors && { sensors })}\n        {...(sortableId && { id: sortableId })}\n      >\n        {tableContent}\n      </DndContext>\n    )\n  }\n\n  return tableContent\n}\n"],"mappings":"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","ignoreList":[]}