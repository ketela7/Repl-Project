{"version":3,"sources":["/home/runner/workspace/src/app/api/__tests__/health.test.ts"],"sourcesContent":["\nimport { GET } from '../health/route'\n\ndescribe('/api/health', () => {\n  it('should return health status', async () => {\n    const response = await GET()\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data).toEqual({\n      status: 'healthy',\n      timestamp: expect.any(String),\n      uptime: expect.any(Number)\n    })\n  })\n\n  it('should return valid timestamp', async () => {\n    const response = await GET()\n    const data = await response.json()\n\n    const timestamp = new Date(data.timestamp)\n    expect(timestamp).toBeInstanceOf(Date)\n    expect(timestamp.getTime()).not.toBeNaN()\n  })\n\n  it('should return positive uptime', async () => {\n    const response = await GET()\n    const data = await response.json()\n\n    expect(data.uptime).toBeGreaterThan(0)\n  })\n})\n"],"names":["describe","it","response","GET","data","json","expect","status","toBe","toEqual","timestamp","any","String","uptime","Number","Date","toBeInstanceOf","getTime","not","toBeNaN","toBeGreaterThan"],"mappings":";;;;uBACoB;AAEpBA,SAAS,eAAe;IACtBC,GAAG,+BAA+B;QAChC,MAAMC,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;QAEhCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOF,MAAMK,OAAO,CAAC;YACnBF,QAAQ;YACRG,WAAWJ,OAAOK,GAAG,CAACC;YACtBC,QAAQP,OAAOK,GAAG,CAACG;QACrB;IACF;IAEAb,GAAG,iCAAiC;QAClC,MAAMC,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;QAEhC,MAAMK,YAAY,IAAIK,KAAKX,KAAKM,SAAS;QACzCJ,OAAOI,WAAWM,cAAc,CAACD;QACjCT,OAAOI,UAAUO,OAAO,IAAIC,GAAG,CAACC,OAAO;IACzC;IAEAlB,GAAG,iCAAiC;QAClC,MAAMC,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;QAEhCC,OAAOF,KAAKS,MAAM,EAAEO,eAAe,CAAC;IACtC;AACF"}