5376eee36d9d99956e9aa49b63cd9d04
"use strict";

/* istanbul ignore next */
function cov_3awgc3lyh() {
  var path = "/home/runner/workspace/src/lib/utils.ts";
  var hash = "0814edd4c9854a65f2f025e1f04ff14c8d4c0ca6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/src/lib/utils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 18
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 30
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 27
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 25
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 28
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 28
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 26
        }
      },
      "13": {
        start: {
          line: 40,
          column: 14
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "14": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 48
        }
      },
      "15": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 33
        }
      },
      "16": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "17": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 50,
          column: 7
        }
      },
      "18": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 56,
          column: 7
        }
      },
      "19": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "20": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 68,
          column: 2
        }
      },
      "21": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 67,
          column: 12
        }
      },
      "22": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 73,
          column: 2
        }
      },
      "23": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 72,
          column: 12
        }
      },
      "24": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 78,
          column: 2
        }
      },
      "25": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 77,
          column: 12
        }
      },
      "26": {
        start: {
          line: 79,
          column: 0
        },
        end: {
          line: 81,
          column: 2
        }
      },
      "27": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 30
        }
      },
      "28": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 84,
          column: 2
        }
      },
      "29": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 44
        }
      },
      "30": {
        start: {
          line: 85,
          column: 0
        },
        end: {
          line: 87,
          column: 2
        }
      },
      "31": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 86
        }
      },
      "32": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 90,
          column: 2
        }
      },
      "33": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 42
        }
      },
      "34": {
        start: {
          line: 91,
          column: 0
        },
        end: {
          line: 95,
          column: 2
        }
      },
      "35": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 94,
          column: 7
        }
      },
      "36": {
        start: {
          line: 96,
          column: 0
        },
        end: {
          line: 100,
          column: 2
        }
      },
      "37": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 99,
          column: 7
        }
      },
      "38": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 105,
          column: 2
        }
      },
      "39": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 104,
          column: 7
        }
      },
      "40": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 110,
          column: 7
        }
      },
      "41": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "42": {
        start: {
          line: 114,
          column: 21
        },
        end: {
          line: 114,
          column: 41
        }
      },
      "43": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "44": {
        start: {
          line: 115,
          column: 35
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "45": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 123,
          column: 24
        }
      },
      "46": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 30
        }
      },
      "47": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 129,
          column: 48
        }
      },
      "48": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 90
        }
      },
      "49": {
        start: {
          line: 132,
          column: 39
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "50": {
        start: {
          line: 134,
          column: 19
        },
        end: {
          line: 139,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 17
          }
        },
        loc: {
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 18,
            column: 25
          }
        },
        loc: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 21,
            column: 21
          }
        },
        loc: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 16
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 19
          }
        },
        loc: {
          start: {
            line: 30,
            column: 29
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 33,
            column: 19
          }
        },
        loc: {
          start: {
            line: 33,
            column: 29
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 17
          }
        },
        loc: {
          start: {
            line: 36,
            column: 27
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "cn",
        decl: {
          start: {
            line: 43,
            column: 9
          },
          end: {
            line: 43,
            column: 11
          }
        },
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 43
      },
      "11": {
        name: "successToast",
        decl: {
          start: {
            line: 46,
            column: 9
          },
          end: {
            line: 46,
            column: 21
          }
        },
        loc: {
          start: {
            line: 46,
            column: 44
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 46
      },
      "12": {
        name: "errorToast",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 19
          }
        },
        loc: {
          start: {
            line: 52,
            column: 42
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 52
      },
      "13": {
        name: "loadingToast",
        decl: {
          start: {
            line: 58,
            column: 9
          },
          end: {
            line: 58,
            column: 21
          }
        },
        loc: {
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 58
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 22
          }
        },
        loc: {
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 64
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 24
          }
        },
        loc: {
          start: {
            line: 69,
            column: 38
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 69
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 74,
            column: 21
          },
          end: {
            line: 74,
            column: 22
          }
        },
        loc: {
          start: {
            line: 74,
            column: 36
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 74
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 24
          }
        },
        loc: {
          start: {
            line: 79,
            column: 29
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 79
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 24
          }
        },
        loc: {
          start: {
            line: 82,
            column: 43
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 82
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 85,
            column: 22
          },
          end: {
            line: 85,
            column: 23
          }
        },
        loc: {
          start: {
            line: 85,
            column: 31
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 85
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 88,
            column: 22
          }
        },
        loc: {
          start: {
            line: 88,
            column: 41
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 88
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 91,
            column: 22
          },
          end: {
            line: 91,
            column: 23
          }
        },
        loc: {
          start: {
            line: 91,
            column: 42
          },
          end: {
            line: 95,
            column: 1
          }
        },
        line: 91
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 96,
            column: 31
          },
          end: {
            line: 96,
            column: 32
          }
        },
        loc: {
          start: {
            line: 96,
            column: 35
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 96
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 31
          }
        },
        loc: {
          start: {
            line: 101,
            column: 34
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 101
      },
      "24": {
        name: "infoToast",
        decl: {
          start: {
            line: 106,
            column: 9
          },
          end: {
            line: 106,
            column: 18
          }
        },
        loc: {
          start: {
            line: 106,
            column: 41
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 106
      },
      "25": {
        name: "formatFileTime",
        decl: {
          start: {
            line: 112,
            column: 9
          },
          end: {
            line: 112,
            column: 23
          }
        },
        loc: {
          start: {
            line: 112,
            column: 46
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 112
      },
      "26": {
        name: "formatCreationTime",
        decl: {
          start: {
            line: 128,
            column: 9
          },
          end: {
            line: 128,
            column: 27
          }
        },
        loc: {
          start: {
            line: 128,
            column: 50
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 128
      },
      "27": {
        name: "getInitials",
        decl: {
          start: {
            line: 131,
            column: 9
          },
          end: {
            line: 131,
            column: 20
          }
        },
        loc: {
          start: {
            line: 131,
            column: 27
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 131
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 132,
            column: 31
          },
          end: {
            line: 132,
            column: 32
          }
        },
        loc: {
          start: {
            line: 132,
            column: 39
          },
          end: {
            line: 132,
            column: 53
          }
        },
        line: 132
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 65,
            column: 42
          },
          end: {
            line: 67,
            column: 10
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 47
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 10
          }
        }],
        line: 65
      },
      "1": {
        loc: {
          start: {
            line: 70,
            column: 35
          },
          end: {
            line: 72,
            column: 10
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 40
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 10
          }
        }],
        line: 70
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 33
          },
          end: {
            line: 77,
            column: 10
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 38
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 10
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 62
          },
          end: {
            line: 86,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 74
          },
          end: {
            line: 86,
            column: 77
          }
        }, {
          start: {
            line: 86,
            column: 80
          },
          end: {
            line: 86,
            column: 82
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 115,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 115,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "5": {
        loc: {
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 122,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 122,
            column: 30
          }
        }, {
          start: {
            line: 122,
            column: 34
          },
          end: {
            line: 122,
            column: 39
          }
        }],
        line: 122
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/runner/workspace/src/lib/utils.ts"],
      sourcesContent: ["import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { toast } from 'sonner'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function successToast(message: string, description?: string) {\n  toast.success(message, {\n    description,\n    duration: 4000,\n  })\n}\n\nexport function errorToast(message: string, description?: string) {\n  toast.error(message, {\n    description,\n    duration: 6000,\n  })\n}\n\nexport function loadingToast(message: string, description?: string) {\n  return toast.loading(message, {\n    description,\n  })\n}\n\n// Extended toast utility functions\nloadingToast.start = (message: string, id?: string) => {\n  return toast.loading(message, id ? { id } : {})\n}\n\nloadingToast.success = (message: string, id?: string) => {\n  toast.success(message, id ? { id } : {})\n}\n\nloadingToast.error = (message: string, id?: string) => {\n  toast.error(message, id ? { id } : {})\n}\n\nloadingToast.dismiss = (id?: string) => {\n  toast.dismiss(id)\n}\n\nsuccessToast.generic = (message: string, options?: any) => {\n  toast.success(message, options)\n}\n\nsuccessToast.shared = (count: number) => {\n  toast.success(`Successfully shared ${count} item${count > 1 ? 's' : ''}`)\n}\n\nerrorToast.generic = (message: string, options?: any) => {\n  toast.error(message, options)\n}\n\nerrorToast.apiError = (message: string, details?: string) => {\n  toast.error(message, { description: details })\n}\n\nerrorToast.driveAccessDenied = () => {\n  toast.error('Google Drive access denied', {\n    description: 'Please reconnect your Google Drive account',\n  })\n}\n\nerrorToast.permissionDenied = () => {\n  toast.error('Permission denied', {\n    description: 'You do not have permission to perform this action',\n  })\n}\n\nexport function infoToast(message: string, description?: string) {\n  toast.info(message, {\n    description,\n    duration: 4000,\n  })\n}\n\nexport function formatFileTime(dateString: string, timezone?: string): string {\n  try {\n    const date = new Date(dateString)\n    if (isNaN(date.getTime())) return 'Invalid date'\n\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: timezone ?? 'UTC',\n    }).format(date)\n  } catch {\n    return 'Invalid date'\n  }\n}\n\nexport function formatCreationTime(dateString: string, timezone?: string): string {\n  return formatFileTime(dateString, timezone)\n}\n\nexport function getInitials(name: string): string {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n}\n\nexport const toastUtils = {\n  success: successToast,\n  error: errorToast,\n  loading: loadingToast,\n  info: infoToast,\n}\n"],
      names: ["cn", "errorToast", "formatCreationTime", "formatFileTime", "getInitials", "infoToast", "loadingToast", "successToast", "toastUtils", "inputs", "twMerge", "clsx", "message", "description", "toast", "success", "duration", "error", "loading", "start", "id", "dismiss", "generic", "options", "shared", "count", "apiError", "details", "driveAccessDenied", "permissionDenied", "info", "dateString", "timezone", "date", "Date", "isNaN", "getTime", "Intl", "DateTimeFormat", "year", "month", "day", "hour", "minute", "timeZone", "format", "name", "split", "map", "word", "charAt", "join", "toUpperCase", "slice"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0814edd4c9854a65f2f025e1f04ff14c8d4c0ca6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3awgc3lyh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3awgc3lyh();
cov_3awgc3lyh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[0]++;
  cov_3awgc3lyh().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_3awgc3lyh().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_3awgc3lyh().s[3]++;
_export(exports, {
  cn: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[1]++;
    cov_3awgc3lyh().s[4]++;
    return cn;
  },
  errorToast: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[2]++;
    cov_3awgc3lyh().s[5]++;
    return errorToast;
  },
  formatCreationTime: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[3]++;
    cov_3awgc3lyh().s[6]++;
    return formatCreationTime;
  },
  formatFileTime: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[4]++;
    cov_3awgc3lyh().s[7]++;
    return formatFileTime;
  },
  getInitials: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[5]++;
    cov_3awgc3lyh().s[8]++;
    return getInitials;
  },
  infoToast: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[6]++;
    cov_3awgc3lyh().s[9]++;
    return infoToast;
  },
  loadingToast: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[7]++;
    cov_3awgc3lyh().s[10]++;
    return loadingToast;
  },
  successToast: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[8]++;
    cov_3awgc3lyh().s[11]++;
    return successToast;
  },
  toastUtils: function () {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[9]++;
    cov_3awgc3lyh().s[12]++;
    return toastUtils;
  }
});
const _clsx =
/* istanbul ignore next */
(cov_3awgc3lyh().s[13]++, require("clsx"));
const _tailwindmerge =
/* istanbul ignore next */
(cov_3awgc3lyh().s[14]++, require("tailwind-merge"));
const _sonner =
/* istanbul ignore next */
(cov_3awgc3lyh().s[15]++, require("sonner"));
function cn(...inputs) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[10]++;
  cov_3awgc3lyh().s[16]++;
  return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function successToast(message, description) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[11]++;
  cov_3awgc3lyh().s[17]++;
  _sonner.toast.success(message, {
    description,
    duration: 4000
  });
}
function errorToast(message, description) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[12]++;
  cov_3awgc3lyh().s[18]++;
  _sonner.toast.error(message, {
    description,
    duration: 6000
  });
}
function loadingToast(message, description) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[13]++;
  cov_3awgc3lyh().s[19]++;
  return _sonner.toast.loading(message, {
    description
  });
}
// Extended toast utility functions
/* istanbul ignore next */
cov_3awgc3lyh().s[20]++;
loadingToast.start = (message, id) => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[14]++;
  cov_3awgc3lyh().s[21]++;
  return _sonner.toast.loading(message, id ?
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[0][0]++, {
    id
  }) :
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[0][1]++, {}));
};
/* istanbul ignore next */
cov_3awgc3lyh().s[22]++;
loadingToast.success = (message, id) => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[15]++;
  cov_3awgc3lyh().s[23]++;
  _sonner.toast.success(message, id ?
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[1][0]++, {
    id
  }) :
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[1][1]++, {}));
};
/* istanbul ignore next */
cov_3awgc3lyh().s[24]++;
loadingToast.error = (message, id) => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[16]++;
  cov_3awgc3lyh().s[25]++;
  _sonner.toast.error(message, id ?
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[2][0]++, {
    id
  }) :
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[2][1]++, {}));
};
/* istanbul ignore next */
cov_3awgc3lyh().s[26]++;
loadingToast.dismiss = id => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[17]++;
  cov_3awgc3lyh().s[27]++;
  _sonner.toast.dismiss(id);
};
/* istanbul ignore next */
cov_3awgc3lyh().s[28]++;
successToast.generic = (message, options) => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[18]++;
  cov_3awgc3lyh().s[29]++;
  _sonner.toast.success(message, options);
};
/* istanbul ignore next */
cov_3awgc3lyh().s[30]++;
successToast.shared = count => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[19]++;
  cov_3awgc3lyh().s[31]++;
  _sonner.toast.success(`Successfully shared ${count} item${count > 1 ?
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[3][0]++, 's') :
  /* istanbul ignore next */
  (cov_3awgc3lyh().b[3][1]++, '')}`);
};
/* istanbul ignore next */
cov_3awgc3lyh().s[32]++;
errorToast.generic = (message, options) => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[20]++;
  cov_3awgc3lyh().s[33]++;
  _sonner.toast.error(message, options);
};
/* istanbul ignore next */
cov_3awgc3lyh().s[34]++;
errorToast.apiError = (message, details) => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[21]++;
  cov_3awgc3lyh().s[35]++;
  _sonner.toast.error(message, {
    description: details
  });
};
/* istanbul ignore next */
cov_3awgc3lyh().s[36]++;
errorToast.driveAccessDenied = () => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[22]++;
  cov_3awgc3lyh().s[37]++;
  _sonner.toast.error('Google Drive access denied', {
    description: 'Please reconnect your Google Drive account'
  });
};
/* istanbul ignore next */
cov_3awgc3lyh().s[38]++;
errorToast.permissionDenied = () => {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[23]++;
  cov_3awgc3lyh().s[39]++;
  _sonner.toast.error('Permission denied', {
    description: 'You do not have permission to perform this action'
  });
};
function infoToast(message, description) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[24]++;
  cov_3awgc3lyh().s[40]++;
  _sonner.toast.info(message, {
    description,
    duration: 4000
  });
}
function formatFileTime(dateString, timezone) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[25]++;
  cov_3awgc3lyh().s[41]++;
  try {
    const date =
    /* istanbul ignore next */
    (cov_3awgc3lyh().s[42]++, new Date(dateString));
    /* istanbul ignore next */
    cov_3awgc3lyh().s[43]++;
    if (isNaN(date.getTime())) {
      /* istanbul ignore next */
      cov_3awgc3lyh().b[4][0]++;
      cov_3awgc3lyh().s[44]++;
      return 'Invalid date';
    } else
    /* istanbul ignore next */
    {
      cov_3awgc3lyh().b[4][1]++;
    }
    cov_3awgc3lyh().s[45]++;
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZone:
      /* istanbul ignore next */
      (cov_3awgc3lyh().b[5][0]++, timezone) ??
      /* istanbul ignore next */
      (cov_3awgc3lyh().b[5][1]++, 'UTC')
    }).format(date);
  } catch {
    /* istanbul ignore next */
    cov_3awgc3lyh().s[46]++;
    return 'Invalid date';
  }
}
function formatCreationTime(dateString, timezone) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[26]++;
  cov_3awgc3lyh().s[47]++;
  return formatFileTime(dateString, timezone);
}
function getInitials(name) {
  /* istanbul ignore next */
  cov_3awgc3lyh().f[27]++;
  cov_3awgc3lyh().s[48]++;
  return name.split(' ').map(word => {
    /* istanbul ignore next */
    cov_3awgc3lyh().f[28]++;
    cov_3awgc3lyh().s[49]++;
    return word.charAt(0);
  }).join('').toUpperCase().slice(0, 2);
}
const toastUtils =
/* istanbul ignore next */
(cov_3awgc3lyh().s[50]++, {
  success: successToast,
  error: errorToast,
  loading: loadingToast,
  info: infoToast
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,