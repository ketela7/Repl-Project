a8abc7dfb1f35038d9925a679d0980ce
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _apiutils = require("../../../../../lib/api-utils");
async function POST(request) {
    try {
        const authResult = await (0, _apiutils.initDriveService)();
        if (!authResult.success) {
            return authResult.response;
        }
        const { driveService } = authResult;
        const body = await request.json();
        // Handle both single and bulk operations
        const { fileId, items } = body;
        // Determine operation type based on items array or single fileId
        const fileIds = items && items.length > 0 ? items.map((item)=>item.id) : [
            fileId
        ];
        const isBulkOperation = items && items.length > 1;
        if (!fileIds || fileIds.length === 0) {
            return _server.NextResponse.json({
                error: 'File IDs are required'
            }, {
                status: 400
            });
        }
        const results = [];
        const errors = [];
        for (const id of fileIds){
            try {
                const result = await driveService.moveToTrash(id);
                results.push({
                    fileId: id,
                    success: true,
                    result
                });
            } catch (error) {
                errors.push({
                    fileId: id,
                    success: false,
                    error: error.message || 'Trash operation failed'
                });
            }
        }
        const response = {
            success: errors.length === 0,
            processed: results.length,
            failed: errors.length,
            type: isBulkOperation ? 'bulk' : 'single',
            operation: 'trash',
            results,
            errors: errors.length > 0 ? errors : undefined
        };
        return _server.NextResponse.json(response, {
            status: errors.length === 0 ? 200 : 207
        });
    } catch (error) {
        return (0, _apiutils.handleApiError)(error);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2FwcC9hcGkvZHJpdmUvZmlsZXMvdHJhc2gvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuXG5pbXBvcnQgeyBpbml0RHJpdmVTZXJ2aWNlLCBoYW5kbGVBcGlFcnJvciB9IGZyb20gJ0AvbGliL2FwaS11dGlscydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gYXdhaXQgaW5pdERyaXZlU2VydmljZSgpXG4gICAgaWYgKCFhdXRoUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiBhdXRoUmVzdWx0LnJlc3BvbnNlIVxuICAgIH1cblxuICAgIGNvbnN0IHsgZHJpdmVTZXJ2aWNlIH0gPSBhdXRoUmVzdWx0XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG5cbiAgICAvLyBIYW5kbGUgYm90aCBzaW5nbGUgYW5kIGJ1bGsgb3BlcmF0aW9uc1xuICAgIGNvbnN0IHsgZmlsZUlkLCBpdGVtcyB9ID0gYm9keVxuXG4gICAgLy8gRGV0ZXJtaW5lIG9wZXJhdGlvbiB0eXBlIGJhc2VkIG9uIGl0ZW1zIGFycmF5IG9yIHNpbmdsZSBmaWxlSWRcbiAgICBjb25zdCBmaWxlSWRzID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zLm1hcCgoaXRlbTogYW55KSA9PiBpdGVtLmlkKSA6IFtmaWxlSWRdXG4gICAgY29uc3QgaXNCdWxrT3BlcmF0aW9uID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMVxuXG4gICAgaWYgKCFmaWxlSWRzIHx8IGZpbGVJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZpbGUgSURzIGFyZSByZXF1aXJlZCcgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXVxuICAgIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IGlkIG9mIGZpbGVJZHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRyaXZlU2VydmljZS5tb3ZlVG9UcmFzaChpZClcbiAgICAgICAgcmVzdWx0cy5wdXNoKHsgZmlsZUlkOiBpZCwgc3VjY2VzczogdHJ1ZSwgcmVzdWx0IH0pXG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICBmaWxlSWQ6IGlkLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdUcmFzaCBvcGVyYXRpb24gZmFpbGVkJyxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgIHN1Y2Nlc3M6IGVycm9ycy5sZW5ndGggPT09IDAsXG4gICAgICBwcm9jZXNzZWQ6IHJlc3VsdHMubGVuZ3RoLFxuICAgICAgZmFpbGVkOiBlcnJvcnMubGVuZ3RoLFxuICAgICAgdHlwZTogaXNCdWxrT3BlcmF0aW9uID8gJ2J1bGsnIDogJ3NpbmdsZScsXG4gICAgICBvcGVyYXRpb246ICd0cmFzaCcsXG4gICAgICByZXN1bHRzLFxuICAgICAgZXJyb3JzOiBlcnJvcnMubGVuZ3RoID4gMCA/IGVycm9ycyA6IHVuZGVmaW5lZCxcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzcG9uc2UsIHtcbiAgICAgIHN0YXR1czogZXJyb3JzLmxlbmd0aCA9PT0gMCA/IDIwMCA6IDIwNyxcbiAgICB9KVxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgcmV0dXJuIGhhbmRsZUFwaUVycm9yKGVycm9yKVxuICB9XG59XG4iXSwibmFtZXMiOlsiUE9TVCIsInJlcXVlc3QiLCJhdXRoUmVzdWx0IiwiaW5pdERyaXZlU2VydmljZSIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsImRyaXZlU2VydmljZSIsImJvZHkiLCJqc29uIiwiZmlsZUlkIiwiaXRlbXMiLCJmaWxlSWRzIiwibGVuZ3RoIiwibWFwIiwiaXRlbSIsImlkIiwiaXNCdWxrT3BlcmF0aW9uIiwiTmV4dFJlc3BvbnNlIiwiZXJyb3IiLCJzdGF0dXMiLCJyZXN1bHRzIiwiZXJyb3JzIiwicmVzdWx0IiwibW92ZVRvVHJhc2giLCJwdXNoIiwibWVzc2FnZSIsInByb2Nlc3NlZCIsImZhaWxlZCIsInR5cGUiLCJvcGVyYXRpb24iLCJ1bmRlZmluZWQiLCJoYW5kbGVBcGlFcnJvciJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFJc0JBOzs7ZUFBQUE7Ozt3QkFKb0I7MEJBRU87QUFFMUMsZUFBZUEsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLGFBQWEsTUFBTUMsSUFBQUEsMEJBQWdCO1FBQ3pDLElBQUksQ0FBQ0QsV0FBV0UsT0FBTyxFQUFFO1lBQ3ZCLE9BQU9GLFdBQVdHLFFBQVE7UUFDNUI7UUFFQSxNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHSjtRQUN6QixNQUFNSyxPQUFPLE1BQU1OLFFBQVFPLElBQUk7UUFFL0IseUNBQXlDO1FBQ3pDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0g7UUFFMUIsaUVBQWlFO1FBQ2pFLE1BQU1JLFVBQVVELFNBQVNBLE1BQU1FLE1BQU0sR0FBRyxJQUFJRixNQUFNRyxHQUFHLENBQUMsQ0FBQ0MsT0FBY0EsS0FBS0MsRUFBRSxJQUFJO1lBQUNOO1NBQU87UUFDeEYsTUFBTU8sa0JBQWtCTixTQUFTQSxNQUFNRSxNQUFNLEdBQUc7UUFFaEQsSUFBSSxDQUFDRCxXQUFXQSxRQUFRQyxNQUFNLEtBQUssR0FBRztZQUNwQyxPQUFPSyxvQkFBWSxDQUFDVCxJQUFJLENBQUM7Z0JBQUVVLE9BQU87WUFBd0IsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQzdFO1FBRUEsTUFBTUMsVUFBVSxFQUFFO1FBQ2xCLE1BQU1DLFNBQVMsRUFBRTtRQUVqQixLQUFLLE1BQU1OLE1BQU1KLFFBQVM7WUFDeEIsSUFBSTtnQkFDRixNQUFNVyxTQUFTLE1BQU1oQixhQUFhaUIsV0FBVyxDQUFDUjtnQkFDOUNLLFFBQVFJLElBQUksQ0FBQztvQkFBRWYsUUFBUU07b0JBQUlYLFNBQVM7b0JBQU1rQjtnQkFBTztZQUNuRCxFQUFFLE9BQU9KLE9BQVk7Z0JBQ25CRyxPQUFPRyxJQUFJLENBQUM7b0JBQ1ZmLFFBQVFNO29CQUNSWCxTQUFTO29CQUNUYyxPQUFPQSxNQUFNTyxPQUFPLElBQUk7Z0JBQzFCO1lBQ0Y7UUFDRjtRQUVBLE1BQU1wQixXQUFXO1lBQ2ZELFNBQVNpQixPQUFPVCxNQUFNLEtBQUs7WUFDM0JjLFdBQVdOLFFBQVFSLE1BQU07WUFDekJlLFFBQVFOLE9BQU9ULE1BQU07WUFDckJnQixNQUFNWixrQkFBa0IsU0FBUztZQUNqQ2EsV0FBVztZQUNYVDtZQUNBQyxRQUFRQSxPQUFPVCxNQUFNLEdBQUcsSUFBSVMsU0FBU1M7UUFDdkM7UUFFQSxPQUFPYixvQkFBWSxDQUFDVCxJQUFJLENBQUNILFVBQVU7WUFDakNjLFFBQVFFLE9BQU9ULE1BQU0sS0FBSyxJQUFJLE1BQU07UUFDdEM7SUFDRixFQUFFLE9BQU9NLE9BQVk7UUFDbkIsT0FBT2EsSUFBQUEsd0JBQWMsRUFBQ2I7SUFDeEI7QUFDRiJ9