{"version":3,"sources":["/home/runner/workspace/src/lib/google-drive/__tests__/utils.test.ts"],"sourcesContent":["\nimport { \n  formatFileSize, \n  getFileExtension, \n  isImageFile, \n  isVideoFile, \n  getFileTypeCategory \n} from '../utils'\n\ndescribe('Google Drive Utils', () => {\n  describe('formatFileSize', () => {\n    it('should format bytes correctly', () => {\n      expect(formatFileSize(1024)).toBe('1.0 KB')\n      expect(formatFileSize(1048576)).toBe('1.0 MB')\n      expect(formatFileSize(1073741824)).toBe('1.0 GB')\n      expect(formatFileSize(0)).toBe('0 B')\n      expect(formatFileSize(500)).toBe('500 B')\n    })\n\n    it('should handle undefined size', () => {\n      expect(formatFileSize(undefined)).toBe('0 B')\n    })\n  })\n\n  describe('getFileExtension', () => {\n    it('should extract file extensions', () => {\n      expect(getFileExtension('document.pdf')).toBe('pdf')\n      expect(getFileExtension('image.jpeg')).toBe('jpeg')\n      expect(getFileExtension('file.tar.gz')).toBe('gz')\n      expect(getFileExtension('noextension')).toBe('')\n    })\n\n    it('should handle empty or invalid filenames', () => {\n      expect(getFileExtension('')).toBe('')\n      expect(getFileExtension('.')).toBe('')\n      expect(getFileExtension('.hidden')).toBe('hidden')\n    })\n  })\n\n  describe('isImageFile', () => {\n    it('should identify image files by extension', () => {\n      expect(isImageFile('photo.jpg')).toBe(true)\n      expect(isImageFile('image.png')).toBe(true)\n      expect(isImageFile('graphic.gif')).toBe(true)\n      expect(isImageFile('document.pdf')).toBe(false)\n    })\n\n    it('should identify image files by mime type', () => {\n      expect(isImageFile('image/jpeg')).toBe(true)\n      expect(isImageFile('image/png')).toBe(true)\n      expect(isImageFile('application/pdf')).toBe(false)\n    })\n  })\n\n  describe('isVideoFile', () => {\n    it('should identify video files', () => {\n      expect(isVideoFile('movie.mp4')).toBe(true)\n      expect(isVideoFile('video.avi')).toBe(true)\n      expect(isVideoFile('clip.mov')).toBe(true)\n      expect(isVideoFile('image.jpg')).toBe(false)\n    })\n\n    it('should identify video files by mime type', () => {\n      expect(isVideoFile('video/mp4')).toBe(true)\n      expect(isVideoFile('video/quicktime')).toBe(true)\n      expect(isVideoFile('image/jpeg')).toBe(false)\n    })\n  })\n\n  describe('getFileTypeCategory', () => {\n    it('should categorize files correctly', () => {\n      expect(getFileTypeCategory('document.pdf')).toBe('document')\n      expect(getFileTypeCategory('photo.jpg')).toBe('image')\n      expect(getFileTypeCategory('song.mp3')).toBe('audio')\n      expect(getFileTypeCategory('video.mp4')).toBe('video')\n      expect(getFileTypeCategory('archive.zip')).toBe('archive')\n      expect(getFileTypeCategory('unknown.xyz')).toBe('other')\n    })\n\n    it('should handle Google Apps files', () => {\n      expect(getFileTypeCategory('', 'application/vnd.google-apps.document')).toBe('document')\n      expect(getFileTypeCategory('', 'application/vnd.google-apps.spreadsheet')).toBe('document')\n      expect(getFileTypeCategory('', 'application/vnd.google-apps.folder')).toBe('folder')\n    })\n  })\n})\n"],"names":["describe","it","expect","formatFileSize","toBe","undefined","getFileExtension","isImageFile","isVideoFile","getFileTypeCategory"],"mappings":"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"}