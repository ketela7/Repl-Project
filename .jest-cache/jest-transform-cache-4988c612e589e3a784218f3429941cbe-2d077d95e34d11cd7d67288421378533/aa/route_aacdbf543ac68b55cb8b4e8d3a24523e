a239c9fe90ee3e580a450ff4683497cc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _apiutils = require("../../../../../lib/api-utils");
const _apiretry = require("../../../../../lib/api-retry");
const _apithrottle = require("../../../../../lib/api-throttle");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
async function POST(request) {
    try {
        const body = await request.json();
        // Initialize Drive service with authentication
        const authResult = await (0, _apiutils.initDriveService)();
        if (!authResult.success) {
            return authResult.response;
        }
        const { driveService } = authResult;
        // Get fileId from body and determine operation type
        const { fileId, items, downloadMode = 'oneByOne' } = body;
        const isBulkOperation = items && items.length > 1;
        if (isBulkOperation) {
            // Bulk operations handling
            if (!(0, _apiutils.validateOperationsRequest)(body)) {
                return _server.NextResponse.json({
                    error: 'Invalid request body for bulk download'
                }, {
                    status: 400
                });
            }
            return await processBulkDownload(driveService, items, downloadMode);
        }
        // Single file download handling
        if (!fileId) {
            return _server.NextResponse.json({
                error: 'fileId is required for single file download'
            }, {
                status: 400
            });
        }
        return await processSingleDownload(driveService, fileId, downloadMode);
    } catch (error) {
        return (0, _apiutils.handleApiError)(error);
    }
}
/**
 * Process bulk download operations with chunked processing for efficiency
 */ async function processBulkDownload(driveService, items, downloadMode) {
    // Filter only files (skip folders automatically)
    const downloadableFiles = items.filter((item)=>!item.isFolder);
    const skippedFolders = items.filter((item)=>item.isFolder);
    const results = {
        success: [],
        skipped: skippedFolders.map((folder)=>({
                id: folder.id,
                name: folder.name,
                reason: 'Folders not supported'
            })),
        failed: [],
        downloadMode,
        timestamp: new Date().toISOString()
    };
    // Chunked processing for better performance and rate limit handling
    const CHUNK_SIZE = 5;
    const chunks = chunkArray(downloadableFiles, CHUNK_SIZE);
    for (const chunk of chunks){
        const chunkPromises = chunk.map(async (file)=>{
            try {
                const downloadResult = await processFileDownload(driveService, file, downloadMode);
                if (downloadResult.success) {
                    results.success.push({
                        id: file.id,
                        name: file.name,
                        downloadUrl: downloadResult.downloadUrl
                    });
                } else {
                    results.failed.push({
                        id: file.id,
                        name: file.name,
                        error: downloadResult.error || 'Unknown error'
                    });
                }
            } catch (error) {
                const errorMessage = getErrorMessage(error);
                if (isSkippableError(error)) {
                    results.skipped.push({
                        id: file.id,
                        name: file.name,
                        reason: errorMessage
                    });
                } else {
                    results.failed.push({
                        id: file.id,
                        name: file.name,
                        error: errorMessage
                    });
                }
            }
        });
        // Process chunk in parallel
        await Promise.all(chunkPromises);
    }
    // For exportLinks mode, generate and return CSV file
    if (downloadMode === 'exportLinks') {
        if (results.success.length > 0) {
            const csvContent = generateDownloadCSV(results.success);
            const fileName = `download-links-${new Date().toISOString().split('T')[0]}.csv`;
            return new _server.NextResponse(csvContent, {
                status: 200,
                headers: {
                    'Content-Type': 'text/csv; charset=utf-8',
                    'Content-Disposition': `attachment; filename="${fileName}"`
                }
            });
        } else {
            return _server.NextResponse.json({
                error: 'No files available for CSV export'
            }, {
                status: 400
            });
        }
    }
    // For other modes, return JSON response with download URLs
    return _server.NextResponse.json(results);
}
/**
 * Process single file download with streaming or URL fallback
 */ async function processSingleDownload(driveService, fileId, downloadMode) {
    if (downloadMode === 'exportLinks') {
        // Return Google Drive direct download URL for CSV generation
        const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;
        return _server.NextResponse.json({
            success: true,
            downloadUrl,
            fileName: `file-${fileId}`
        });
    }
    // For direct downloads, stream file from Google Drive through our server
    try {
        // Get file metadata first for proper filename
        const metadata = await (0, _apithrottle.throttledDriveRequest)(async ()=>{
            return await (0, _apiretry.retryDriveApiCall)(async ()=>{
                return await driveService.getFileMetadata(fileId, [
                    'name',
                    'mimeType',
                    'size'
                ]);
            });
        });
        const fileName = metadata.name;
        const mimeType = metadata.mimeType || 'application/octet-stream';
        // Check if it's a Google Workspace file that needs export
        if (isGoogleWorkspaceFile(mimeType)) {
            const exportMimeType = getExportFormat(mimeType);
            const exportExtension = getFileExtension(exportMimeType);
            // Export Google Workspace file
            const exportBuffer = await (0, _apithrottle.throttledDriveRequest)(async ()=>{
                return await (0, _apiretry.retryDriveApiCall)(async ()=>{
                    return await driveService.exportFile(fileId, exportMimeType);
                });
            });
            const uint8Array = new Uint8Array(exportBuffer);
            const exportFileName = `${fileName}.${exportExtension}`;
            return new _server.NextResponse(uint8Array, {
                status: 200,
                headers: {
                    'Content-Type': exportMimeType,
                    'Content-Disposition': `attachment; filename="${exportFileName}"`,
                    'Content-Length': uint8Array.length.toString()
                }
            });
        }
        // For regular files, stream directly
        const fileStream = await (0, _apithrottle.throttledDriveRequest)(async ()=>{
            return await (0, _apiretry.retryDriveApiCall)(async ()=>{
                return await driveService.downloadFile(fileId);
            });
        });
        // Convert Node.js Readable to Web ReadableStream
        const { Readable } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("stream")));
        const webStream = Readable.toWeb(fileStream);
        // Stream file directly to browser
        return new _server.NextResponse(webStream, {
            status: 200,
            headers: {
                'Content-Type': mimeType,
                'Content-Disposition': `attachment; filename="${fileName}"`
            }
        });
    } catch (error) {
        // Fallback to Google Drive direct URL if streaming fails
        const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;
        return _server.NextResponse.json({
            success: true,
            downloadUrl,
            fileName: `file-${fileId}`,
            fallback: true
        });
    }
}
/**
 * Process individual file download - optimized for bulk operations
 */ async function processFileDownload(driveService, file, downloadMode) {
    try {
        // For batch mode, directly return Google Drive URL without additional API calls
        if (downloadMode === 'batch' || downloadMode === 'exportLinks') {
            const downloadUrl = `https://drive.google.com/uc?export=download&id=${file.id}`;
            return {
                success: true,
                downloadUrl,
                fileName: file.name
            };
        }
        // For other modes, get metadata if needed
        const fileMetadata = await (0, _apithrottle.throttledDriveRequest)(async ()=>{
            return await (0, _apiretry.retryDriveApiCall)(async ()=>{
                return await driveService.files.get({
                    fileId: file.id,
                    fields: 'id,name,mimeType,size,webViewLink'
                });
            });
        });
        const fileData = fileMetadata.data;
        const downloadUrl = `https://drive.google.com/uc?export=download&id=${file.id}`;
        return {
            success: true,
            downloadUrl,
            fileName: fileData.name
        };
    } catch (error) {
        return {
            success: false,
            error: getErrorMessage(error)
        };
    }
}
/**
 * Utility function to chunk array for batch processing
 */ function chunkArray(array, chunkSize) {
    const chunks = [];
    for(let i = 0; i < array.length; i += chunkSize){
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
}
/**
 * Generate CSV content for download links
 */ function generateDownloadCSV(successfulDownloads) {
    const headers = 'File Name,Download Link\n';
    const rows = successfulDownloads.filter((item)=>item.downloadUrl).map((item)=>`"${item.name}","${item.downloadUrl}"`).join('\n');
    return headers + rows;
}
/**
 * Check if file is Google Workspace file that needs export
 */ function isGoogleWorkspaceFile(mimeType) {
    return mimeType?.startsWith('application/vnd.google-apps.') || false;
}
/**
 * Get appropriate export format for Google Workspace files
 */ function getExportFormat(mimeType) {
    const exportMap = {
        'application/vnd.google-apps.document': 'application/pdf',
        'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.google-apps.presentation': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'application/vnd.google-apps.drawing': 'image/png'
    };
    return exportMap[mimeType] || 'application/pdf';
}
/**
 * Get file extension from mime type
 */ function getFileExtension(mimeType) {
    const extensionMap = {
        'application/pdf': 'pdf',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'pptx',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
        'image/png': 'png',
        'image/jpeg': 'jpg',
        'text/plain': 'txt',
        'text/csv': 'csv'
    };
    return extensionMap[mimeType] || 'pdf';
}
/**
 * Extract user-friendly error message
 */ function getErrorMessage(error) {
    if (error?.response?.data?.error) {
        const apiError = error.response.data.error;
        switch(apiError.code){
            case 403:
                if (apiError.message?.includes('rateLimitExceeded')) {
                    return 'Rate limit exceeded';
                }
                if (apiError.message?.includes('quotaExceeded')) {
                    return 'Quota exceeded';
                }
                if (apiError.message?.includes('storageQuotaExceeded')) {
                    return 'Storage quota exceeded';
                }
                return 'Access denied';
            case 404:
                return 'File not found';
            case 429:
                return 'Too many requests';
            default:
                return apiError.message || 'Download failed';
        }
    }
    return error?.message || 'Unknown error occurred';
}
/**
 * Check if error should cause file to be skipped rather than failed
 */ function isSkippableError(error) {
    const errorCode = error?.response?.data?.error?.code;
    const errorMessage = error?.response?.data?.error?.message || '';
    return errorCode === 403 && (errorMessage.includes('rateLimitExceeded') || errorMessage.includes('quotaExceeded') || errorMessage.includes('storageQuotaExceeded')) || errorCode === 429;
}

//# sourceMappingURL=data:application/json;base64,