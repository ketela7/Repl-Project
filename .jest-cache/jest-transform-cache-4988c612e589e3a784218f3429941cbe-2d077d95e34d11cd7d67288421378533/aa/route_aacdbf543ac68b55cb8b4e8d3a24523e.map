{"version":3,"sources":["/home/runner/workspace/src/app/api/drive/files/download/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService, handleApiError, validateOperationsRequest } from '@/lib/api-utils'\nimport { retryDriveApiCall } from '@/lib/api-retry'\nimport { throttledDriveRequest } from '@/lib/api-throttle'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n\n    // Initialize Drive service with authentication\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { driveService } = authResult\n\n    // Get fileId from body and determine operation type\n    const { fileId, items, downloadMode = 'oneByOne' } = body\n    const isBulkOperation = items && items.length > 1\n\n    if (isBulkOperation) {\n      // Bulk operations handling\n      if (!validateOperationsRequest(body)) {\n        return NextResponse.json({ error: 'Invalid request body for bulk download' }, { status: 400 })\n      }\n\n      return await processBulkDownload(driveService, items, downloadMode)\n    }\n\n    // Single file download handling\n    if (!fileId) {\n      return NextResponse.json({ error: 'fileId is required for single file download' }, { status: 400 })\n    }\n\n    return await processSingleDownload(driveService, fileId, downloadMode)\n  } catch (error) {\n    return handleApiError(error)\n  }\n}\n\n/**\n * Process bulk download operations with chunked processing for efficiency\n */\nasync function processBulkDownload(driveService: any, items: any[], downloadMode: string) {\n  // Filter only files (skip folders automatically)\n  const downloadableFiles = items.filter((item: any) => !item.isFolder)\n  const skippedFolders = items.filter((item: any) => item.isFolder)\n\n  const results = {\n    success: [] as Array<{ id: string; name: string; downloadUrl?: string }>,\n    skipped: skippedFolders.map((folder: any) => ({\n      id: folder.id,\n      name: folder.name,\n      reason: 'Folders not supported',\n    })),\n    failed: [] as Array<{ id: string; name: string; error: string }>,\n    downloadMode,\n    timestamp: new Date().toISOString(),\n  }\n\n  // Chunked processing for better performance and rate limit handling\n  const CHUNK_SIZE = 5\n  const chunks = chunkArray(downloadableFiles, CHUNK_SIZE)\n\n  for (const chunk of chunks) {\n    const chunkPromises = chunk.map(async (file: any) => {\n      try {\n        const downloadResult = await processFileDownload(driveService, file, downloadMode)\n\n        if (downloadResult.success) {\n          results.success.push({\n            id: file.id,\n            name: file.name,\n            downloadUrl: downloadResult.downloadUrl,\n          })\n        } else {\n          results.failed.push({\n            id: file.id,\n            name: file.name,\n            error: downloadResult.error || 'Unknown error',\n          })\n        }\n      } catch (error: any) {\n        const errorMessage = getErrorMessage(error)\n\n        if (isSkippableError(error)) {\n          results.skipped.push({\n            id: file.id,\n            name: file.name,\n            reason: errorMessage,\n          })\n        } else {\n          results.failed.push({\n            id: file.id,\n            name: file.name,\n            error: errorMessage,\n          })\n        }\n      }\n    })\n\n    // Process chunk in parallel\n    await Promise.all(chunkPromises)\n  }\n\n  // For exportLinks mode, generate and return CSV file\n  if (downloadMode === 'exportLinks') {\n    if (results.success.length > 0) {\n      const csvContent = generateDownloadCSV(results.success)\n      const fileName = `download-links-${new Date().toISOString().split('T')[0]}.csv`\n\n      return new NextResponse(csvContent, {\n        status: 200,\n        headers: {\n          'Content-Type': 'text/csv; charset=utf-8',\n          'Content-Disposition': `attachment; filename=\"${fileName}\"`,\n        },\n      })\n    } else {\n      return NextResponse.json({ error: 'No files available for CSV export' }, { status: 400 })\n    }\n  }\n\n  // For other modes, return JSON response with download URLs\n  return NextResponse.json(results)\n}\n\n/**\n * Process single file download with streaming or URL fallback\n */\nasync function processSingleDownload(driveService: any, fileId: string, downloadMode: string) {\n  if (downloadMode === 'exportLinks') {\n    // Return Google Drive direct download URL for CSV generation\n    const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`\n    return NextResponse.json({\n      success: true,\n      downloadUrl,\n      fileName: `file-${fileId}`,\n    })\n  }\n\n  // For direct downloads, stream file from Google Drive through our server\n  try {\n    // Get file metadata first for proper filename\n    const metadata = await throttledDriveRequest(async () => {\n      return await retryDriveApiCall(async () => {\n        return await driveService.getFileMetadata(fileId, ['name', 'mimeType', 'size'])\n      })\n    })\n\n    const fileName = metadata.name\n    const mimeType = metadata.mimeType || 'application/octet-stream'\n\n    // Check if it's a Google Workspace file that needs export\n    if (isGoogleWorkspaceFile(mimeType)) {\n      const exportMimeType = getExportFormat(mimeType)\n      const exportExtension = getFileExtension(exportMimeType)\n\n      // Export Google Workspace file\n      const exportBuffer = await throttledDriveRequest(async () => {\n        return await retryDriveApiCall(async () => {\n          return await driveService.exportFile(fileId, exportMimeType)\n        })\n      })\n\n      const uint8Array = new Uint8Array(exportBuffer)\n      const exportFileName = `${fileName}.${exportExtension}`\n\n      return new NextResponse(uint8Array, {\n        status: 200,\n        headers: {\n          'Content-Type': exportMimeType,\n          'Content-Disposition': `attachment; filename=\"${exportFileName}\"`,\n          'Content-Length': uint8Array.length.toString(),\n        },\n      })\n    }\n\n    // For regular files, stream directly\n    const fileStream = await throttledDriveRequest(async () => {\n      return await retryDriveApiCall(async () => {\n        return await driveService.downloadFile(fileId)\n      })\n    })\n\n    // Convert Node.js Readable to Web ReadableStream\n    const { Readable } = await import('stream')\n    const webStream = Readable.toWeb(fileStream)\n\n    // Stream file directly to browser\n    return new NextResponse(webStream, {\n      status: 200,\n      headers: {\n        'Content-Type': mimeType,\n        'Content-Disposition': `attachment; filename=\"${fileName}\"`,\n      },\n    })\n  } catch (error: any) {\n    // Fallback to Google Drive direct URL if streaming fails\n    const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`\n    return NextResponse.json({\n      success: true,\n      downloadUrl,\n      fileName: `file-${fileId}`,\n      fallback: true,\n    })\n  }\n}\n\n/**\n * Process individual file download - optimized for bulk operations\n */\nasync function processFileDownload(driveService: any, file: any, downloadMode: string) {\n  try {\n    // For batch mode, directly return Google Drive URL without additional API calls\n    if (downloadMode === 'batch' || downloadMode === 'exportLinks') {\n      const downloadUrl = `https://drive.google.com/uc?export=download&id=${file.id}`\n      return {\n        success: true,\n        downloadUrl,\n        fileName: file.name,\n      }\n    }\n\n    // For other modes, get metadata if needed\n    const fileMetadata = await throttledDriveRequest(async () => {\n      return await retryDriveApiCall(async () => {\n        return await driveService.files.get({\n          fileId: file.id,\n          fields: 'id,name,mimeType,size,webViewLink',\n        })\n      })\n    })\n\n    const fileData = fileMetadata.data\n    const downloadUrl = `https://drive.google.com/uc?export=download&id=${file.id}`\n\n    return {\n      success: true,\n      downloadUrl,\n      fileName: fileData.name,\n    }\n  } catch (error: any) {\n    return {\n      success: false,\n      error: getErrorMessage(error),\n    }\n  }\n}\n\n/**\n * Utility function to chunk array for batch processing\n */\nfunction chunkArray<T>(array: T[], chunkSize: number): T[][] {\n  const chunks: T[][] = []\n  for (let i = 0; i < array.length; i += chunkSize) {\n    chunks.push(array.slice(i, i + chunkSize))\n  }\n  return chunks\n}\n\n/**\n * Generate CSV content for download links\n */\nfunction generateDownloadCSV(successfulDownloads: Array<{ id: string; name: string; downloadUrl?: string }>) {\n  const headers = 'File Name,Download Link\\n'\n  const rows = successfulDownloads\n    .filter((item) => item.downloadUrl)\n    .map((item) => `\"${item.name}\",\"${item.downloadUrl}\"`)\n    .join('\\n')\n\n  return headers + rows\n}\n\n/**\n * Check if file is Google Workspace file that needs export\n */\nfunction isGoogleWorkspaceFile(mimeType: string): boolean {\n  return mimeType?.startsWith('application/vnd.google-apps.') || false\n}\n\n/**\n * Get appropriate export format for Google Workspace files\n */\nfunction getExportFormat(mimeType: string): string {\n  const exportMap: { [key: string]: string } = {\n    'application/vnd.google-apps.document': 'application/pdf',\n    'application/vnd.google-apps.spreadsheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.google-apps.presentation': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'application/vnd.google-apps.drawing': 'image/png',\n  }\n\n  return exportMap[mimeType] || 'application/pdf'\n}\n\n/**\n * Get file extension from mime type\n */\nfunction getFileExtension(mimeType: string): string {\n  const extensionMap: { [key: string]: string } = {\n    'application/pdf': 'pdf',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'pptx',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',\n    'image/png': 'png',\n    'image/jpeg': 'jpg',\n    'text/plain': 'txt',\n    'text/csv': 'csv',\n  }\n\n  return extensionMap[mimeType] || 'pdf'\n}\n\n/**\n * Extract user-friendly error message\n */\nfunction getErrorMessage(error: any): string {\n  if (error?.response?.data?.error) {\n    const apiError = error.response.data.error\n\n    switch (apiError.code) {\n      case 403:\n        if (apiError.message?.includes('rateLimitExceeded')) {\n          return 'Rate limit exceeded'\n        }\n        if (apiError.message?.includes('quotaExceeded')) {\n          return 'Quota exceeded'\n        }\n        if (apiError.message?.includes('storageQuotaExceeded')) {\n          return 'Storage quota exceeded'\n        }\n        return 'Access denied'\n      case 404:\n        return 'File not found'\n      case 429:\n        return 'Too many requests'\n      default:\n        return apiError.message || 'Download failed'\n    }\n  }\n\n  return error?.message || 'Unknown error occurred'\n}\n\n/**\n * Check if error should cause file to be skipped rather than failed\n */\nfunction isSkippableError(error: any): boolean {\n  const errorCode = error?.response?.data?.error?.code\n  const errorMessage = error?.response?.data?.error?.message || ''\n\n  return (\n    (errorCode === 403 &&\n      (errorMessage.includes('rateLimitExceeded') || errorMessage.includes('quotaExceeded') || errorMessage.includes('storageQuotaExceeded'))) ||\n    errorCode === 429\n  )\n}\n"],"names":["POST","request","body","json","authResult","initDriveService","success","response","driveService","fileId","items","downloadMode","isBulkOperation","length","validateOperationsRequest","NextResponse","error","status","processBulkDownload","processSingleDownload","handleApiError","downloadableFiles","filter","item","isFolder","skippedFolders","results","skipped","map","folder","id","name","reason","failed","timestamp","Date","toISOString","CHUNK_SIZE","chunks","chunkArray","chunk","chunkPromises","file","downloadResult","processFileDownload","push","downloadUrl","errorMessage","getErrorMessage","isSkippableError","Promise","all","csvContent","generateDownloadCSV","fileName","split","headers","metadata","throttledDriveRequest","retryDriveApiCall","getFileMetadata","mimeType","isGoogleWorkspaceFile","exportMimeType","getExportFormat","exportExtension","getFileExtension","exportBuffer","exportFile","uint8Array","Uint8Array","exportFileName","toString","fileStream","downloadFile","Readable","webStream","toWeb","fallback","fileMetadata","files","get","fields","fileData","data","array","chunkSize","i","slice","successfulDownloads","rows","join","startsWith","exportMap","extensionMap","apiError","code","message","includes","errorCode"],"mappings":"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"}