e54c47bc22a18c9d637275b25b1a812a
/**
 * API Testing Setup with Cookie-Based Authentication
 * Comprehensive testing infrastructure for all Google Drive API endpoints
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    APITester: function() {
        return APITester;
    },
    default: function() {
        return _default;
    }
});
class APITester {
    constructor(config){
        this.results = [];
        this.session = null;
        this.config = config;
    }
    /**
   * Extract session cookie from browser or environment
   */ async extractSessionCookie() {
        return this.config.sessionCookie;
    }
    /**
   * Validate session and extract user info
   */ async validateSession() {
        const startTime = Date.now();
        try {
            const response = await fetch(`${this.config.baseUrl}/api/auth/session`, {
                method: 'GET',
                headers: {
                    Cookie: this.config.sessionCookie,
                    'Content-Type': 'application/json'
                }
            });
            const responseTime = Date.now() - startTime;
            if (response.ok) {
                const sessionData = await response.json();
                this.session = {
                    cookie: this.config.sessionCookie,
                    userId: sessionData.user?.id || '',
                    email: sessionData.user?.email || '',
                    accessToken: sessionData.accessToken,
                    expiresAt: Date.now() + 60 * 60 * 1000
                };
                this.logResult({
                    endpoint: '/api/auth/session',
                    method: 'GET',
                    status: response.status,
                    responseTime,
                    success: true,
                    data: {
                        email: this.session.email,
                        userId: this.session.userId
                    }
                });
                return this.session;
            } else {
                this.logResult({
                    endpoint: '/api/auth/session',
                    method: 'GET',
                    status: response.status,
                    responseTime,
                    success: false,
                    error: 'Session validation failed'
                });
                return null;
            }
        } catch (error) {
            this.logResult({
                endpoint: '/api/auth/session',
                method: 'GET',
                status: 0,
                responseTime: Date.now() - startTime,
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return null;
        }
    }
    /**
   * Generic API request method with session cookie
   */ async apiRequest(endpoint, method = 'GET', body, customHeaders) {
        const startTime = Date.now();
        try {
            const headers = {
                Cookie: this.config.sessionCookie,
                'Content-Type': 'application/json',
                ...customHeaders
            };
            const requestConfig = {
                method,
                headers
            };
            if (body && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
                requestConfig.body = JSON.stringify(body);
            }
            const response = await fetch(`${this.config.baseUrl}${endpoint}`, requestConfig);
            const responseTime = Date.now() - startTime;
            let responseData;
            try {
                responseData = await response.json();
            } catch  {
                responseData = await response.text();
            }
            const result = {
                endpoint,
                method,
                status: response.status,
                responseTime,
                success: response.ok,
                data: responseData
            };
            if (!response.ok) {
                result.error = `HTTP ${response.status}: ${response.statusText}`;
            }
            this.logResult(result);
            return result;
        } catch (error) {
            const result = {
                endpoint,
                method,
                status: 0,
                responseTime: Date.now() - startTime,
                success: false,
                error: error instanceof Error ? error.message : 'Network error'
            };
            this.logResult(result);
            return result;
        }
    }
    /**
   * Test all Files API endpoints
   */ async testFilesAPI() {
        const filesTests = [];
        // Test basic file listing
        filesTests.push(await this.apiRequest('/api/drive/files', 'GET'));
        // Test with various parameters
        filesTests.push(await this.apiRequest('/api/drive/files?pageSize=10&sortBy=name', 'GET'));
        filesTests.push(await this.apiRequest('/api/drive/files?sortBy=modified&sortOrder=desc', 'GET'));
        filesTests.push(await this.apiRequest('/api/drive/files?pageSize=5&sortBy=size', 'GET'));
        // Test folder navigation (using folder from real data)
        filesTests.push(await this.apiRequest('/api/drive/files?folderId=149athC5H8cmh0QJq6xHu-cbFyS9J6fk-', 'GET'));
        return filesTests;
    }
    /**
   * Test individual file operations
   */ async testFileOperations() {
        const operationsTests = [];
        // Get file details (using real file ID from Drive)
        const fileId = '1q5xt1XgsroFmbYL1HWO1q3DzVvynDU0B' // Video file from your Drive
        ;
        operationsTests.push(await this.apiRequest(`/api/drive/files/${fileId}`, 'GET'));
        operationsTests.push(await this.apiRequest(`/api/drive/files/${fileId}/essential`, 'GET'));
        operationsTests.push(await this.apiRequest(`/api/drive/files/${fileId}/extended`, 'GET'));
        return operationsTests;
    }
    /**
   * Test bulk operations (safe operations only)
   */ async testBulkOperations() {
        const bulkTests = [];
        // Test bulk operations with real file IDs (read-only operations)
        const testFileIds = [
            '1q5xt1XgsroFmbYL1HWO1q3DzVvynDU0B',
            '149athC5H8cmh0QJq6xHu-cbFyS9J6fk-'
        ];
        // Test download operations (safe)
        bulkTests.push(await this.apiRequest('/api/drive/files/bulk/download', 'POST', {
            items: testFileIds.map((id)=>({
                    id,
                    name: `test-${id}`,
                    isFolder: false
                })),
            mode: 'export-links'
        }));
        return bulkTests;
    }
    /**
   * Test search and filter functionality
   */ async testSearchAndFilters() {
        const searchTests = [];
        // Test various search queries
        searchTests.push(await this.apiRequest('/api/drive/files?q=type:video', 'GET'));
        searchTests.push(await this.apiRequest('/api/drive/files?q=type:folder', 'GET'));
        searchTests.push(await this.apiRequest('/api/drive/files?viewStatus=my-drive', 'GET'));
        return searchTests;
    }
    /**
   * Test health and performance endpoints
   */ async testHealthEndpoints() {
        const healthTests = [];
        healthTests.push(await this.apiRequest('/api/health', 'GET'));
        healthTests.push(await this.apiRequest('/api/drive/performance', 'GET'));
        return healthTests;
    }
    /**
   * Log test result
   */ logResult(result) {
        this.results.push(result);
        const status = result.success ? '✅' : '❌';
        const timing = `${result.responseTime}ms`;
        console.log(`${status} ${result.method} ${result.endpoint} - ${result.status} (${timing})`);
        if (result.error) {
            console.log(`   Error: ${result.error}`);
        }
    }
    /**
   * Run comprehensive test suite
   */ async runAllTests() {
        console.log('🧪 Starting comprehensive API testing...');
        // Validate session first
        const session = await this.validateSession();
        if (!session) {
            throw new Error('Session validation failed - cannot proceed with testing');
        }
        console.log(`📧 Testing with session: ${session.email}`);
        // Run all test suites
        const allTests = [
            ...await this.testFilesAPI(),
            ...await this.testFileOperations(),
            ...await this.testBulkOperations(),
            ...await this.testSearchAndFilters(),
            ...await this.testHealthEndpoints()
        ];
        // Calculate statistics
        const passed = allTests.filter((t)=>t.success).length;
        const failed = allTests.length - passed;
        const responseTimes = allTests.map((t)=>t.responseTime);
        const averageResponseTime = responseTimes.reduce((a, b)=>a + b, 0) / responseTimes.length;
        const slowest = allTests.reduce((prev, curr)=>prev.responseTime > curr.responseTime ? prev : curr);
        const fastest = allTests.reduce((prev, curr)=>prev.responseTime < curr.responseTime ? prev : curr);
        const summary = {
            total: allTests.length,
            passed,
            failed,
            results: allTests,
            performance: {
                averageResponseTime: Math.round(averageResponseTime),
                slowestEndpoint: `${slowest.endpoint} (${slowest.responseTime}ms)`,
                fastestEndpoint: `${fastest.endpoint} (${fastest.responseTime}ms)`
            }
        };
        console.log('\n📊 Test Summary:');
        console.log(`   Total: ${summary.total}`);
        console.log(`   Passed: ${summary.passed}`);
        console.log(`   Failed: ${summary.failed}`);
        console.log(`   Average Response Time: ${summary.performance.averageResponseTime}ms`);
        console.log(`   Slowest: ${summary.performance.slowestEndpoint}`);
        console.log(`   Fastest: ${summary.performance.fastestEndpoint}`);
        return summary;
    }
    /**
   * Get test results
   */ getResults() {
        return this.results;
    }
    /**
   * Clear test results
   */ clearResults() {
        this.results = [];
    }
}
const _default = APITester;

//# sourceMappingURL=data:application/json;base64,