{"version":3,"sources":["/home/runner/workspace/__tests__/api/test-setup.ts"],"sourcesContent":["/**\n * API Testing Setup with Cookie-Based Authentication\n * Comprehensive testing infrastructure for all Google Drive API endpoints\n */\n\nexport interface TestConfig {\n  baseUrl: string\n  sessionCookie: string\n  testTimeout: number\n  retryAttempts: number\n}\n\nexport interface TestResult {\n  endpoint: string\n  method: string\n  status: number\n  responseTime: number\n  success: boolean\n  error?: string\n  data?: any\n}\n\nexport interface TestSession {\n  cookie: string\n  userId: string\n  email: string\n  accessToken?: string\n  expiresAt: number\n}\n\nexport class APITester {\n  private config: TestConfig\n  private results: TestResult[] = []\n  private session: TestSession | null = null\n\n  constructor(config: TestConfig) {\n    this.config = config\n  }\n\n  /**\n   * Extract session cookie from browser or environment\n   */\n  async extractSessionCookie(): Promise<string> {\n    return this.config.sessionCookie\n  }\n\n  /**\n   * Validate session and extract user info\n   */\n  async validateSession(): Promise<TestSession | null> {\n    const startTime = Date.now()\n\n    try {\n      const response = await fetch(`${this.config.baseUrl}/api/auth/session`, {\n        method: 'GET',\n        headers: {\n          Cookie: this.config.sessionCookie,\n          'Content-Type': 'application/json',\n        },\n      })\n\n      const responseTime = Date.now() - startTime\n\n      if (response.ok) {\n        const sessionData = await response.json()\n\n        this.session = {\n          cookie: this.config.sessionCookie,\n          userId: sessionData.user?.id || '',\n          email: sessionData.user?.email || '',\n          accessToken: sessionData.accessToken,\n          expiresAt: Date.now() + 60 * 60 * 1000, // 1 hour default\n        }\n\n        this.logResult({\n          endpoint: '/api/auth/session',\n          method: 'GET',\n          status: response.status,\n          responseTime,\n          success: true,\n          data: { email: this.session.email, userId: this.session.userId },\n        })\n\n        return this.session\n      } else {\n        this.logResult({\n          endpoint: '/api/auth/session',\n          method: 'GET',\n          status: response.status,\n          responseTime,\n          success: false,\n          error: 'Session validation failed',\n        })\n        return null\n      }\n    } catch (error) {\n      this.logResult({\n        endpoint: '/api/auth/session',\n        method: 'GET',\n        status: 0,\n        responseTime: Date.now() - startTime,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      })\n      return null\n    }\n  }\n\n  /**\n   * Generic API request method with session cookie\n   */\n  async apiRequest(endpoint: string, method: string = 'GET', body?: any, customHeaders?: Record<string, string>): Promise<TestResult> {\n    const startTime = Date.now()\n\n    try {\n      const headers: Record<string, string> = {\n        Cookie: this.config.sessionCookie,\n        'Content-Type': 'application/json',\n        ...customHeaders,\n      }\n\n      const requestConfig: RequestInit = {\n        method,\n        headers,\n      }\n\n      if (body && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n        requestConfig.body = JSON.stringify(body)\n      }\n\n      const response = await fetch(`${this.config.baseUrl}${endpoint}`, requestConfig)\n      const responseTime = Date.now() - startTime\n\n      let responseData\n      try {\n        responseData = await response.json()\n      } catch {\n        responseData = await response.text()\n      }\n\n      const result: TestResult = {\n        endpoint,\n        method,\n        status: response.status,\n        responseTime,\n        success: response.ok,\n        data: responseData,\n      }\n\n      if (!response.ok) {\n        result.error = `HTTP ${response.status}: ${response.statusText}`\n      }\n\n      this.logResult(result)\n      return result\n    } catch (error) {\n      const result: TestResult = {\n        endpoint,\n        method,\n        status: 0,\n        responseTime: Date.now() - startTime,\n        success: false,\n        error: error instanceof Error ? error.message : 'Network error',\n      }\n\n      this.logResult(result)\n      return result\n    }\n  }\n\n  /**\n   * Test all Files API endpoints\n   */\n  async testFilesAPI(): Promise<TestResult[]> {\n    const filesTests: TestResult[] = []\n\n    // Test basic file listing\n    filesTests.push(await this.apiRequest('/api/drive/files', 'GET'))\n\n    // Test with various parameters\n    filesTests.push(await this.apiRequest('/api/drive/files?pageSize=10&sortBy=name', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?sortBy=modified&sortOrder=desc', 'GET'))\n    filesTests.push(await this.apiRequest('/api/drive/files?pageSize=5&sortBy=size', 'GET'))\n\n    // Test folder navigation (using folder from real data)\n    filesTests.push(await this.apiRequest('/api/drive/files?folderId=149athC5H8cmh0QJq6xHu-cbFyS9J6fk-', 'GET'))\n\n    return filesTests\n  }\n\n  /**\n   * Test individual file operations\n   */\n  async testFileOperations(): Promise<TestResult[]> {\n    const operationsTests: TestResult[] = []\n\n    // Get file details (using real file ID from Drive)\n    const fileId = '1q5xt1XgsroFmbYL1HWO1q3DzVvynDU0B' // Video file from your Drive\n\n    operationsTests.push(await this.apiRequest(`/api/drive/files/${fileId}`, 'GET'))\n    operationsTests.push(await this.apiRequest(`/api/drive/files/${fileId}/essential`, 'GET'))\n    operationsTests.push(await this.apiRequest(`/api/drive/files/${fileId}/extended`, 'GET'))\n\n    return operationsTests\n  }\n\n  /**\n   * Test bulk operations (safe operations only)\n   */\n  async testBulkOperations(): Promise<TestResult[]> {\n    const bulkTests: TestResult[] = []\n\n    // Test bulk operations with real file IDs (read-only operations)\n    const testFileIds = [\n      '1q5xt1XgsroFmbYL1HWO1q3DzVvynDU0B', // Video file\n      '149athC5H8cmh0QJq6xHu-cbFyS9J6fk-', // Folder \"00\"\n    ]\n\n    // Test download operations (safe)\n    bulkTests.push(\n      await this.apiRequest('/api/drive/files/bulk/download', 'POST', {\n        items: testFileIds.map((id) => ({ id, name: `test-${id}`, isFolder: false })),\n        mode: 'export-links',\n      })\n    )\n\n    return bulkTests\n  }\n\n  /**\n   * Test search and filter functionality\n   */\n  async testSearchAndFilters(): Promise<TestResult[]> {\n    const searchTests: TestResult[] = []\n\n    // Test various search queries\n    searchTests.push(await this.apiRequest('/api/drive/files?q=type:video', 'GET'))\n    searchTests.push(await this.apiRequest('/api/drive/files?q=type:folder', 'GET'))\n    searchTests.push(await this.apiRequest('/api/drive/files?viewStatus=my-drive', 'GET'))\n\n    return searchTests\n  }\n\n  /**\n   * Test health and performance endpoints\n   */\n  async testHealthEndpoints(): Promise<TestResult[]> {\n    const healthTests: TestResult[] = []\n\n    healthTests.push(await this.apiRequest('/api/health', 'GET'))\n    healthTests.push(await this.apiRequest('/api/drive/performance', 'GET'))\n\n    return healthTests\n  }\n\n  /**\n   * Log test result\n   */\n  private logResult(result: TestResult): void {\n    this.results.push(result)\n\n    const status = result.success ? '‚úÖ' : '‚ùå'\n    const timing = `${result.responseTime}ms`\n\n    console.log(`${status} ${result.method} ${result.endpoint} - ${result.status} (${timing})`)\n\n    if (result.error) {\n      console.log(`   Error: ${result.error}`)\n    }\n  }\n\n  /**\n   * Run comprehensive test suite\n   */\n  async runAllTests(): Promise<{\n    total: number\n    passed: number\n    failed: number\n    results: TestResult[]\n    performance: {\n      averageResponseTime: number\n      slowestEndpoint: string\n      fastestEndpoint: string\n    }\n  }> {\n    console.log('üß™ Starting comprehensive API testing...')\n\n    // Validate session first\n    const session = await this.validateSession()\n    if (!session) {\n      throw new Error('Session validation failed - cannot proceed with testing')\n    }\n\n    console.log(`üìß Testing with session: ${session.email}`)\n\n    // Run all test suites\n    const allTests = [\n      ...(await this.testFilesAPI()),\n      ...(await this.testFileOperations()),\n      ...(await this.testBulkOperations()),\n      ...(await this.testSearchAndFilters()),\n      ...(await this.testHealthEndpoints()),\n    ]\n\n    // Calculate statistics\n    const passed = allTests.filter((t) => t.success).length\n    const failed = allTests.length - passed\n    const responseTimes = allTests.map((t) => t.responseTime)\n    const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length\n\n    const slowest = allTests.reduce((prev, curr) => (prev.responseTime > curr.responseTime ? prev : curr))\n    const fastest = allTests.reduce((prev, curr) => (prev.responseTime < curr.responseTime ? prev : curr))\n\n    const summary = {\n      total: allTests.length,\n      passed,\n      failed,\n      results: allTests,\n      performance: {\n        averageResponseTime: Math.round(averageResponseTime),\n        slowestEndpoint: `${slowest.endpoint} (${slowest.responseTime}ms)`,\n        fastestEndpoint: `${fastest.endpoint} (${fastest.responseTime}ms)`,\n      },\n    }\n\n    console.log('\\nüìä Test Summary:')\n    console.log(`   Total: ${summary.total}`)\n    console.log(`   Passed: ${summary.passed}`)\n    console.log(`   Failed: ${summary.failed}`)\n    console.log(`   Average Response Time: ${summary.performance.averageResponseTime}ms`)\n    console.log(`   Slowest: ${summary.performance.slowestEndpoint}`)\n    console.log(`   Fastest: ${summary.performance.fastestEndpoint}`)\n\n    return summary\n  }\n\n  /**\n   * Get test results\n   */\n  getResults(): TestResult[] {\n    return this.results\n  }\n\n  /**\n   * Clear test results\n   */\n  clearResults(): void {\n    this.results = []\n  }\n}\n\nexport default APITester\n"],"names":["APITester","constructor","config","results","session","extractSessionCookie","sessionCookie","validateSession","startTime","Date","now","response","fetch","baseUrl","method","headers","Cookie","responseTime","ok","sessionData","json","cookie","userId","user","id","email","accessToken","expiresAt","logResult","endpoint","status","success","data","error","Error","message","apiRequest","body","customHeaders","requestConfig","JSON","stringify","responseData","text","result","statusText","testFilesAPI","filesTests","push","testFileOperations","operationsTests","fileId","testBulkOperations","bulkTests","testFileIds","items","map","name","isFolder","mode","testSearchAndFilters","searchTests","testHealthEndpoints","healthTests","timing","console","log","runAllTests","allTests","passed","filter","t","length","failed","responseTimes","averageResponseTime","reduce","a","b","slowest","prev","curr","fastest","summary","total","performance","Math","round","slowestEndpoint","fastestEndpoint","getResults","clearResults"],"mappings":"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"}