{"version":3,"names":["cov_1fq2witv0f","actualCoverage","s","GET","buildDriveQuery","filters","f","conditions","viewStatus","b","push","Date","now","toISOString","fileType","fileTypes","split","filter","type","length","typeConditions","forEach","trim","join","search","searchTerm","replace","substring","createdAfter","createdBefore","modifiedAfter","modifiedBefore","owner","sizeMin","sizeMax","getSortKey","sortBy","request","authResult","_apiutils","initDriveService","success","response","session","driveService","searchParams","URL","url","fileId","get","fileMetadata","getFileMetadata","id","_server","NextResponse","json","pageSize","Math","min","Number","pageToken","undefined","folderIdParam","folderId","sortOrder","baseQuery","query","parentQuery","sortKey","orderBy","cacheKey","_cache","driveCache","generateDriveKey","parentId","userId","user","email","shouldUseCache","cachedData","result","listFiles","MAX_SAFE_INTEGER","files","file","fileSize","size","set","error","name","code","needsReauth","redirect","status"],"sources":["/home/runner/workspace/src/app/api/drive/files/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nimport { initDriveService } from '@/lib/api-utils'\nimport { driveCache } from '@/lib/cache'\n\ninterface FileFilter {\n  fileType?: string\n  viewStatus?: string\n  sortBy?: string\n  sortOrder?: 'asc' | 'desc'\n  search?: string\n  createdAfter?: string\n  createdBefore?: string\n  modifiedAfter?: string\n  modifiedBefore?: string\n  owner?: string\n  sizeMin?: string\n  sizeMax?: string\n}\n\nfunction buildDriveQuery(filters: FileFilter): string {\n  const conditions: string[] = []\n\n  // Handle view status filters according to Google Drive API documentation\n  switch (filters.viewStatus) {\n    case 'trash':\n      // Trash view - show only trashed files\n      conditions.push('trashed=true')\n      break\n    case 'shared':\n      // Shared with me view - files shared by others\n      //conditions.push('trashed=false')\n      conditions.push('sharedWithMe=true')\n      break\n    case 'starred':\n      // Starred view - starred files only\n      //conditions.push('trashed=false')\n      conditions.push('starred=true')\n      break\n    case 'my-drive':\n      // My Drive view - files owned by me\n      //conditions.push('trashed=false')\n      conditions.push(\"'me' in owners\")\n      break\n    case 'recent':\n      // Recent view - recently modified files on 30 days ago\n      //conditions.push('trashed=false')\n      conditions.push(`modifiedTime > '${new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()}'`)\n    //break\n    //case 'all':\n    //default:\n    // All files view - show non-trashed files by default\n    //conditions.push('trashed=false')\n    //break\n  }\n\n  // File type filters - handle both single and multiple types\n  if (filters.fileType && filters.fileType !== 'all') {\n    // Handle comma-separated file types from frontend\n    const fileTypes = filters.fileType.split(',').filter(type => type && type !== 'all')\n\n    if (fileTypes.length > 0) {\n      const typeConditions: string[] = []\n\n      fileTypes.forEach(type => {\n        switch (type.trim()) {\n          case 'folder':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.folder'\")\n            break\n\n          case 'shortcut':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.shortcut'\")\n            break\n\n          case 'document':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/vnd.google-apps.document'\",\n                \"mimeType = 'application/pdf'\",\n                \"mimeType = 'text/plain'\",\n                \"mimeType = 'application/msword'\",\n                \"mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'spreadsheet':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/vnd.google-apps.spreadsheet'\",\n                \"mimeType = 'application/vnd.ms-excel'\",\n                \"mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'presentation':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/vnd.google-apps.presentation'\",\n                \"mimeType = 'application/vnd.ms-powerpoint'\",\n                \"mimeType = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'image':\n            typeConditions.push(\"mimeType contains 'image/'\")\n            break\n\n          case 'video':\n            typeConditions.push(\"mimeType contains 'video/'\")\n            break\n\n          case 'audio':\n            typeConditions.push(\"mimeType contains 'audio/'\")\n            break\n\n          case 'archive':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/zip'\",\n                \"mimeType = 'application/x-zip-compressed'\",\n                \"mimeType = 'application/x-rar-compressed'\",\n                \"mimeType = 'application/vnd.rar'\",\n                \"mimeType = 'application/x-7z-compressed'\",\n                \"mimeType = 'application/x-tar'\",\n                \"mimeType = 'application/gzip'\",\n                \"mimeType = 'application/x-bzip2'\",\n                \"mimeType = 'application/x-xz'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'code':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'text/javascript'\",\n                \"mimeType = 'application/javascript'\",\n                \"mimeType = 'text/x-python'\",\n                \"mimeType = 'text/x-c'\",\n                \"mimeType = 'text/x-c++'\",\n                \"mimeType = 'text/x-java-source'\",\n                \"mimeType = 'application/json'\",\n                \"mimeType = 'application/xml'\",\n                \"mimeType = 'text/html'\",\n                \"mimeType = 'text/css'\",\n                \"mimeType contains 'text/x-'\",\n                \"mimeType contains 'application/x-'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'drawing':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.drawing'\")\n            break\n\n          case 'form':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.form'\")\n            break\n\n          case 'jamboard':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.jam'\")\n            break\n\n          case 'script':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.script'\")\n            break\n\n          case 'site':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.site'\")\n            break\n\n          case 'map':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.map'\")\n            break\n\n          case 'photo':\n            typeConditions.push(\"mimeType = 'application/vnd.google-apps.photo'\")\n            break\n\n          case 'google-native':\n            typeConditions.push(\"mimeType contains 'application/vnd.google-apps'\")\n            break\n\n          case 'pdf':\n            typeConditions.push(\"mimeType = 'application/pdf'\")\n            break\n\n          case 'text':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'text/plain'\",\n                \"mimeType = 'text/markdown'\",\n                \"mimeType = 'text/csv'\",\n                \"mimeType = 'text/tab-separated-values'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'design':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/vnd.google-apps.drawing'\",\n                \"mimeType = 'image/svg+xml'\",\n                \"mimeType = 'application/postscript'\",\n                \"mimeType = 'application/illustrator'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'database':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/x-sqlite3'\",\n                \"mimeType = 'application/vnd.ms-access'\",\n                \"mimeType = 'application/x-dbf'\",\n                \"mimeType contains 'database'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'ebook':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'application/epub+zip'\",\n                \"mimeType = 'application/x-mobipocket-ebook'\",\n                \"mimeType = 'application/vnd.amazon.ebook'\",\n                \"mimeType = 'application/x-fictionbook+xml'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'font':\n            typeConditions.push(\n              `(${[\n                \"mimeType = 'font/ttf'\",\n                \"mimeType = 'font/otf'\",\n                \"mimeType = 'font/woff'\",\n                \"mimeType = 'font/woff2'\",\n                \"mimeType = 'application/font-woff'\",\n              ].join(' or ')})`,\n            )\n            break\n\n          case 'calendar':\n            typeConditions.push(`(${[\"mimeType = 'text/calendar'\", \"mimeType = 'application/ics'\"].join(' or ')})`)\n            break\n\n          case 'contact':\n            typeConditions.push(`(${[\"mimeType = 'text/vcard'\", \"mimeType = 'text/x-vcard'\"].join(' or ')})`)\n            break\n\n          case 'other':\n            typeConditions.push(\n              `(${[\n                \"not mimeType contains 'application/vnd.google-apps'\",\n                \"not mimeType contains 'image/'\",\n                \"not mimeType contains 'video/'\",\n                \"not mimeType contains 'audio/'\",\n                \"not mimeType contains 'text/'\",\n                \"not mimeType contains 'application/pdf'\",\n                \"not mimeType contains 'zip'\",\n                \"not mimeType contains 'archive'\",\n              ].join(' and ')})`,\n            )\n            break\n        }\n      })\n\n      if (typeConditions.length > 0) {\n        conditions.push(`(${typeConditions.join(' or ')})`)\n      }\n    }\n  }\n\n  // Search query with proper sanitization\n  if (filters.search) {\n    const searchTerm = filters.search\n      .replace(/['\"\\\\]/g, '') // Remove quotes and backslashes\n      .trim()\n      .substring(0, 100) // Limit length\n    if (searchTerm) {\n      conditions.push(`name contains '${searchTerm}'`)\n    }\n  }\n\n  // Date filters\n  if (filters.createdAfter) {\n    conditions.push(`createdTime >= '${filters.createdAfter}'`)\n  }\n  if (filters.createdBefore) {\n    conditions.push(`createdTime <= '${filters.createdBefore}'`)\n  }\n  if (filters.modifiedAfter) {\n    conditions.push(`modifiedTime >= '${filters.modifiedAfter}'`)\n  }\n  if (filters.modifiedBefore) {\n    conditions.push(`modifiedTime <= '${filters.modifiedBefore}'`)\n  }\n\n  // Owner filter by email\n  if (filters.owner) {\n    conditions.push(`'${filters.owner}' in owners`)\n  }\n\n  // Size filtering - Google Drive API doesn't support size operators in query\n  // We'll handle size filtering on the client side after fetching results\n  // Only exclude folders when size filters are specified since they don't have meaningful sizes\n  if (filters.sizeMin || filters.sizeMax) {\n    conditions.push(\"mimeType != 'application/vnd.google-apps.folder'\")\n  }\n\n  return conditions.join(' and ')\n}\n\nfunction getSortKey(sortBy: string) {\n  switch (sortBy) {\n    case 'name':\n      return 'name'\n    case 'modified':\n      return 'modifiedTime'\n    case 'created':\n      return 'createdTime'\n    case 'size':\n      return 'size'\n    default:\n      return 'modifiedTime'\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authResult = await initDriveService()\n    if (!authResult.success) {\n      return authResult.response!\n    }\n\n    const { session, driveService } = authResult\n\n    const { searchParams } = new URL(request.url)\n    const fileId = searchParams.get('fileId')\n\n    // If fileId is provided, return single file metadata (used by breadcrumb)\n    if (fileId) {\n      const fileMetadata = await driveService!.getFileMetadata(fileId, ['id', 'name', 'parents', 'mimeType'])\n\n      // Ensure id is always included in response\n      const response = {\n        ...fileMetadata,\n        id: fileMetadata.id || fileId, // Fallback to requested fileId if id is missing\n      }\n\n      // // // // // console.log('[Drive API] Single file response:', response)\n      // // // // // console.log('[Drive API] File ID check:', { requestedId: fileId, responseId: response.id })\n\n      return NextResponse.json(response)\n    }\n\n    // Otherwise, list folder contents\n    const pageSize = Math.min(Number(searchParams.get('pageSize')) || 50, 1000)\n    const pageToken = searchParams.get('pageToken') || undefined\n    const folderIdParam = searchParams.get('folderId')\n    const folderId = folderIdParam || 'root'\n\n    const filters: FileFilter = {\n      fileType: searchParams.get('fileType') || 'all',\n      viewStatus: searchParams.get('viewStatus') || 'all',\n      ...(searchParams.get('sortBy') && { sortBy: searchParams.get('sortBy')! }),\n      sortOrder: searchParams.get('sortOrder') === 'asc' ? 'asc' : 'desc',\n      ...(searchParams.get('search') && { search: searchParams.get('search')! }),\n      ...(searchParams.get('createdAfter') && { createdAfter: searchParams.get('createdAfter')! }),\n      ...(searchParams.get('createdBefore') && {\n        createdBefore: searchParams.get('createdBefore')!,\n      }),\n      ...(searchParams.get('modifiedAfter') && {\n        modifiedAfter: searchParams.get('modifiedAfter')!,\n      }),\n      ...(searchParams.get('modifiedBefore') && {\n        modifiedBefore: searchParams.get('modifiedBefore')!,\n      }),\n      ...(searchParams.get('owner') && { owner: searchParams.get('owner')! }),\n      ...(searchParams.get('sizeMin') && { sizeMin: searchParams.get('sizeMin')! }),\n      ...(searchParams.get('sizeMax') && { sizeMax: searchParams.get('sizeMax')! }),\n    }\n\n    const baseQuery = buildDriveQuery(filters)\n\n    // Build query with parent constraints\n    let query = baseQuery\n\n    // Handle different view types with proper parent constraints\n    if (folderIdParam) {\n      // When navigating to specific folder, always apply parent constraint\n      const parentQuery = folderId !== 'root' ? `'${folderId}' in parents` : \"'root' in parents\"\n      query = query ? `${query} and ${parentQuery}` : parentQuery\n    } else if (filters.viewStatus === 'my-drive') {\n      // My Drive view without folder navigation - show root folder\n      const parentQuery = \"'root' in parents\"\n      query = query ? `${query} and ${parentQuery}` : parentQuery\n    } else {\n      // Other views (shared, starred, recent, etc.)\n      // These views search across entire Drive without parent constraints\n      // They already have their specific filters from buildDriveQuery\n      // No parent constraint needed - search globally\n    }\n\n    const sortKey = getSortKey(filters.sortBy || 'modified')\n    const orderBy = `${sortKey} ${filters.sortOrder}`\n\n    const cacheKey = driveCache.generateDriveKey({\n      parentId: folderId,\n      userId: session.user?.email,\n      ...(pageToken && { pageToken }),\n      query,\n      pageSize,\n    })\n\n    // For folder navigation, bypass cache if no pageToken (first page)\n    // This ensures fresh data when navigating between folders\n    const shouldUseCache = pageToken !== undefined\n    const cachedData = shouldUseCache ? driveCache.get(cacheKey) : null\n    if (cachedData) {\n      return NextResponse.json(cachedData)\n    }\n\n    // // // // // console.log('[Drive API] Request details:', {\n    //   folderId,\n    //   viewStatus: filters.viewStatus,\n    //   query,\n    // })\n\n    // Pass the complete query to the Drive service\n    const result = await driveService!.listFiles({\n      query,\n      ...(pageToken && { pageToken }),\n      pageSize,\n      orderBy,\n    })\n\n    // Apply client-side size filtering since Google Drive API doesn't support size operators\n    if (filters.sizeMin || filters.sizeMax) {\n      const sizeMin = filters.sizeMin ? Number(filters.sizeMin) : 0\n      const sizeMax = filters.sizeMax ? Number(filters.sizeMax) : Number.MAX_SAFE_INTEGER\n\n      result.files = result.files.filter((file: any) => {\n        const fileSize = file.size ? Number(file.size) : 0\n        return fileSize >= sizeMin && fileSize <= sizeMax\n      })\n    }\n\n    driveCache.set(cacheKey, result)\n\n    return NextResponse.json(result)\n  } catch (error: any) {\n    //// // // // // console.error('Drive API Error:', error)\n\n    // Handle authentication errors\n    if (error.name === 'AuthenticationError' || error.code === 401) {\n      return NextResponse.json(\n        {\n          error: 'Authentication expired',\n          needsReauth: true,\n          redirect: '/auth/v1/login?reauth=drive&callbackUrl=/dashboard/drive',\n        },\n        { status: 401 },\n      )\n    }\n\n    // Handle permission errors\n    if (error.name === 'PermissionError' || error.code === 403) {\n      return NextResponse.json(\n        {\n          error: 'Insufficient Drive permissions',\n          needsReauth: true,\n          redirect: '/auth/v1/login?reauth=drive&callbackUrl=/dashboard/drive',\n        },\n        { status: 403 },\n      )\n    }\n\n    return NextResponse.json({ error: 'Failed to fetch files' }, { status: 500 })\n  }\n}\n"],"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","ignoreList":[]}